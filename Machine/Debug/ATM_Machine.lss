
ATM_Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000428  00800060  000075da  0000766e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800488  00800488  00007a96  2**0
                  ALLOC
  3 .stab         000051c0  00000000  00000000  00007a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f62  00000000  00000000  0000cc58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000ebba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000ed9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003280  00000000  00000000  0000efcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001697  00000000  00000000  0001224c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015de  00000000  00000000  000138e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00014ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000376  00000000  00000000  000150c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002294  00000000  00000000  0001543a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000176ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b8 39 	jmp	0x7370	; 0x7370 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 3a 	call	0x7458	; 0x7458 <main>
      8a:	0c 94 eb 3a 	jmp	0x75d6	; 0x75d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__subsf3>
      be:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x71>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	85 5a       	subi	r24, 0xA5	; 165
     1e8:	9c 4f       	sbci	r25, 0xFC	; 252
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x52f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__udivdi3+0x384>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__udivdi3+0x384>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__udivdi3+0x37c>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x384>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0x394>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0x38c>
     482:	85 5a       	subi	r24, 0xA5	; 165
     484:	9c 4f       	sbci	r25, 0xFC	; 252
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__udivdi3+0x3de>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__udivdi3+0x61a>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivdi3+0x3f0>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__udivdi3+0x3e8>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivdi3+0x408>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__udivdi3+0x400>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__udivdi3+0x420>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__udivdi3+0x418>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__udivdi3+0x438>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__udivdi3+0x430>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__udivdi3+0x530>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__udivdi3+0x530>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__udivdi3+0x530>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__udivdi3+0x5d4>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__udivdi3+0x5d4>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__udivdi3+0x5d4>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x5ec>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x5e4>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__udivdi3+0x716>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__udivdi3+0x716>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__udivdi3+0x716>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x49>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x49>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x49>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x535>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x7d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x51f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0xb1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0xa7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0xa7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0xd5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0xd5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0xcd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0xd5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	85 5a       	subi	r24, 0xA5	; 165
     94a:	9c 4f       	sbci	r25, 0xFC	; 252
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x139>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x507>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x137>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x507>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x51f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x14b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x143>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x18f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x187>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x1ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x1a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x1bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x1d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x1d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x2b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x365>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x365>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x365>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x479>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x4ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x52f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x4df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x4d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x52f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x52f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x535>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x535>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x53d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 b7 3a 	jmp	0x756e	; 0x756e <__epilogue_restores__>

00000dd4 <__umoddi3>:
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <__prologue_saves__>
     de0:	a8 e0       	ldi	r26, 0x08	; 8
     de2:	4e 01       	movw	r8, r28
     de4:	08 94       	sec
     de6:	81 1c       	adc	r8, r1
     de8:	91 1c       	adc	r9, r1
     dea:	f4 01       	movw	r30, r8
     dec:	6a 2e       	mov	r6, r26
     dee:	11 92       	st	Z+, r1
     df0:	6a 94       	dec	r6
     df2:	e9 f7       	brne	.-6      	; 0xdee <__umoddi3+0x1a>
     df4:	29 83       	std	Y+1, r18	; 0x01
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	6d 83       	std	Y+5, r22	; 0x05
     dfe:	7e 83       	std	Y+6, r23	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	98 87       	std	Y+8, r25	; 0x08
     e04:	ce 01       	movw	r24, r28
     e06:	09 96       	adiw	r24, 0x09	; 9
     e08:	fc 01       	movw	r30, r24
     e0a:	11 92       	st	Z+, r1
     e0c:	aa 95       	dec	r26
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <__umoddi3+0x36>
     e10:	a9 86       	std	Y+9, r10	; 0x09
     e12:	ba 86       	std	Y+10, r11	; 0x0a
     e14:	cb 86       	std	Y+11, r12	; 0x0b
     e16:	dc 86       	std	Y+12, r13	; 0x0c
     e18:	ed 86       	std	Y+13, r14	; 0x0d
     e1a:	fe 86       	std	Y+14, r15	; 0x0e
     e1c:	0f 87       	std	Y+15, r16	; 0x0f
     e1e:	18 8b       	std	Y+16, r17	; 0x10
     e20:	29 84       	ldd	r2, Y+9	; 0x09
     e22:	3a 84       	ldd	r3, Y+10	; 0x0a
     e24:	4b 84       	ldd	r4, Y+11	; 0x0b
     e26:	5c 84       	ldd	r5, Y+12	; 0x0c
     e28:	ad 84       	ldd	r10, Y+13	; 0x0d
     e2a:	be 84       	ldd	r11, Y+14	; 0x0e
     e2c:	cf 84       	ldd	r12, Y+15	; 0x0f
     e2e:	d8 88       	ldd	r13, Y+16	; 0x10
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	2f af       	std	Y+63, r18	; 0x3f
     e3c:	69 97       	sbiw	r28, 0x19	; 25
     e3e:	6a 96       	adiw	r28, 0x1a	; 26
     e40:	3f af       	std	Y+63, r19	; 0x3f
     e42:	6a 97       	sbiw	r28, 0x1a	; 26
     e44:	6b 96       	adiw	r28, 0x1b	; 27
     e46:	4f af       	std	Y+63, r20	; 0x3f
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	6c 96       	adiw	r28, 0x1c	; 28
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	6c 96       	adiw	r28, 0x1c	; 28
     e52:	6c ac       	ldd	r6, Y+60	; 0x3c
     e54:	7d ac       	ldd	r7, Y+61	; 0x3d
     e56:	8e ac       	ldd	r8, Y+62	; 0x3e
     e58:	9f ac       	ldd	r9, Y+63	; 0x3f
     e5a:	6c 97       	sbiw	r28, 0x1c	; 28
     e5c:	69 aa       	std	Y+49, r6	; 0x31
     e5e:	7a aa       	std	Y+50, r7	; 0x32
     e60:	8b aa       	std	Y+51, r8	; 0x33
     e62:	9c aa       	std	Y+52, r9	; 0x34
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d aa       	std	Y+53, r6	; 0x35
     e72:	7e aa       	std	Y+54, r7	; 0x36
     e74:	8f aa       	std	Y+55, r8	; 0x37
     e76:	98 ae       	std	Y+56, r9	; 0x38
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	c1 04       	cpc	r12, r1
     e7e:	d1 04       	cpc	r13, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <__umoddi3+0xb0>
     e82:	04 c3       	rjmp	.+1544   	; 0x148c <__umoddi3+0x6b8>
     e84:	62 14       	cp	r6, r2
     e86:	73 04       	cpc	r7, r3
     e88:	84 04       	cpc	r8, r4
     e8a:	95 04       	cpc	r9, r5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__umoddi3+0xbc>
     e8e:	00 c1       	rjmp	.+512    	; 0x1090 <__umoddi3+0x2bc>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	20 16       	cp	r2, r16
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	30 06       	cpc	r3, r16
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 06       	cpc	r4, r16
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	50 06       	cpc	r5, r16
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__umoddi3+0xf0>
     ea2:	1f ef       	ldi	r17, 0xFF	; 255
     ea4:	21 16       	cp	r2, r17
     ea6:	31 04       	cpc	r3, r1
     ea8:	41 04       	cpc	r4, r1
     eaa:	51 04       	cpc	r5, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <__umoddi3+0xe8>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__umoddi3+0xe8>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e8 2e       	mov	r14, r24
     eb4:	f1 2c       	mov	r15, r1
     eb6:	01 2d       	mov	r16, r1
     eb8:	11 2d       	mov	r17, r1
     eba:	18 c0       	rjmp	.+48     	; 0xeec <__umoddi3+0x118>
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__umoddi3+0x118>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	24 16       	cp	r2, r20
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	34 06       	cpc	r3, r20
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	44 06       	cpc	r4, r20
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	54 06       	cpc	r5, r20
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__umoddi3+0x10e>
     ed6:	b8 e1       	ldi	r27, 0x18	; 24
     ed8:	eb 2e       	mov	r14, r27
     eda:	f1 2c       	mov	r15, r1
     edc:	01 2d       	mov	r16, r1
     ede:	11 2d       	mov	r17, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__umoddi3+0x118>
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	ea 2e       	mov	r14, r26
     ee6:	f1 2c       	mov	r15, r1
     ee8:	01 2d       	mov	r16, r1
     eea:	11 2d       	mov	r17, r1
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	0e 2c       	mov	r0, r14
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__umoddi3+0x128>
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__umoddi3+0x120>
     f00:	85 5a       	subi	r24, 0xA5	; 165
     f02:	9c 4f       	sbci	r25, 0xFC	; 252
     f04:	dc 01       	movw	r26, r24
     f06:	2c 91       	ld	r18, X
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8e 19       	sub	r24, r14
     f12:	9f 09       	sbc	r25, r15
     f14:	a0 0b       	sbc	r26, r16
     f16:	b1 0b       	sbc	r27, r17
     f18:	5c 01       	movw	r10, r24
     f1a:	6d 01       	movw	r12, r26
     f1c:	a2 1a       	sub	r10, r18
     f1e:	b1 08       	sbc	r11, r1
     f20:	c1 08       	sbc	r12, r1
     f22:	d1 08       	sbc	r13, r1
     f24:	a9 ae       	std	Y+57, r10	; 0x39
     f26:	ba ae       	std	Y+58, r11	; 0x3a
     f28:	cb ae       	std	Y+59, r12	; 0x3b
     f2a:	dc ae       	std	Y+60, r13	; 0x3c
     f2c:	a1 14       	cp	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	c1 04       	cpc	r12, r1
     f32:	d1 04       	cpc	r13, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__umoddi3+0x164>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <__umoddi3+0x1e2>
     f38:	69 ad       	ldd	r22, Y+57	; 0x39
     f3a:	06 2e       	mov	r0, r22
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__umoddi3+0x172>
     f3e:	22 0c       	add	r2, r2
     f40:	33 1c       	adc	r3, r3
     f42:	44 1c       	adc	r4, r4
     f44:	55 1c       	adc	r5, r5
     f46:	0a 94       	dec	r0
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__umoddi3+0x16a>
     f4a:	a4 01       	movw	r20, r8
     f4c:	93 01       	movw	r18, r6
     f4e:	06 2e       	mov	r0, r22
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__umoddi3+0x186>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__umoddi3+0x17e>
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	8a 19       	sub	r24, r10
     f64:	9b 09       	sbc	r25, r11
     f66:	6c 96       	adiw	r28, 0x1c	; 28
     f68:	cc ac       	ldd	r12, Y+60	; 0x3c
     f6a:	dd ac       	ldd	r13, Y+61	; 0x3d
     f6c:	ee ac       	ldd	r14, Y+62	; 0x3e
     f6e:	ff ac       	ldd	r15, Y+63	; 0x3f
     f70:	6c 97       	sbiw	r28, 0x1c	; 28
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__umoddi3+0x1a8>
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	d7 94       	ror	r13
     f7a:	c7 94       	ror	r12
     f7c:	8a 95       	dec	r24
     f7e:	d2 f7       	brpl	.-12     	; 0xf74 <__umoddi3+0x1a0>
     f80:	87 01       	movw	r16, r14
     f82:	76 01       	movw	r14, r12
     f84:	e2 2a       	or	r14, r18
     f86:	f3 2a       	or	r15, r19
     f88:	04 2b       	or	r16, r20
     f8a:	15 2b       	or	r17, r21
     f8c:	ed aa       	std	Y+53, r14	; 0x35
     f8e:	fe aa       	std	Y+54, r15	; 0x36
     f90:	0f ab       	std	Y+55, r16	; 0x37
     f92:	18 af       	std	Y+56, r17	; 0x38
     f94:	6c 96       	adiw	r28, 0x1c	; 28
     f96:	8c ad       	ldd	r24, Y+60	; 0x3c
     f98:	9d ad       	ldd	r25, Y+61	; 0x3d
     f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__umoddi3+0x1d6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	6a 95       	dec	r22
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__umoddi3+0x1ce>
     fae:	89 ab       	std	Y+49, r24	; 0x31
     fb0:	9a ab       	std	Y+50, r25	; 0x32
     fb2:	ab ab       	std	Y+51, r26	; 0x33
     fb4:	bc ab       	std	Y+52, r27	; 0x34
     fb6:	32 01       	movw	r6, r4
     fb8:	88 24       	eor	r8, r8
     fba:	99 24       	eor	r9, r9
     fbc:	b2 01       	movw	r22, r4
     fbe:	a1 01       	movw	r20, r2
     fc0:	60 70       	andi	r22, 0x00	; 0
     fc2:	70 70       	andi	r23, 0x00	; 0
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	4c af       	std	Y+60, r20	; 0x3c
     fc8:	5d af       	std	Y+61, r21	; 0x3d
     fca:	6e af       	std	Y+62, r22	; 0x3e
     fcc:	7f af       	std	Y+63, r23	; 0x3f
     fce:	21 97       	sbiw	r28, 0x01	; 1
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	a4 01       	movw	r20, r8
     fda:	93 01       	movw	r18, r6
     fdc:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	a4 01       	movw	r20, r8
     fee:	93 01       	movw	r18, r6
     ff0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	2c ad       	ldd	r18, Y+60	; 0x3c
     ffc:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1000:	5f ad       	ldd	r21, Y+63	; 0x3f
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	87 01       	movw	r16, r14
    100e:	ff 24       	eor	r15, r15
    1010:	ee 24       	eor	r14, r14
    1012:	a9 a8       	ldd	r10, Y+49	; 0x31
    1014:	ba a8       	ldd	r11, Y+50	; 0x32
    1016:	cb a8       	ldd	r12, Y+51	; 0x33
    1018:	dc a8       	ldd	r13, Y+52	; 0x34
    101a:	c6 01       	movw	r24, r12
    101c:	aa 27       	eor	r26, r26
    101e:	bb 27       	eor	r27, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	a8 2a       	or	r10, r24
    1026:	b9 2a       	or	r11, r25
    1028:	ca 2a       	or	r12, r26
    102a:	db 2a       	or	r13, r27
    102c:	a2 16       	cp	r10, r18
    102e:	b3 06       	cpc	r11, r19
    1030:	c4 06       	cpc	r12, r20
    1032:	d5 06       	cpc	r13, r21
    1034:	90 f4       	brcc	.+36     	; 0x105a <__umoddi3+0x286>
    1036:	a2 0c       	add	r10, r2
    1038:	b3 1c       	adc	r11, r3
    103a:	c4 1c       	adc	r12, r4
    103c:	d5 1c       	adc	r13, r5
    103e:	a2 14       	cp	r10, r2
    1040:	b3 04       	cpc	r11, r3
    1042:	c4 04       	cpc	r12, r4
    1044:	d5 04       	cpc	r13, r5
    1046:	48 f0       	brcs	.+18     	; 0x105a <__umoddi3+0x286>
    1048:	a2 16       	cp	r10, r18
    104a:	b3 06       	cpc	r11, r19
    104c:	c4 06       	cpc	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	20 f4       	brcc	.+8      	; 0x105a <__umoddi3+0x286>
    1052:	a2 0c       	add	r10, r2
    1054:	b3 1c       	adc	r11, r3
    1056:	c4 1c       	adc	r12, r4
    1058:	d5 1c       	adc	r13, r5
    105a:	a2 1a       	sub	r10, r18
    105c:	b3 0a       	sbc	r11, r19
    105e:	c4 0a       	sbc	r12, r20
    1060:	d5 0a       	sbc	r13, r21
    1062:	c6 01       	movw	r24, r12
    1064:	b5 01       	movw	r22, r10
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	a4 01       	movw	r20, r8
    1078:	93 01       	movw	r18, r6
    107a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	2c ad       	ldd	r18, Y+60	; 0x3c
    1086:	3d ad       	ldd	r19, Y+61	; 0x3d
    1088:	4e ad       	ldd	r20, Y+62	; 0x3e
    108a:	5f ad       	ldd	r21, Y+63	; 0x3f
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	ba c1       	rjmp	.+884    	; 0x1404 <__umoddi3+0x630>
    1090:	21 14       	cp	r2, r1
    1092:	31 04       	cpc	r3, r1
    1094:	41 04       	cpc	r4, r1
    1096:	51 04       	cpc	r5, r1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__umoddi3+0x2e2>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	da 01       	movw	r26, r20
    10b2:	1c 01       	movw	r2, r24
    10b4:	2d 01       	movw	r4, r26
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	20 16       	cp	r2, r16
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	30 06       	cpc	r3, r16
    10be:	01 e0       	ldi	r16, 0x01	; 1
    10c0:	40 06       	cpc	r4, r16
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	50 06       	cpc	r5, r16
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <__umoddi3+0x316>
    10c8:	1f ef       	ldi	r17, 0xFF	; 255
    10ca:	21 16       	cp	r2, r17
    10cc:	31 04       	cpc	r3, r1
    10ce:	41 04       	cpc	r4, r1
    10d0:	51 04       	cpc	r5, r1
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <__umoddi3+0x30e>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__umoddi3+0x30e>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	e6 2e       	mov	r14, r22
    10da:	f1 2c       	mov	r15, r1
    10dc:	01 2d       	mov	r16, r1
    10de:	11 2d       	mov	r17, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <__umoddi3+0x33e>
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <__umoddi3+0x33e>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	24 16       	cp	r2, r20
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	34 06       	cpc	r3, r20
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	44 06       	cpc	r4, r20
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	54 06       	cpc	r5, r20
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__umoddi3+0x334>
    10fc:	58 e1       	ldi	r21, 0x18	; 24
    10fe:	e5 2e       	mov	r14, r21
    1100:	f1 2c       	mov	r15, r1
    1102:	01 2d       	mov	r16, r1
    1104:	11 2d       	mov	r17, r1
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__umoddi3+0x33e>
    1108:	40 e1       	ldi	r20, 0x10	; 16
    110a:	e4 2e       	mov	r14, r20
    110c:	f1 2c       	mov	r15, r1
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	d2 01       	movw	r26, r4
    1114:	c1 01       	movw	r24, r2
    1116:	0e 2c       	mov	r0, r14
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__umoddi3+0x34e>
    111a:	b6 95       	lsr	r27
    111c:	a7 95       	ror	r26
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__umoddi3+0x346>
    1126:	85 5a       	subi	r24, 0xA5	; 165
    1128:	9c 4f       	sbci	r25, 0xFC	; 252
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 2e       	mov	r10, r19
    1132:	b1 2c       	mov	r11, r1
    1134:	c1 2c       	mov	r12, r1
    1136:	d1 2c       	mov	r13, r1
    1138:	d6 01       	movw	r26, r12
    113a:	c5 01       	movw	r24, r10
    113c:	8e 19       	sub	r24, r14
    113e:	9f 09       	sbc	r25, r15
    1140:	a0 0b       	sbc	r26, r16
    1142:	b1 0b       	sbc	r27, r17
    1144:	7c 01       	movw	r14, r24
    1146:	8d 01       	movw	r16, r26
    1148:	e2 1a       	sub	r14, r18
    114a:	f1 08       	sbc	r15, r1
    114c:	01 09       	sbc	r16, r1
    114e:	11 09       	sbc	r17, r1
    1150:	e9 ae       	std	Y+57, r14	; 0x39
    1152:	fa ae       	std	Y+58, r15	; 0x3a
    1154:	0b af       	std	Y+59, r16	; 0x3b
    1156:	1c af       	std	Y+60, r17	; 0x3c
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	01 05       	cpc	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <__umoddi3+0x39c>
    1162:	64 01       	movw	r12, r8
    1164:	53 01       	movw	r10, r6
    1166:	a2 18       	sub	r10, r2
    1168:	b3 08       	sbc	r11, r3
    116a:	c4 08       	sbc	r12, r4
    116c:	d5 08       	sbc	r13, r5
    116e:	e2 c0       	rjmp	.+452    	; 0x1334 <__umoddi3+0x560>
    1170:	f9 ac       	ldd	r15, Y+57	; 0x39
    1172:	68 96       	adiw	r28, 0x18	; 24
    1174:	ff ae       	std	Y+63, r15	; 0x3f
    1176:	68 97       	sbiw	r28, 0x18	; 24
    1178:	0f 2c       	mov	r0, r15
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__umoddi3+0x3b0>
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	44 1c       	adc	r4, r4
    1182:	55 1c       	adc	r5, r5
    1184:	0a 94       	dec	r0
    1186:	d2 f7       	brpl	.-12     	; 0x117c <__umoddi3+0x3a8>
    1188:	8a 2d       	mov	r24, r10
    118a:	8f 19       	sub	r24, r15
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	08 2e       	mov	r0, r24
    1192:	04 c0       	rjmp	.+8      	; 0x119c <__umoddi3+0x3c8>
    1194:	d6 94       	lsr	r13
    1196:	c7 94       	ror	r12
    1198:	b7 94       	ror	r11
    119a:	a7 94       	ror	r10
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <__umoddi3+0x3c0>
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__umoddi3+0x3da>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	fa 94       	dec	r15
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <__umoddi3+0x3d2>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	6c ac       	ldd	r6, Y+60	; 0x3c
    11b6:	7d ac       	ldd	r7, Y+61	; 0x3d
    11b8:	8e ac       	ldd	r8, Y+62	; 0x3e
    11ba:	9f ac       	ldd	r9, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x3f4>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x3ec>
    11cc:	84 01       	movw	r16, r8
    11ce:	73 01       	movw	r14, r6
    11d0:	e2 2a       	or	r14, r18
    11d2:	f3 2a       	or	r15, r19
    11d4:	04 2b       	or	r16, r20
    11d6:	15 2b       	or	r17, r21
    11d8:	ed a6       	std	Y+45, r14	; 0x2d
    11da:	fe a6       	std	Y+46, r15	; 0x2e
    11dc:	0f a7       	std	Y+47, r16	; 0x2f
    11de:	18 ab       	std	Y+48, r17	; 0x30
    11e0:	32 01       	movw	r6, r4
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	b2 01       	movw	r22, r4
    11e8:	a1 01       	movw	r20, r2
    11ea:	60 70       	andi	r22, 0x00	; 0
    11ec:	70 70       	andi	r23, 0x00	; 0
    11ee:	25 96       	adiw	r28, 0x05	; 5
    11f0:	4c af       	std	Y+60, r20	; 0x3c
    11f2:	5d af       	std	Y+61, r21	; 0x3d
    11f4:	6e af       	std	Y+62, r22	; 0x3e
    11f6:	7f af       	std	Y+63, r23	; 0x3f
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	c6 01       	movw	r24, r12
    11fc:	b5 01       	movw	r22, r10
    11fe:	a4 01       	movw	r20, r8
    1200:	93 01       	movw	r18, r6
    1202:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	a4 01       	movw	r20, r8
    1210:	93 01       	movw	r18, r6
    1212:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	25 96       	adiw	r28, 0x05	; 5
    121c:	2c ad       	ldd	r18, Y+60	; 0x3c
    121e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1220:	4e ad       	ldd	r20, Y+62	; 0x3e
    1222:	5f ad       	ldd	r21, Y+63	; 0x3f
    1224:	25 97       	sbiw	r28, 0x05	; 5
    1226:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	87 01       	movw	r16, r14
    1230:	ff 24       	eor	r15, r15
    1232:	ee 24       	eor	r14, r14
    1234:	ad a4       	ldd	r10, Y+45	; 0x2d
    1236:	be a4       	ldd	r11, Y+46	; 0x2e
    1238:	cf a4       	ldd	r12, Y+47	; 0x2f
    123a:	d8 a8       	ldd	r13, Y+48	; 0x30
    123c:	c6 01       	movw	r24, r12
    123e:	aa 27       	eor	r26, r26
    1240:	bb 27       	eor	r27, r27
    1242:	5c 01       	movw	r10, r24
    1244:	6d 01       	movw	r12, r26
    1246:	ae 28       	or	r10, r14
    1248:	bf 28       	or	r11, r15
    124a:	c0 2a       	or	r12, r16
    124c:	d1 2a       	or	r13, r17
    124e:	a2 16       	cp	r10, r18
    1250:	b3 06       	cpc	r11, r19
    1252:	c4 06       	cpc	r12, r20
    1254:	d5 06       	cpc	r13, r21
    1256:	90 f4       	brcc	.+36     	; 0x127c <__umoddi3+0x4a8>
    1258:	a2 0c       	add	r10, r2
    125a:	b3 1c       	adc	r11, r3
    125c:	c4 1c       	adc	r12, r4
    125e:	d5 1c       	adc	r13, r5
    1260:	a2 14       	cp	r10, r2
    1262:	b3 04       	cpc	r11, r3
    1264:	c4 04       	cpc	r12, r4
    1266:	d5 04       	cpc	r13, r5
    1268:	48 f0       	brcs	.+18     	; 0x127c <__umoddi3+0x4a8>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	20 f4       	brcc	.+8      	; 0x127c <__umoddi3+0x4a8>
    1274:	a2 0c       	add	r10, r2
    1276:	b3 1c       	adc	r11, r3
    1278:	c4 1c       	adc	r12, r4
    127a:	d5 1c       	adc	r13, r5
    127c:	a2 1a       	sub	r10, r18
    127e:	b3 0a       	sbc	r11, r19
    1280:	c4 0a       	sbc	r12, r20
    1282:	d5 0a       	sbc	r13, r21
    1284:	c6 01       	movw	r24, r12
    1286:	b5 01       	movw	r22, r10
    1288:	a4 01       	movw	r20, r8
    128a:	93 01       	movw	r18, r6
    128c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	c6 01       	movw	r24, r12
    1296:	b5 01       	movw	r22, r10
    1298:	a4 01       	movw	r20, r8
    129a:	93 01       	movw	r18, r6
    129c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	25 96       	adiw	r28, 0x05	; 5
    12a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ae:	25 97       	sbiw	r28, 0x05	; 5
    12b0:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	87 01       	movw	r16, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	ee 24       	eor	r14, r14
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	af a5       	ldd	r26, Y+47	; 0x2f
    12c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    12c6:	a0 70       	andi	r26, 0x00	; 0
    12c8:	b0 70       	andi	r27, 0x00	; 0
    12ca:	57 01       	movw	r10, r14
    12cc:	68 01       	movw	r12, r16
    12ce:	a8 2a       	or	r10, r24
    12d0:	b9 2a       	or	r11, r25
    12d2:	ca 2a       	or	r12, r26
    12d4:	db 2a       	or	r13, r27
    12d6:	a2 16       	cp	r10, r18
    12d8:	b3 06       	cpc	r11, r19
    12da:	c4 06       	cpc	r12, r20
    12dc:	d5 06       	cpc	r13, r21
    12de:	90 f4       	brcc	.+36     	; 0x1304 <__umoddi3+0x530>
    12e0:	a2 0c       	add	r10, r2
    12e2:	b3 1c       	adc	r11, r3
    12e4:	c4 1c       	adc	r12, r4
    12e6:	d5 1c       	adc	r13, r5
    12e8:	a2 14       	cp	r10, r2
    12ea:	b3 04       	cpc	r11, r3
    12ec:	c4 04       	cpc	r12, r4
    12ee:	d5 04       	cpc	r13, r5
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <__umoddi3+0x530>
    12f2:	a2 16       	cp	r10, r18
    12f4:	b3 06       	cpc	r11, r19
    12f6:	c4 06       	cpc	r12, r20
    12f8:	d5 06       	cpc	r13, r21
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__umoddi3+0x530>
    12fc:	a2 0c       	add	r10, r2
    12fe:	b3 1c       	adc	r11, r3
    1300:	c4 1c       	adc	r12, r4
    1302:	d5 1c       	adc	r13, r5
    1304:	6c 96       	adiw	r28, 0x1c	; 28
    1306:	ec ac       	ldd	r14, Y+60	; 0x3c
    1308:	fd ac       	ldd	r15, Y+61	; 0x3d
    130a:	0e ad       	ldd	r16, Y+62	; 0x3e
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	6c 97       	sbiw	r28, 0x1c	; 28
    1310:	68 96       	adiw	r28, 0x18	; 24
    1312:	0f ac       	ldd	r0, Y+63	; 0x3f
    1314:	68 97       	sbiw	r28, 0x18	; 24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__umoddi3+0x54c>
    1318:	ee 0c       	add	r14, r14
    131a:	ff 1c       	adc	r15, r15
    131c:	00 1f       	adc	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__umoddi3+0x544>
    1324:	e9 aa       	std	Y+49, r14	; 0x31
    1326:	fa aa       	std	Y+50, r15	; 0x32
    1328:	0b ab       	std	Y+51, r16	; 0x33
    132a:	1c ab       	std	Y+52, r17	; 0x34
    132c:	a2 1a       	sub	r10, r18
    132e:	b3 0a       	sbc	r11, r19
    1330:	c4 0a       	sbc	r12, r20
    1332:	d5 0a       	sbc	r13, r21
    1334:	32 01       	movw	r6, r4
    1336:	88 24       	eor	r8, r8
    1338:	99 24       	eor	r9, r9
    133a:	b2 01       	movw	r22, r4
    133c:	a1 01       	movw	r20, r2
    133e:	60 70       	andi	r22, 0x00	; 0
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	4c af       	std	Y+60, r20	; 0x3c
    1346:	5d af       	std	Y+61, r21	; 0x3d
    1348:	6e af       	std	Y+62, r22	; 0x3e
    134a:	7f af       	std	Y+63, r23	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
    134e:	c6 01       	movw	r24, r12
    1350:	b5 01       	movw	r22, r10
    1352:	a4 01       	movw	r20, r8
    1354:	93 01       	movw	r18, r6
    1356:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	a4 01       	movw	r20, r8
    1364:	93 01       	movw	r18, r6
    1366:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2c ad       	ldd	r18, Y+60	; 0x3c
    1372:	3d ad       	ldd	r19, Y+61	; 0x3d
    1374:	4e ad       	ldd	r20, Y+62	; 0x3e
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	29 97       	sbiw	r28, 0x09	; 9
    137a:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	87 01       	movw	r16, r14
    1384:	ff 24       	eor	r15, r15
    1386:	ee 24       	eor	r14, r14
    1388:	a9 a8       	ldd	r10, Y+49	; 0x31
    138a:	ba a8       	ldd	r11, Y+50	; 0x32
    138c:	cb a8       	ldd	r12, Y+51	; 0x33
    138e:	dc a8       	ldd	r13, Y+52	; 0x34
    1390:	c6 01       	movw	r24, r12
    1392:	aa 27       	eor	r26, r26
    1394:	bb 27       	eor	r27, r27
    1396:	57 01       	movw	r10, r14
    1398:	68 01       	movw	r12, r16
    139a:	a8 2a       	or	r10, r24
    139c:	b9 2a       	or	r11, r25
    139e:	ca 2a       	or	r12, r26
    13a0:	db 2a       	or	r13, r27
    13a2:	a2 16       	cp	r10, r18
    13a4:	b3 06       	cpc	r11, r19
    13a6:	c4 06       	cpc	r12, r20
    13a8:	d5 06       	cpc	r13, r21
    13aa:	90 f4       	brcc	.+36     	; 0x13d0 <__umoddi3+0x5fc>
    13ac:	a2 0c       	add	r10, r2
    13ae:	b3 1c       	adc	r11, r3
    13b0:	c4 1c       	adc	r12, r4
    13b2:	d5 1c       	adc	r13, r5
    13b4:	a2 14       	cp	r10, r2
    13b6:	b3 04       	cpc	r11, r3
    13b8:	c4 04       	cpc	r12, r4
    13ba:	d5 04       	cpc	r13, r5
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <__umoddi3+0x5fc>
    13be:	a2 16       	cp	r10, r18
    13c0:	b3 06       	cpc	r11, r19
    13c2:	c4 06       	cpc	r12, r20
    13c4:	d5 06       	cpc	r13, r21
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <__umoddi3+0x5fc>
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	a4 01       	movw	r20, r8
    13de:	93 01       	movw	r18, r6
    13e0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	a4 01       	movw	r20, r8
    13ee:	93 01       	movw	r18, r6
    13f0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	b9 01       	movw	r22, r18
    13f8:	29 96       	adiw	r28, 0x09	; 9
    13fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1400:	5f ad       	ldd	r21, Y+63	; 0x3f
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	87 01       	movw	r16, r14
    140e:	ff 24       	eor	r15, r15
    1410:	ee 24       	eor	r14, r14
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	9a a9       	ldd	r25, Y+50	; 0x32
    1416:	ab a9       	ldd	r26, Y+51	; 0x33
    1418:	bc a9       	ldd	r27, Y+52	; 0x34
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	e8 2a       	or	r14, r24
    1420:	f9 2a       	or	r15, r25
    1422:	0a 2b       	or	r16, r26
    1424:	1b 2b       	or	r17, r27
    1426:	e2 16       	cp	r14, r18
    1428:	f3 06       	cpc	r15, r19
    142a:	04 07       	cpc	r16, r20
    142c:	15 07       	cpc	r17, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x680>
    1430:	e2 0c       	add	r14, r2
    1432:	f3 1c       	adc	r15, r3
    1434:	04 1d       	adc	r16, r4
    1436:	15 1d       	adc	r17, r5
    1438:	e2 14       	cp	r14, r2
    143a:	f3 04       	cpc	r15, r3
    143c:	04 05       	cpc	r16, r4
    143e:	15 05       	cpc	r17, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x680>
    1442:	e2 16       	cp	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	04 07       	cpc	r16, r20
    1448:	15 07       	cpc	r17, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x680>
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 1a       	sub	r14, r18
    1456:	f3 0a       	sbc	r15, r19
    1458:	04 0b       	sbc	r16, r20
    145a:	15 0b       	sbc	r17, r21
    145c:	d8 01       	movw	r26, r16
    145e:	c7 01       	movw	r24, r14
    1460:	09 ac       	ldd	r0, Y+57	; 0x39
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__umoddi3+0x698>
    1464:	b6 95       	lsr	r27
    1466:	a7 95       	ror	r26
    1468:	97 95       	ror	r25
    146a:	87 95       	ror	r24
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__umoddi3+0x690>
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	ab 8b       	std	Y+19, r26	; 0x13
    1476:	bc 8b       	std	Y+20, r27	; 0x14
    1478:	1d 8a       	std	Y+21, r1	; 0x15
    147a:	1e 8a       	std	Y+22, r1	; 0x16
    147c:	1f 8a       	std	Y+23, r1	; 0x17
    147e:	18 8e       	std	Y+24, r1	; 0x18
    1480:	28 2f       	mov	r18, r24
    1482:	3a 89       	ldd	r19, Y+18	; 0x12
    1484:	4b 89       	ldd	r20, Y+19	; 0x13
    1486:	5c 89       	ldd	r21, Y+20	; 0x14
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	0c c3       	rjmp	.+1560   	; 0x1aa4 <__umoddi3+0xcd0>
    148c:	6a 14       	cp	r6, r10
    148e:	7b 04       	cpc	r7, r11
    1490:	8c 04       	cpc	r8, r12
    1492:	9d 04       	cpc	r9, r13
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__umoddi3+0x6c4>
    1496:	09 c3       	rjmp	.+1554   	; 0x1aaa <__umoddi3+0xcd6>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	a0 16       	cp	r10, r16
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	b0 06       	cpc	r11, r16
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	c0 06       	cpc	r12, r16
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	d0 06       	cpc	r13, r16
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <__umoddi3+0x6f8>
    14aa:	1f ef       	ldi	r17, 0xFF	; 255
    14ac:	a1 16       	cp	r10, r17
    14ae:	b1 04       	cpc	r11, r1
    14b0:	c1 04       	cpc	r12, r1
    14b2:	d1 04       	cpc	r13, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__umoddi3+0x6f0>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__umoddi3+0x6f0>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	e2 2e       	mov	r14, r18
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <__umoddi3+0x720>
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	87 01       	movw	r16, r14
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__umoddi3+0x720>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	a4 16       	cp	r10, r20
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b4 06       	cpc	r11, r20
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c4 06       	cpc	r12, r20
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	d4 06       	cpc	r13, r20
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__umoddi3+0x716>
    14de:	98 e1       	ldi	r25, 0x18	; 24
    14e0:	e9 2e       	mov	r14, r25
    14e2:	f1 2c       	mov	r15, r1
    14e4:	01 2d       	mov	r16, r1
    14e6:	11 2d       	mov	r17, r1
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <__umoddi3+0x720>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	e8 2e       	mov	r14, r24
    14ee:	f1 2c       	mov	r15, r1
    14f0:	01 2d       	mov	r16, r1
    14f2:	11 2d       	mov	r17, r1
    14f4:	d6 01       	movw	r26, r12
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 2c       	mov	r0, r14
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__umoddi3+0x730>
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__umoddi3+0x728>
    1508:	85 5a       	subi	r24, 0xA5	; 165
    150a:	9c 4f       	sbci	r25, 0xFC	; 252
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	8e 19       	sub	r24, r14
    151a:	9f 09       	sbc	r25, r15
    151c:	a0 0b       	sbc	r26, r16
    151e:	b1 0b       	sbc	r27, r17
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	a1 09       	sbc	r26, r1
    1526:	b1 09       	sbc	r27, r1
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <__umoddi3+0x75e>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <__umoddi3+0x7fc>
    1532:	a6 14       	cp	r10, r6
    1534:	b7 04       	cpc	r11, r7
    1536:	c8 04       	cpc	r12, r8
    1538:	d9 04       	cpc	r13, r9
    153a:	58 f0       	brcs	.+22     	; 0x1552 <__umoddi3+0x77e>
    153c:	6c 96       	adiw	r28, 0x1c	; 28
    153e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1540:	fd ac       	ldd	r15, Y+61	; 0x3d
    1542:	0e ad       	ldd	r16, Y+62	; 0x3e
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	6c 97       	sbiw	r28, 0x1c	; 28
    1548:	e2 14       	cp	r14, r2
    154a:	f3 04       	cpc	r15, r3
    154c:	04 05       	cpc	r16, r4
    154e:	15 05       	cpc	r17, r5
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__umoddi3+0x7d8>
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	e2 18       	sub	r14, r2
    1560:	f3 08       	sbc	r15, r3
    1562:	04 09       	sbc	r16, r4
    1564:	15 09       	sbc	r17, r5
    1566:	a4 01       	movw	r20, r8
    1568:	93 01       	movw	r18, r6
    156a:	2a 19       	sub	r18, r10
    156c:	3b 09       	sbc	r19, r11
    156e:	4c 09       	sbc	r20, r12
    1570:	5d 09       	sbc	r21, r13
    1572:	aa 24       	eor	r10, r10
    1574:	bb 24       	eor	r11, r11
    1576:	65 01       	movw	r12, r10
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	6e 15       	cp	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__umoddi3+0x7c4>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	ab 2e       	mov	r10, r27
    1592:	b1 2c       	mov	r11, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	da 01       	movw	r26, r20
    159a:	c9 01       	movw	r24, r18
    159c:	8a 19       	sub	r24, r10
    159e:	9b 09       	sbc	r25, r11
    15a0:	ac 09       	sbc	r26, r12
    15a2:	bd 09       	sbc	r27, r13
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
    15ac:	e9 8a       	std	Y+17, r14	; 0x11
    15ae:	fa 8a       	std	Y+18, r15	; 0x12
    15b0:	0b 8b       	std	Y+19, r16	; 0x13
    15b2:	1c 8b       	std	Y+20, r17	; 0x14
    15b4:	6d a8       	ldd	r6, Y+53	; 0x35
    15b6:	7e a8       	ldd	r7, Y+54	; 0x36
    15b8:	8f a8       	ldd	r8, Y+55	; 0x37
    15ba:	98 ac       	ldd	r9, Y+56	; 0x38
    15bc:	6d 8a       	std	Y+21, r6	; 0x15
    15be:	7e 8a       	std	Y+22, r7	; 0x16
    15c0:	8f 8a       	std	Y+23, r8	; 0x17
    15c2:	98 8e       	std	Y+24, r9	; 0x18
    15c4:	2e 2d       	mov	r18, r14
    15c6:	3a 89       	ldd	r19, Y+18	; 0x12
    15c8:	4b 89       	ldd	r20, Y+19	; 0x13
    15ca:	5c 89       	ldd	r21, Y+20	; 0x14
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	6a c2       	rjmp	.+1236   	; 0x1aa4 <__umoddi3+0xcd0>
    15d0:	67 96       	adiw	r28, 0x17	; 23
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	67 97       	sbiw	r28, 0x17	; 23
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	08 2e       	mov	r0, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__umoddi3+0x812>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__umoddi3+0x80a>
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	aa 2e       	mov	r10, r26
    15ee:	a8 1a       	sub	r10, r24
    15f0:	66 96       	adiw	r28, 0x16	; 22
    15f2:	af ae       	std	Y+63, r10	; 0x3f
    15f4:	66 97       	sbiw	r28, 0x16	; 22
    15f6:	d2 01       	movw	r26, r4
    15f8:	c1 01       	movw	r24, r2
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__umoddi3+0x830>
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	aa 94       	dec	r10
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <__umoddi3+0x828>
    1608:	6c 01       	movw	r12, r24
    160a:	7d 01       	movw	r14, r26
    160c:	c2 2a       	or	r12, r18
    160e:	d3 2a       	or	r13, r19
    1610:	e4 2a       	or	r14, r20
    1612:	f5 2a       	or	r15, r21
    1614:	c9 a6       	std	Y+41, r12	; 0x29
    1616:	da a6       	std	Y+42, r13	; 0x2a
    1618:	eb a6       	std	Y+43, r14	; 0x2b
    161a:	fc a6       	std	Y+44, r15	; 0x2c
    161c:	82 01       	movw	r16, r4
    161e:	71 01       	movw	r14, r2
    1620:	67 96       	adiw	r28, 0x17	; 23
    1622:	0f ac       	ldd	r0, Y+63	; 0x3f
    1624:	67 97       	sbiw	r28, 0x17	; 23
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x85c>
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	00 1f       	adc	r16, r16
    162e:	11 1f       	adc	r17, r17
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x854>
    1634:	ed a2       	std	Y+37, r14	; 0x25
    1636:	fe a2       	std	Y+38, r15	; 0x26
    1638:	0f a3       	std	Y+39, r16	; 0x27
    163a:	18 a7       	std	Y+40, r17	; 0x28
    163c:	64 01       	movw	r12, r8
    163e:	53 01       	movw	r10, r6
    1640:	66 96       	adiw	r28, 0x16	; 22
    1642:	0f ac       	ldd	r0, Y+63	; 0x3f
    1644:	66 97       	sbiw	r28, 0x16	; 22
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__umoddi3+0x87c>
    1648:	d6 94       	lsr	r13
    164a:	c7 94       	ror	r12
    164c:	b7 94       	ror	r11
    164e:	a7 94       	ror	r10
    1650:	0a 94       	dec	r0
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <__umoddi3+0x874>
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	67 96       	adiw	r28, 0x17	; 23
    165a:	0f ac       	ldd	r0, Y+63	; 0x3f
    165c:	67 97       	sbiw	r28, 0x17	; 23
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__umoddi3+0x894>
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__umoddi3+0x88c>
    166c:	6c 96       	adiw	r28, 0x1c	; 28
    166e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1670:	9d ad       	ldd	r25, Y+61	; 0x3d
    1672:	ae ad       	ldd	r26, Y+62	; 0x3e
    1674:	bf ad       	ldd	r27, Y+63	; 0x3f
    1676:	6c 97       	sbiw	r28, 0x1c	; 28
    1678:	66 96       	adiw	r28, 0x16	; 22
    167a:	0f ac       	ldd	r0, Y+63	; 0x3f
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__umoddi3+0x8b4>
    1680:	b6 95       	lsr	r27
    1682:	a7 95       	ror	r26
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	0a 94       	dec	r0
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__umoddi3+0x8ac>
    168c:	3c 01       	movw	r6, r24
    168e:	4d 01       	movw	r8, r26
    1690:	62 2a       	or	r6, r18
    1692:	73 2a       	or	r7, r19
    1694:	84 2a       	or	r8, r20
    1696:	95 2a       	or	r9, r21
    1698:	69 a2       	std	Y+33, r6	; 0x21
    169a:	7a a2       	std	Y+34, r7	; 0x22
    169c:	8b a2       	std	Y+35, r8	; 0x23
    169e:	9c a2       	std	Y+36, r9	; 0x24
    16a0:	6c 96       	adiw	r28, 0x1c	; 28
    16a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    16a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    16aa:	6c 97       	sbiw	r28, 0x1c	; 28
    16ac:	67 96       	adiw	r28, 0x17	; 23
    16ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b0:	67 97       	sbiw	r28, 0x17	; 23
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__umoddi3+0x8e8>
    16b4:	ee 0c       	add	r14, r14
    16b6:	ff 1c       	adc	r15, r15
    16b8:	00 1f       	adc	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__umoddi3+0x8e0>
    16c0:	ed 8e       	std	Y+29, r14	; 0x1d
    16c2:	fe 8e       	std	Y+30, r15	; 0x1e
    16c4:	0f 8f       	std	Y+31, r16	; 0x1f
    16c6:	18 a3       	std	Y+32, r17	; 0x20
    16c8:	49 a5       	ldd	r20, Y+41	; 0x29
    16ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    16cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    16d0:	3b 01       	movw	r6, r22
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	60 70       	andi	r22, 0x00	; 0
    16d8:	70 70       	andi	r23, 0x00	; 0
    16da:	2d 96       	adiw	r28, 0x0d	; 13
    16dc:	4c af       	std	Y+60, r20	; 0x3c
    16de:	5d af       	std	Y+61, r21	; 0x3d
    16e0:	6e af       	std	Y+62, r22	; 0x3e
    16e2:	7f af       	std	Y+63, r23	; 0x3f
    16e4:	2d 97       	sbiw	r28, 0x0d	; 13
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	c6 01       	movw	r24, r12
    16f8:	b5 01       	movw	r22, r10
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    1702:	c9 01       	movw	r24, r18
    1704:	da 01       	movw	r26, r20
    1706:	1c 01       	movw	r2, r24
    1708:	2d 01       	movw	r4, r26
    170a:	c2 01       	movw	r24, r4
    170c:	b1 01       	movw	r22, r2
    170e:	2d 96       	adiw	r28, 0x0d	; 13
    1710:	2c ad       	ldd	r18, Y+60	; 0x3c
    1712:	3d ad       	ldd	r19, Y+61	; 0x3d
    1714:	4e ad       	ldd	r20, Y+62	; 0x3e
    1716:	5f ad       	ldd	r21, Y+63	; 0x3f
    1718:	2d 97       	sbiw	r28, 0x0d	; 13
    171a:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	87 01       	movw	r16, r14
    1724:	ff 24       	eor	r15, r15
    1726:	ee 24       	eor	r14, r14
    1728:	a9 a0       	ldd	r10, Y+33	; 0x21
    172a:	ba a0       	ldd	r11, Y+34	; 0x22
    172c:	cb a0       	ldd	r12, Y+35	; 0x23
    172e:	dc a0       	ldd	r13, Y+36	; 0x24
    1730:	c6 01       	movw	r24, r12
    1732:	aa 27       	eor	r26, r26
    1734:	bb 27       	eor	r27, r27
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	a8 2a       	or	r10, r24
    173c:	b9 2a       	or	r11, r25
    173e:	ca 2a       	or	r12, r26
    1740:	db 2a       	or	r13, r27
    1742:	a2 16       	cp	r10, r18
    1744:	b3 06       	cpc	r11, r19
    1746:	c4 06       	cpc	r12, r20
    1748:	d5 06       	cpc	r13, r21
    174a:	00 f5       	brcc	.+64     	; 0x178c <__umoddi3+0x9b8>
    174c:	08 94       	sec
    174e:	21 08       	sbc	r2, r1
    1750:	31 08       	sbc	r3, r1
    1752:	41 08       	sbc	r4, r1
    1754:	51 08       	sbc	r5, r1
    1756:	e9 a4       	ldd	r14, Y+41	; 0x29
    1758:	fa a4       	ldd	r15, Y+42	; 0x2a
    175a:	0b a5       	ldd	r16, Y+43	; 0x2b
    175c:	1c a5       	ldd	r17, Y+44	; 0x2c
    175e:	ae 0c       	add	r10, r14
    1760:	bf 1c       	adc	r11, r15
    1762:	c0 1e       	adc	r12, r16
    1764:	d1 1e       	adc	r13, r17
    1766:	ae 14       	cp	r10, r14
    1768:	bf 04       	cpc	r11, r15
    176a:	c0 06       	cpc	r12, r16
    176c:	d1 06       	cpc	r13, r17
    176e:	70 f0       	brcs	.+28     	; 0x178c <__umoddi3+0x9b8>
    1770:	a2 16       	cp	r10, r18
    1772:	b3 06       	cpc	r11, r19
    1774:	c4 06       	cpc	r12, r20
    1776:	d5 06       	cpc	r13, r21
    1778:	48 f4       	brcc	.+18     	; 0x178c <__umoddi3+0x9b8>
    177a:	08 94       	sec
    177c:	21 08       	sbc	r2, r1
    177e:	31 08       	sbc	r3, r1
    1780:	41 08       	sbc	r4, r1
    1782:	51 08       	sbc	r5, r1
    1784:	ae 0c       	add	r10, r14
    1786:	bf 1c       	adc	r11, r15
    1788:	c0 1e       	adc	r12, r16
    178a:	d1 1e       	adc	r13, r17
    178c:	a2 1a       	sub	r10, r18
    178e:	b3 0a       	sbc	r11, r19
    1790:	c4 0a       	sbc	r12, r20
    1792:	d5 0a       	sbc	r13, r21
    1794:	c6 01       	movw	r24, r12
    1796:	b5 01       	movw	r22, r10
    1798:	a4 01       	movw	r20, r8
    179a:	93 01       	movw	r18, r6
    179c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	c6 01       	movw	r24, r12
    17a6:	b5 01       	movw	r22, r10
    17a8:	a4 01       	movw	r20, r8
    17aa:	93 01       	movw	r18, r6
    17ac:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    17b0:	c9 01       	movw	r24, r18
    17b2:	da 01       	movw	r26, r20
    17b4:	3c 01       	movw	r6, r24
    17b6:	4d 01       	movw	r8, r26
    17b8:	c4 01       	movw	r24, r8
    17ba:	b3 01       	movw	r22, r6
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	2c ad       	ldd	r18, Y+60	; 0x3c
    17c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	87 01       	movw	r16, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	ee 24       	eor	r14, r14
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	ab a1       	ldd	r26, Y+35	; 0x23
    17dc:	bc a1       	ldd	r27, Y+36	; 0x24
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	57 01       	movw	r10, r14
    17e4:	68 01       	movw	r12, r16
    17e6:	a8 2a       	or	r10, r24
    17e8:	b9 2a       	or	r11, r25
    17ea:	ca 2a       	or	r12, r26
    17ec:	db 2a       	or	r13, r27
    17ee:	a2 16       	cp	r10, r18
    17f0:	b3 06       	cpc	r11, r19
    17f2:	c4 06       	cpc	r12, r20
    17f4:	d5 06       	cpc	r13, r21
    17f6:	00 f5       	brcc	.+64     	; 0x1838 <__umoddi3+0xa64>
    17f8:	08 94       	sec
    17fa:	61 08       	sbc	r6, r1
    17fc:	71 08       	sbc	r7, r1
    17fe:	81 08       	sbc	r8, r1
    1800:	91 08       	sbc	r9, r1
    1802:	69 a5       	ldd	r22, Y+41	; 0x29
    1804:	7a a5       	ldd	r23, Y+42	; 0x2a
    1806:	8b a5       	ldd	r24, Y+43	; 0x2b
    1808:	9c a5       	ldd	r25, Y+44	; 0x2c
    180a:	a6 0e       	add	r10, r22
    180c:	b7 1e       	adc	r11, r23
    180e:	c8 1e       	adc	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	a6 16       	cp	r10, r22
    1814:	b7 06       	cpc	r11, r23
    1816:	c8 06       	cpc	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	70 f0       	brcs	.+28     	; 0x1838 <__umoddi3+0xa64>
    181c:	a2 16       	cp	r10, r18
    181e:	b3 06       	cpc	r11, r19
    1820:	c4 06       	cpc	r12, r20
    1822:	d5 06       	cpc	r13, r21
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__umoddi3+0xa64>
    1826:	08 94       	sec
    1828:	61 08       	sbc	r6, r1
    182a:	71 08       	sbc	r7, r1
    182c:	81 08       	sbc	r8, r1
    182e:	91 08       	sbc	r9, r1
    1830:	a6 0e       	add	r10, r22
    1832:	b7 1e       	adc	r11, r23
    1834:	c8 1e       	adc	r12, r24
    1836:	d9 1e       	adc	r13, r25
    1838:	d6 01       	movw	r26, r12
    183a:	c5 01       	movw	r24, r10
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	a4 0b       	sbc	r26, r20
    1842:	b5 0b       	sbc	r27, r21
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
    184c:	d1 01       	movw	r26, r2
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	84 01       	movw	r16, r8
    1854:	73 01       	movw	r14, r6
    1856:	e8 2a       	or	r14, r24
    1858:	f9 2a       	or	r15, r25
    185a:	0a 2b       	or	r16, r26
    185c:	1b 2b       	or	r17, r27
    185e:	4f ef       	ldi	r20, 0xFF	; 255
    1860:	a4 2e       	mov	r10, r20
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	b4 2e       	mov	r11, r20
    1866:	c1 2c       	mov	r12, r1
    1868:	d1 2c       	mov	r13, r1
    186a:	ae 20       	and	r10, r14
    186c:	bf 20       	and	r11, r15
    186e:	c0 22       	and	r12, r16
    1870:	d1 22       	and	r13, r17
    1872:	78 01       	movw	r14, r16
    1874:	00 27       	eor	r16, r16
    1876:	11 27       	eor	r17, r17
    1878:	6d a0       	ldd	r6, Y+37	; 0x25
    187a:	7e a0       	ldd	r7, Y+38	; 0x26
    187c:	8f a0       	ldd	r8, Y+39	; 0x27
    187e:	98 a4       	ldd	r9, Y+40	; 0x28
    1880:	4f ef       	ldi	r20, 0xFF	; 255
    1882:	5f ef       	ldi	r21, 0xFF	; 255
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	64 22       	and	r6, r20
    188a:	75 22       	and	r7, r21
    188c:	86 22       	and	r8, r22
    188e:	97 22       	and	r9, r23
    1890:	8d a1       	ldd	r24, Y+37	; 0x25
    1892:	9e a1       	ldd	r25, Y+38	; 0x26
    1894:	af a1       	ldd	r26, Y+39	; 0x27
    1896:	b8 a5       	ldd	r27, Y+40	; 0x28
    1898:	bd 01       	movw	r22, r26
    189a:	88 27       	eor	r24, r24
    189c:	99 27       	eor	r25, r25
    189e:	65 96       	adiw	r28, 0x15	; 21
    18a0:	6c af       	std	Y+60, r22	; 0x3c
    18a2:	7d af       	std	Y+61, r23	; 0x3d
    18a4:	8e af       	std	Y+62, r24	; 0x3e
    18a6:	9f af       	std	Y+63, r25	; 0x3f
    18a8:	65 97       	sbiw	r28, 0x15	; 21
    18aa:	c6 01       	movw	r24, r12
    18ac:	b5 01       	movw	r22, r10
    18ae:	a4 01       	movw	r20, r8
    18b0:	93 01       	movw	r18, r6
    18b2:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    18b6:	61 96       	adiw	r28, 0x11	; 17
    18b8:	6c af       	std	Y+60, r22	; 0x3c
    18ba:	7d af       	std	Y+61, r23	; 0x3d
    18bc:	8e af       	std	Y+62, r24	; 0x3e
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	c6 01       	movw	r24, r12
    18c4:	b5 01       	movw	r22, r10
    18c6:	65 96       	adiw	r28, 0x15	; 21
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	65 97       	sbiw	r28, 0x15	; 21
    18d2:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    18d6:	1b 01       	movw	r2, r22
    18d8:	2c 01       	movw	r4, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    18e6:	5b 01       	movw	r10, r22
    18e8:	6c 01       	movw	r12, r24
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	65 96       	adiw	r28, 0x15	; 21
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	65 97       	sbiw	r28, 0x15	; 21
    18fa:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
    1902:	a6 01       	movw	r20, r12
    1904:	95 01       	movw	r18, r10
    1906:	22 0d       	add	r18, r2
    1908:	33 1d       	adc	r19, r3
    190a:	44 1d       	adc	r20, r4
    190c:	55 1d       	adc	r21, r5
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ac       	ldd	r6, Y+60	; 0x3c
    1912:	7d ac       	ldd	r7, Y+61	; 0x3d
    1914:	8e ac       	ldd	r8, Y+62	; 0x3e
    1916:	9f ac       	ldd	r9, Y+63	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	c4 01       	movw	r24, r8
    191c:	aa 27       	eor	r26, r26
    191e:	bb 27       	eor	r27, r27
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	4a 1f       	adc	r20, r26
    1926:	5b 1f       	adc	r21, r27
    1928:	2a 15       	cp	r18, r10
    192a:	3b 05       	cpc	r19, r11
    192c:	4c 05       	cpc	r20, r12
    192e:	5d 05       	cpc	r21, r13
    1930:	48 f4       	brcc	.+18     	; 0x1944 <__umoddi3+0xb70>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	e1 e0       	ldi	r30, 0x01	; 1
    1938:	ae 2e       	mov	r10, r30
    193a:	b1 2c       	mov	r11, r1
    193c:	e8 0c       	add	r14, r8
    193e:	f9 1c       	adc	r15, r9
    1940:	0a 1d       	adc	r16, r10
    1942:	1b 1d       	adc	r17, r11
    1944:	ca 01       	movw	r24, r20
    1946:	aa 27       	eor	r26, r26
    1948:	bb 27       	eor	r27, r27
    194a:	57 01       	movw	r10, r14
    194c:	68 01       	movw	r12, r16
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	a9 01       	movw	r20, r18
    1958:	33 27       	eor	r19, r19
    195a:	22 27       	eor	r18, r18
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1960:	9d ad       	ldd	r25, Y+61	; 0x3d
    1962:	ae ad       	ldd	r26, Y+62	; 0x3e
    1964:	bf ad       	ldd	r27, Y+63	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	4a 1f       	adc	r20, r26
    1972:	5b 1f       	adc	r21, r27
    1974:	e9 8c       	ldd	r14, Y+25	; 0x19
    1976:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1978:	0b 8d       	ldd	r16, Y+27	; 0x1b
    197a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	70 f0       	brcs	.+28     	; 0x19a2 <__umoddi3+0xbce>
    1986:	ae 14       	cp	r10, r14
    1988:	bf 04       	cpc	r11, r15
    198a:	c0 06       	cpc	r12, r16
    198c:	d1 06       	cpc	r13, r17
    198e:	69 f5       	brne	.+90     	; 0x19ea <__umoddi3+0xc16>
    1990:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1992:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f5       	brcc	.+72     	; 0x19ea <__umoddi3+0xc16>
    19a2:	da 01       	movw	r26, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	6d a0       	ldd	r6, Y+37	; 0x25
    19a8:	7e a0       	ldd	r7, Y+38	; 0x26
    19aa:	8f a0       	ldd	r8, Y+39	; 0x27
    19ac:	98 a4       	ldd	r9, Y+40	; 0x28
    19ae:	86 19       	sub	r24, r6
    19b0:	97 09       	sbc	r25, r7
    19b2:	a8 09       	sbc	r26, r8
    19b4:	b9 09       	sbc	r27, r9
    19b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    19b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    19ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    19bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    19be:	ae 18       	sub	r10, r14
    19c0:	bf 08       	sbc	r11, r15
    19c2:	c0 0a       	sbc	r12, r16
    19c4:	d1 0a       	sbc	r13, r17
    19c6:	ee 24       	eor	r14, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	87 01       	movw	r16, r14
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	4a 07       	cpc	r20, r26
    19d2:	5b 07       	cpc	r21, r27
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <__umoddi3+0xc0c>
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	e2 2e       	mov	r14, r18
    19da:	f1 2c       	mov	r15, r1
    19dc:	01 2d       	mov	r16, r1
    19de:	11 2d       	mov	r17, r1
    19e0:	ae 18       	sub	r10, r14
    19e2:	bf 08       	sbc	r11, r15
    19e4:	c0 0a       	sbc	r12, r16
    19e6:	d1 0a       	sbc	r13, r17
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__umoddi3+0xc1a>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	6d 8c       	ldd	r6, Y+29	; 0x1d
    19f0:	7e 8c       	ldd	r7, Y+30	; 0x1e
    19f2:	8f 8c       	ldd	r8, Y+31	; 0x1f
    19f4:	98 a0       	ldd	r9, Y+32	; 0x20
    19f6:	68 1a       	sub	r6, r24
    19f8:	79 0a       	sbc	r7, r25
    19fa:	8a 0a       	sbc	r8, r26
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	49 8d       	ldd	r20, Y+25	; 0x19
    1a00:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a06:	4a 19       	sub	r20, r10
    1a08:	5b 09       	sbc	r21, r11
    1a0a:	6c 09       	sbc	r22, r12
    1a0c:	7d 09       	sbc	r23, r13
    1a0e:	5a 01       	movw	r10, r20
    1a10:	6b 01       	movw	r12, r22
    1a12:	22 24       	eor	r2, r2
    1a14:	33 24       	eor	r3, r3
    1a16:	21 01       	movw	r4, r2
    1a18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a20:	66 15       	cp	r22, r6
    1a22:	77 05       	cpc	r23, r7
    1a24:	88 05       	cpc	r24, r8
    1a26:	99 05       	cpc	r25, r9
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__umoddi3+0xc60>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	28 2e       	mov	r2, r24
    1a2e:	31 2c       	mov	r3, r1
    1a30:	41 2c       	mov	r4, r1
    1a32:	51 2c       	mov	r5, r1
    1a34:	86 01       	movw	r16, r12
    1a36:	75 01       	movw	r14, r10
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	66 96       	adiw	r28, 0x16	; 22
    1a46:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a48:	66 97       	sbiw	r28, 0x16	; 22
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__umoddi3+0xc80>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	0a 94       	dec	r0
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__umoddi3+0xc78>
    1a58:	d4 01       	movw	r26, r8
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	67 96       	adiw	r28, 0x17	; 23
    1a5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a60:	67 97       	sbiw	r28, 0x17	; 23
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__umoddi3+0xc98>
    1a64:	b6 95       	lsr	r27
    1a66:	a7 95       	ror	r26
    1a68:	97 95       	ror	r25
    1a6a:	87 95       	ror	r24
    1a6c:	0a 94       	dec	r0
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__umoddi3+0xc90>
    1a70:	28 2b       	or	r18, r24
    1a72:	39 2b       	or	r19, r25
    1a74:	4a 2b       	or	r20, r26
    1a76:	5b 2b       	or	r21, r27
    1a78:	29 8b       	std	Y+17, r18	; 0x11
    1a7a:	3a 8b       	std	Y+18, r19	; 0x12
    1a7c:	4b 8b       	std	Y+19, r20	; 0x13
    1a7e:	5c 8b       	std	Y+20, r21	; 0x14
    1a80:	67 96       	adiw	r28, 0x17	; 23
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	67 97       	sbiw	r28, 0x17	; 23
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__umoddi3+0xcbc>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__umoddi3+0xcb4>
    1a94:	ed 8a       	std	Y+21, r14	; 0x15
    1a96:	fe 8a       	std	Y+22, r15	; 0x16
    1a98:	0f 8b       	std	Y+23, r16	; 0x17
    1a9a:	18 8f       	std	Y+24, r17	; 0x18
    1a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa2:	6e 2d       	mov	r22, r14
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	c5 5a       	subi	r28, 0xA5	; 165
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	e2 e1       	ldi	r30, 0x12	; 18
    1ab0:	0c 94 b7 3a 	jmp	0x756e	; 0x756e <__epilogue_restores__>

00001ab4 <_fpadd_parts>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <__prologue_saves__>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	9c 91       	ld	r25, X
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <_fpadd_parts+0x1a>
    1acc:	39 c1       	rjmp	.+626    	; 0x1d40 <_fpadd_parts+0x28c>
    1ace:	eb 01       	movw	r28, r22
    1ad0:	88 81       	ld	r24, Y
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <_fpadd_parts+0x24>
    1ad6:	33 c1       	rjmp	.+614    	; 0x1d3e <_fpadd_parts+0x28a>
    1ad8:	94 30       	cpi	r25, 0x04	; 4
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <_fpadd_parts+0x42>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x2e>
    1ae0:	2f c1       	rjmp	.+606    	; 0x1d40 <_fpadd_parts+0x28c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_fpadd_parts+0x3c>
    1aee:	28 c1       	rjmp	.+592    	; 0x1d40 <_fpadd_parts+0x28c>
    1af0:	a3 e5       	ldi	r26, 0x53	; 83
    1af2:	b3 e0       	ldi	r27, 0x03	; 3
    1af4:	25 c1       	rjmp	.+586    	; 0x1d40 <_fpadd_parts+0x28c>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_fpadd_parts+0x48>
    1afa:	21 c1       	rjmp	.+578    	; 0x1d3e <_fpadd_parts+0x28a>
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <_fpadd_parts+0x76>
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_fpadd_parts+0x52>
    1b04:	1d c1       	rjmp	.+570    	; 0x1d40 <_fpadd_parts+0x28c>
    1b06:	9a 01       	movw	r18, r20
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	09 90       	ld	r0, Y+
    1b10:	ae 01       	movw	r20, r28
    1b12:	e9 01       	movw	r28, r18
    1b14:	09 92       	st	Y+, r0
    1b16:	9e 01       	movw	r18, r28
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	c1 f7       	brne	.-16     	; 0x1b0c <_fpadd_parts+0x58>
    1b1c:	e2 01       	movw	r28, r4
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 91       	ld	r25, X
    1b24:	89 23       	and	r24, r25
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	08 c1       	rjmp	.+528    	; 0x1d3a <_fpadd_parts+0x286>
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x7c>
    1b2e:	07 c1       	rjmp	.+526    	; 0x1d3e <_fpadd_parts+0x28a>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	2d 90       	ld	r2, X+
    1b34:	3c 90       	ld	r3, X
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	eb 01       	movw	r28, r22
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	ad 90       	ld	r10, X+
    1b42:	bd 90       	ld	r11, X+
    1b44:	cd 90       	ld	r12, X+
    1b46:	dc 90       	ld	r13, X
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1b50:	1f 81       	ldd	r17, Y+7	; 0x07
    1b52:	91 01       	movw	r18, r2
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	b9 01       	movw	r22, r18
    1b5a:	37 ff       	sbrs	r19, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0xb2>
    1b5e:	66 27       	eor	r22, r22
    1b60:	77 27       	eor	r23, r23
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	60 32       	cpi	r22, 0x20	; 32
    1b68:	71 05       	cpc	r23, r1
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <_fpadd_parts+0xba>
    1b6c:	61 c0       	rjmp	.+194    	; 0x1c30 <_fpadd_parts+0x17c>
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	6c f5       	brge	.+90     	; 0x1bce <_fpadd_parts+0x11a>
    1b74:	37 01       	movw	r6, r14
    1b76:	48 01       	movw	r8, r16
    1b78:	06 2e       	mov	r0, r22
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <_fpadd_parts+0xd0>
    1b7c:	96 94       	lsr	r9
    1b7e:	87 94       	ror	r8
    1b80:	77 94       	ror	r7
    1b82:	67 94       	ror	r6
    1b84:	0a 94       	dec	r0
    1b86:	d2 f7       	brpl	.-12     	; 0x1b7c <_fpadd_parts+0xc8>
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xe6>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <_fpadd_parts+0xde>
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	30 40       	sbci	r19, 0x00	; 0
    1ba2:	40 40       	sbci	r20, 0x00	; 0
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	2e 21       	and	r18, r14
    1ba8:	3f 21       	and	r19, r15
    1baa:	40 23       	and	r20, r16
    1bac:	51 23       	and	r21, r17
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	41 05       	cpc	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <_fpadd_parts+0x10c>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	79 01       	movw	r14, r18
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	e6 28       	or	r14, r6
    1bc6:	f7 28       	or	r15, r7
    1bc8:	08 29       	or	r16, r8
    1bca:	19 29       	or	r17, r9
    1bcc:	3c c0       	rjmp	.+120    	; 0x1c46 <_fpadd_parts+0x192>
    1bce:	23 2b       	or	r18, r19
    1bd0:	d1 f1       	breq	.+116    	; 0x1c46 <_fpadd_parts+0x192>
    1bd2:	26 0e       	add	r2, r22
    1bd4:	37 1e       	adc	r3, r23
    1bd6:	35 01       	movw	r6, r10
    1bd8:	46 01       	movw	r8, r12
    1bda:	06 2e       	mov	r0, r22
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <_fpadd_parts+0x132>
    1bde:	96 94       	lsr	r9
    1be0:	87 94       	ror	r8
    1be2:	77 94       	ror	r7
    1be4:	67 94       	ror	r6
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <_fpadd_parts+0x12a>
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <_fpadd_parts+0x148>
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	6a 95       	dec	r22
    1bfe:	d2 f7       	brpl	.-12     	; 0x1bf4 <_fpadd_parts+0x140>
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	30 40       	sbci	r19, 0x00	; 0
    1c04:	40 40       	sbci	r20, 0x00	; 0
    1c06:	50 40       	sbci	r21, 0x00	; 0
    1c08:	2a 21       	and	r18, r10
    1c0a:	3b 21       	and	r19, r11
    1c0c:	4c 21       	and	r20, r12
    1c0e:	5d 21       	and	r21, r13
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	41 05       	cpc	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <_fpadd_parts+0x16e>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	59 01       	movw	r10, r18
    1c24:	6a 01       	movw	r12, r20
    1c26:	a6 28       	or	r10, r6
    1c28:	b7 28       	or	r11, r7
    1c2a:	c8 28       	or	r12, r8
    1c2c:	d9 28       	or	r13, r9
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_fpadd_parts+0x192>
    1c30:	82 15       	cp	r24, r2
    1c32:	93 05       	cpc	r25, r3
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <_fpadd_parts+0x18c>
    1c36:	1c 01       	movw	r2, r24
    1c38:	aa 24       	eor	r10, r10
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	65 01       	movw	r12, r10
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <_fpadd_parts+0x192>
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 91       	ld	r25, X
    1c4a:	d2 01       	movw	r26, r4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_fpadd_parts+0x1a2>
    1c54:	45 c0       	rjmp	.+138    	; 0x1ce0 <_fpadd_parts+0x22c>
    1c56:	99 23       	and	r25, r25
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <_fpadd_parts+0x1b4>
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	97 01       	movw	r18, r14
    1c5e:	2a 19       	sub	r18, r10
    1c60:	3b 09       	sbc	r19, r11
    1c62:	4c 09       	sbc	r20, r12
    1c64:	5d 09       	sbc	r21, r13
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <_fpadd_parts+0x1c0>
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	2e 19       	sub	r18, r14
    1c6e:	3f 09       	sbc	r19, r15
    1c70:	40 0b       	sbc	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <_fpadd_parts+0x1d4>
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	33 82       	std	Z+3, r3	; 0x03
    1c7c:	22 82       	std	Z+2, r2	; 0x02
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	35 83       	std	Z+5, r19	; 0x05
    1c82:	46 83       	std	Z+6, r20	; 0x06
    1c84:	57 83       	std	Z+7, r21	; 0x07
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_fpadd_parts+0x20e>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	81 83       	std	Z+1, r24	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	88 27       	eor	r24, r24
    1c92:	99 27       	eor	r25, r25
    1c94:	dc 01       	movw	r26, r24
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	a4 0b       	sbc	r26, r20
    1c9c:	b5 0b       	sbc	r27, r21
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05
    1ca2:	a6 83       	std	Z+6, r26	; 0x06
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_fpadd_parts+0x20e>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	46 83       	std	Z+6, r20	; 0x06
    1cb6:	57 83       	std	Z+7, r21	; 0x07
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	da 01       	movw	r26, r20
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b1 09       	sbc	r27, r1
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 43       	sbci	r27, 0x3F	; 63
    1cdc:	28 f3       	brcs	.-54     	; 0x1ca8 <_fpadd_parts+0x1f4>
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <_fpadd_parts+0x242>
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	33 82       	std	Z+3, r3	; 0x03
    1ce4:	22 82       	std	Z+2, r2	; 0x02
    1ce6:	ea 0c       	add	r14, r10
    1ce8:	fb 1c       	adc	r15, r11
    1cea:	0c 1d       	adc	r16, r12
    1cec:	1d 1d       	adc	r17, r13
    1cee:	e4 82       	std	Z+4, r14	; 0x04
    1cf0:	f5 82       	std	Z+5, r15	; 0x05
    1cf2:	06 83       	std	Z+6, r16	; 0x06
    1cf4:	17 83       	std	Z+7, r17	; 0x07
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 83       	st	Z, r24
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	57 ff       	sbrs	r21, 7
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <_fpadd_parts+0x286>
    1d06:	c9 01       	movw	r24, r18
    1d08:	aa 27       	eor	r26, r26
    1d0a:	97 fd       	sbrc	r25, 7
    1d0c:	a0 95       	com	r26
    1d0e:	ba 2f       	mov	r27, r26
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	a0 70       	andi	r26, 0x00	; 0
    1d16:	b0 70       	andi	r27, 0x00	; 0
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	84 83       	std	Z+4, r24	; 0x04
    1d2a:	95 83       	std	Z+5, r25	; 0x05
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	b7 83       	std	Z+7, r27	; 0x07
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	df 01       	movw	r26, r30
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <_fpadd_parts+0x28c>
    1d3e:	d2 01       	movw	r26, r4
    1d40:	cd 01       	movw	r24, r26
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e2 e1       	ldi	r30, 0x12	; 18
    1d48:	0c 94 b7 3a 	jmp	0x756e	; 0x756e <__epilogue_restores__>

00001d4c <__subsf3>:
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 a7 3a 	jmp	0x754e	; 0x754e <__prologue_saves__+0x18>
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	7a 83       	std	Y+2, r23	; 0x02
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	4f 83       	std	Y+7, r20	; 0x07
    1d66:	58 87       	std	Y+8, r21	; 0x08
    1d68:	e9 e0       	ldi	r30, 0x09	; 9
    1d6a:	ee 2e       	mov	r14, r30
    1d6c:	f1 2c       	mov	r15, r1
    1d6e:	ec 0e       	add	r14, r28
    1d70:	fd 1e       	adc	r15, r29
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	0f 5e       	subi	r16, 0xEF	; 239
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	ce 01       	movw	r24, r28
    1d84:	05 96       	adiw	r24, 0x05	; 5
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	89 27       	eor	r24, r25
    1d92:	8a 8b       	std	Y+18, r24	; 0x12
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	ae 01       	movw	r20, r28
    1d9a:	47 5e       	subi	r20, 0xE7	; 231
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1da2:	0e 94 56 12 	call	0x24ac	; 0x24ac <__pack_f>
    1da6:	a0 96       	adiw	r28, 0x20	; 32
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <__epilogue_restores__+0x18>

00001dae <__addsf3>:
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 a7 3a 	jmp	0x754e	; 0x754e <__prologue_saves__+0x18>
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	7a 83       	std	Y+2, r23	; 0x02
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	2d 83       	std	Y+5, r18	; 0x05
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	f9 e0       	ldi	r31, 0x09	; 9
    1dcc:	ef 2e       	mov	r14, r31
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	ec 0e       	add	r14, r28
    1dd2:	fd 1e       	adc	r15, r29
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	b7 01       	movw	r22, r14
    1dda:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    1dde:	8e 01       	movw	r16, r28
    1de0:	0f 5e       	subi	r16, 0xEF	; 239
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	ce 01       	movw	r24, r28
    1de6:	05 96       	adiw	r24, 0x05	; 5
    1de8:	b8 01       	movw	r22, r16
    1dea:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5e       	subi	r20, 0xE7	; 231
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1dfc:	0e 94 56 12 	call	0x24ac	; 0x24ac <__pack_f>
    1e00:	a0 96       	adiw	r28, 0x20	; 32
    1e02:	e6 e0       	ldi	r30, 0x06	; 6
    1e04:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <__epilogue_restores__+0x18>

00001e08 <__mulsf3>:
    1e08:	a0 e2       	ldi	r26, 0x20	; 32
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <__prologue_saves__>
    1e14:	69 83       	std	Y+1, r22	; 0x01
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	4f 83       	std	Y+7, r20	; 0x07
    1e22:	58 87       	std	Y+8, r21	; 0x08
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	be 01       	movw	r22, r28
    1e2a:	67 5f       	subi	r22, 0xF7	; 247
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5e       	subi	r22, 0xEF	; 239
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    1e40:	99 85       	ldd	r25, Y+9	; 0x09
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	88 f0       	brcs	.+34     	; 0x1e68 <__mulsf3+0x60>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	c8 f0       	brcs	.+50     	; 0x1e7e <__mulsf3+0x76>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <__mulsf3+0x4e>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <__mulsf3+0x60>
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__mulsf3+0x56>
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <__mulsf3+0x5c>
    1e5a:	92 30       	cpi	r25, 0x02	; 2
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <__mulsf3+0x76>
    1e5e:	83 e5       	ldi	r24, 0x53	; 83
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	c6 c0       	rjmp	.+396    	; 0x1ff0 <__mulsf3+0x1e8>
    1e64:	92 30       	cpi	r25, 0x02	; 2
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <__mulsf3+0x72>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6e:	98 13       	cpse	r25, r24
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	ce 01       	movw	r24, r28
    1e76:	09 96       	adiw	r24, 0x09	; 9
    1e78:	bb c0       	rjmp	.+374    	; 0x1ff0 <__mulsf3+0x1e8>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__mulsf3+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	8a 89       	ldd	r24, Y+18	; 0x12
    1e84:	98 13       	cpse	r25, r24
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	2a 8b       	std	Y+18, r18	; 0x12
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <__mulsf3+0x1e8>
    1e90:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e92:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e94:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e96:	58 88       	ldd	r5, Y+16	; 0x10
    1e98:	6d 88       	ldd	r6, Y+21	; 0x15
    1e9a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e9c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e9e:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	c1 01       	movw	r24, r2
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <__mulsf3+0xf4>
    1ec2:	e6 0c       	add	r14, r6
    1ec4:	f7 1c       	adc	r15, r7
    1ec6:	08 1d       	adc	r16, r8
    1ec8:	19 1d       	adc	r17, r9
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	2a 0d       	add	r18, r10
    1ed0:	3b 1d       	adc	r19, r11
    1ed2:	4c 1d       	adc	r20, r12
    1ed4:	5d 1d       	adc	r21, r13
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 14       	cp	r14, r6
    1ee0:	f7 04       	cpc	r15, r7
    1ee2:	08 05       	cpc	r16, r8
    1ee4:	19 05       	cpc	r17, r9
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <__mulsf3+0xe8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 0f       	add	r20, r24
    1ef6:	59 1f       	adc	r21, r25
    1ef8:	6a 1f       	adc	r22, r26
    1efa:	7b 1f       	adc	r23, r27
    1efc:	aa 0c       	add	r10, r10
    1efe:	bb 1c       	adc	r11, r11
    1f00:	cc 1c       	adc	r12, r12
    1f02:	dd 1c       	adc	r13, r13
    1f04:	97 fe       	sbrs	r9, 7
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__mulsf3+0x110>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a8 2a       	or	r10, r24
    1f12:	b9 2a       	or	r11, r25
    1f14:	ca 2a       	or	r12, r26
    1f16:	db 2a       	or	r13, r27
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	e0 32       	cpi	r30, 0x20	; 32
    1f1c:	f1 05       	cpc	r31, r1
    1f1e:	49 f0       	breq	.+18     	; 0x1f32 <__mulsf3+0x12a>
    1f20:	66 0c       	add	r6, r6
    1f22:	77 1c       	adc	r7, r7
    1f24:	88 1c       	adc	r8, r8
    1f26:	99 1c       	adc	r9, r9
    1f28:	56 94       	lsr	r5
    1f2a:	47 94       	ror	r4
    1f2c:	37 94       	ror	r3
    1f2e:	27 94       	ror	r2
    1f30:	c3 cf       	rjmp	.-122    	; 0x1eb8 <__mulsf3+0xb0>
    1f32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f34:	ea 89       	ldd	r30, Y+18	; 0x12
    1f36:	2b 89       	ldd	r18, Y+19	; 0x13
    1f38:	3c 89       	ldd	r19, Y+20	; 0x14
    1f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	17 c0       	rjmp	.+46     	; 0x1f76 <__mulsf3+0x16e>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	89 2b       	or	r24, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__mulsf3+0x162>
    1f52:	16 95       	lsr	r17
    1f54:	07 95       	ror	r16
    1f56:	f7 94       	ror	r15
    1f58:	e7 94       	ror	r14
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	e8 2a       	or	r14, r24
    1f64:	f9 2a       	or	r15, r25
    1f66:	0a 2b       	or	r16, r26
    1f68:	1b 2b       	or	r17, r27
    1f6a:	76 95       	lsr	r23
    1f6c:	67 95       	ror	r22
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <__mulsf3+0x140>
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <__mulsf3+0x18c>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	17 fd       	sbrc	r17, 7
    1f86:	41 60       	ori	r20, 0x01	; 1
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	00 1f       	adc	r16, r16
    1f8e:	11 1f       	adc	r17, r17
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 30       	cpi	r20, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	59 07       	cpc	r21, r25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	69 07       	cpc	r22, r25
    1f9e:	90 e4       	ldi	r25, 0x40	; 64
    1fa0:	79 07       	cpc	r23, r25
    1fa2:	60 f3       	brcs	.-40     	; 0x1f7c <__mulsf3+0x174>
    1fa4:	2b 8f       	std	Y+27, r18	; 0x1b
    1fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    1fa8:	db 01       	movw	r26, r22
    1faa:	ca 01       	movw	r24, r20
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	a0 70       	andi	r26, 0x00	; 0
    1fb2:	b0 70       	andi	r27, 0x00	; 0
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <__mulsf3+0x1ce>
    1fbe:	47 fd       	sbrc	r20, 7
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__mulsf3+0x1ce>
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	01 05       	cpc	r16, r1
    1fc8:	11 05       	cpc	r17, r1
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <__mulsf3+0x1ce>
    1fcc:	40 5c       	subi	r20, 0xC0	; 192
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	40 78       	andi	r20, 0x80	; 128
    1fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1fd8:	fe 17       	cp	r31, r30
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <__mulsf3+0x1d8>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe2:	5e 8f       	std	Y+30, r21	; 0x1e
    1fe4:	6f 8f       	std	Y+31, r22	; 0x1f
    1fe6:	78 a3       	std	Y+32, r23	; 0x20
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	ce 01       	movw	r24, r28
    1fee:	49 96       	adiw	r24, 0x19	; 25
    1ff0:	0e 94 56 12 	call	0x24ac	; 0x24ac <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e2 e1       	ldi	r30, 0x12	; 18
    1ff8:	0c 94 b7 3a 	jmp	0x756e	; 0x756e <__epilogue_restores__>

00001ffc <__divsf3>:
    1ffc:	a8 e1       	ldi	r26, 0x18	; 24
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <__prologue_saves__+0x10>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	b9 e0       	ldi	r27, 0x09	; 9
    201a:	eb 2e       	mov	r14, r27
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    203c:	29 85       	ldd	r18, Y+9	; 0x09
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__divsf3+0x48>
    2042:	7e c0       	rjmp	.+252    	; 0x2140 <__divsf3+0x144>
    2044:	39 89       	ldd	r19, Y+17	; 0x11
    2046:	32 30       	cpi	r19, 0x02	; 2
    2048:	10 f4       	brcc	.+4      	; 0x204e <__divsf3+0x52>
    204a:	b8 01       	movw	r22, r16
    204c:	7c c0       	rjmp	.+248    	; 0x2146 <__divsf3+0x14a>
    204e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	89 27       	eor	r24, r25
    2054:	8a 87       	std	Y+10, r24	; 0x0a
    2056:	24 30       	cpi	r18, 0x04	; 4
    2058:	11 f0       	breq	.+4      	; 0x205e <__divsf3+0x62>
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 f4       	brne	.+12     	; 0x206a <__divsf3+0x6e>
    205e:	23 17       	cp	r18, r19
    2060:	09 f0       	breq	.+2      	; 0x2064 <__divsf3+0x68>
    2062:	6e c0       	rjmp	.+220    	; 0x2140 <__divsf3+0x144>
    2064:	63 e5       	ldi	r22, 0x53	; 83
    2066:	73 e0       	ldi	r23, 0x03	; 3
    2068:	6e c0       	rjmp	.+220    	; 0x2146 <__divsf3+0x14a>
    206a:	34 30       	cpi	r19, 0x04	; 4
    206c:	39 f4       	brne	.+14     	; 0x207c <__divsf3+0x80>
    206e:	1d 86       	std	Y+13, r1	; 0x0d
    2070:	1e 86       	std	Y+14, r1	; 0x0e
    2072:	1f 86       	std	Y+15, r1	; 0x0f
    2074:	18 8a       	std	Y+16, r1	; 0x10
    2076:	1c 86       	std	Y+12, r1	; 0x0c
    2078:	1b 86       	std	Y+11, r1	; 0x0b
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <__divsf3+0x88>
    207c:	32 30       	cpi	r19, 0x02	; 2
    207e:	21 f4       	brne	.+8      	; 0x2088 <__divsf3+0x8c>
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	89 87       	std	Y+9, r24	; 0x09
    2084:	b7 01       	movw	r22, r14
    2086:	5f c0       	rjmp	.+190    	; 0x2146 <__divsf3+0x14a>
    2088:	2b 85       	ldd	r18, Y+11	; 0x0b
    208a:	3c 85       	ldd	r19, Y+12	; 0x0c
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	28 1b       	sub	r18, r24
    2092:	39 0b       	sbc	r19, r25
    2094:	3c 87       	std	Y+12, r19	; 0x0c
    2096:	2b 87       	std	Y+11, r18	; 0x0b
    2098:	ed 84       	ldd	r14, Y+13	; 0x0d
    209a:	fe 84       	ldd	r15, Y+14	; 0x0e
    209c:	0f 85       	ldd	r16, Y+15	; 0x0f
    209e:	18 89       	ldd	r17, Y+16	; 0x10
    20a0:	ad 88       	ldd	r10, Y+21	; 0x15
    20a2:	be 88       	ldd	r11, Y+22	; 0x16
    20a4:	cf 88       	ldd	r12, Y+23	; 0x17
    20a6:	d8 8c       	ldd	r13, Y+24	; 0x18
    20a8:	ea 14       	cp	r14, r10
    20aa:	fb 04       	cpc	r15, r11
    20ac:	0c 05       	cpc	r16, r12
    20ae:	1d 05       	cpc	r17, r13
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <__divsf3+0xc6>
    20b2:	ee 0c       	add	r14, r14
    20b4:	ff 1c       	adc	r15, r15
    20b6:	00 1f       	adc	r16, r16
    20b8:	11 1f       	adc	r17, r17
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	30 40       	sbci	r19, 0x00	; 0
    20be:	3c 87       	std	Y+12, r19	; 0x0c
    20c0:	2b 87       	std	Y+11, r18	; 0x0b
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e4       	ldi	r27, 0x40	; 64
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	ea 14       	cp	r14, r10
    20d8:	fb 04       	cpc	r15, r11
    20da:	0c 05       	cpc	r16, r12
    20dc:	1d 05       	cpc	r17, r13
    20de:	40 f0       	brcs	.+16     	; 0x20f0 <__divsf3+0xf4>
    20e0:	28 2b       	or	r18, r24
    20e2:	39 2b       	or	r19, r25
    20e4:	4a 2b       	or	r20, r26
    20e6:	5b 2b       	or	r21, r27
    20e8:	ea 18       	sub	r14, r10
    20ea:	fb 08       	sbc	r15, r11
    20ec:	0c 09       	sbc	r16, r12
    20ee:	1d 09       	sbc	r17, r13
    20f0:	b6 95       	lsr	r27
    20f2:	a7 95       	ror	r26
    20f4:	97 95       	ror	r25
    20f6:	87 95       	ror	r24
    20f8:	ee 0c       	add	r14, r14
    20fa:	ff 1c       	adc	r15, r15
    20fc:	00 1f       	adc	r16, r16
    20fe:	11 1f       	adc	r17, r17
    2100:	6f 5f       	subi	r22, 0xFF	; 255
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	6f 31       	cpi	r22, 0x1F	; 31
    2106:	71 05       	cpc	r23, r1
    2108:	31 f7       	brne	.-52     	; 0x20d6 <__divsf3+0xda>
    210a:	da 01       	movw	r26, r20
    210c:	c9 01       	movw	r24, r18
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	a0 70       	andi	r26, 0x00	; 0
    2114:	b0 70       	andi	r27, 0x00	; 0
    2116:	80 34       	cpi	r24, 0x40	; 64
    2118:	91 05       	cpc	r25, r1
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	61 f4       	brne	.+24     	; 0x2138 <__divsf3+0x13c>
    2120:	27 fd       	sbrc	r18, 7
    2122:	0a c0       	rjmp	.+20     	; 0x2138 <__divsf3+0x13c>
    2124:	e1 14       	cp	r14, r1
    2126:	f1 04       	cpc	r15, r1
    2128:	01 05       	cpc	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	29 f0       	breq	.+10     	; 0x2138 <__divsf3+0x13c>
    212e:	20 5c       	subi	r18, 0xC0	; 192
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	4f 4f       	sbci	r20, 0xFF	; 255
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	20 78       	andi	r18, 0x80	; 128
    2138:	2d 87       	std	Y+13, r18	; 0x0d
    213a:	3e 87       	std	Y+14, r19	; 0x0e
    213c:	4f 87       	std	Y+15, r20	; 0x0f
    213e:	58 8b       	std	Y+16, r21	; 0x10
    2140:	be 01       	movw	r22, r28
    2142:	67 5f       	subi	r22, 0xF7	; 247
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	cb 01       	movw	r24, r22
    2148:	0e 94 56 12 	call	0x24ac	; 0x24ac <__pack_f>
    214c:	68 96       	adiw	r28, 0x18	; 24
    214e:	ea e0       	ldi	r30, 0x0A	; 10
    2150:	0c 94 bf 3a 	jmp	0x757e	; 0x757e <__epilogue_restores__+0x10>

00002154 <__gtsf2>:
    2154:	a8 e1       	ldi	r26, 0x18	; 24
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 eb       	ldi	r30, 0xB0	; 176
    215a:	f0 e1       	ldi	r31, 0x10	; 16
    215c:	0c 94 a7 3a 	jmp	0x754e	; 0x754e <__prologue_saves__+0x18>
    2160:	69 83       	std	Y+1, r22	; 0x01
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	2d 83       	std	Y+5, r18	; 0x05
    216a:	3e 83       	std	Y+6, r19	; 0x06
    216c:	4f 83       	std	Y+7, r20	; 0x07
    216e:	58 87       	std	Y+8, r21	; 0x08
    2170:	89 e0       	ldi	r24, 0x09	; 9
    2172:	e8 2e       	mov	r14, r24
    2174:	f1 2c       	mov	r15, r1
    2176:	ec 0e       	add	r14, r28
    2178:	fd 1e       	adc	r15, r29
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	b7 01       	movw	r22, r14
    2180:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    2184:	8e 01       	movw	r16, r28
    2186:	0f 5e       	subi	r16, 0xEF	; 239
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	ce 01       	movw	r24, r28
    218c:	05 96       	adiw	r24, 0x05	; 5
    218e:	b8 01       	movw	r22, r16
    2190:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	40 f0       	brcs	.+16     	; 0x21aa <__gtsf2+0x56>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	28 f0       	brcs	.+10     	; 0x21aa <__gtsf2+0x56>
    21a0:	c7 01       	movw	r24, r14
    21a2:	b8 01       	movw	r22, r16
    21a4:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fpcmp_parts_f>
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <__gtsf2+0x58>
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	68 96       	adiw	r28, 0x18	; 24
    21ae:	e6 e0       	ldi	r30, 0x06	; 6
    21b0:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <__epilogue_restores__+0x18>

000021b4 <__gesf2>:
    21b4:	a8 e1       	ldi	r26, 0x18	; 24
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 a7 3a 	jmp	0x754e	; 0x754e <__prologue_saves__+0x18>
    21c0:	69 83       	std	Y+1, r22	; 0x01
    21c2:	7a 83       	std	Y+2, r23	; 0x02
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	2d 83       	std	Y+5, r18	; 0x05
    21ca:	3e 83       	std	Y+6, r19	; 0x06
    21cc:	4f 83       	std	Y+7, r20	; 0x07
    21ce:	58 87       	std	Y+8, r21	; 0x08
    21d0:	89 e0       	ldi	r24, 0x09	; 9
    21d2:	e8 2e       	mov	r14, r24
    21d4:	f1 2c       	mov	r15, r1
    21d6:	ec 0e       	add	r14, r28
    21d8:	fd 1e       	adc	r15, r29
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b7 01       	movw	r22, r14
    21e0:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    21e4:	8e 01       	movw	r16, r28
    21e6:	0f 5e       	subi	r16, 0xEF	; 239
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	ce 01       	movw	r24, r28
    21ec:	05 96       	adiw	r24, 0x05	; 5
    21ee:	b8 01       	movw	r22, r16
    21f0:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	40 f0       	brcs	.+16     	; 0x220a <__gesf2+0x56>
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	28 f0       	brcs	.+10     	; 0x220a <__gesf2+0x56>
    2200:	c7 01       	movw	r24, r14
    2202:	b8 01       	movw	r22, r16
    2204:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fpcmp_parts_f>
    2208:	01 c0       	rjmp	.+2      	; 0x220c <__gesf2+0x58>
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	68 96       	adiw	r28, 0x18	; 24
    220e:	e6 e0       	ldi	r30, 0x06	; 6
    2210:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <__epilogue_restores__+0x18>

00002214 <__ltsf2>:
    2214:	a8 e1       	ldi	r26, 0x18	; 24
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e1       	ldi	r30, 0x10	; 16
    221a:	f1 e1       	ldi	r31, 0x11	; 17
    221c:	0c 94 a7 3a 	jmp	0x754e	; 0x754e <__prologue_saves__+0x18>
    2220:	69 83       	std	Y+1, r22	; 0x01
    2222:	7a 83       	std	Y+2, r23	; 0x02
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	2d 83       	std	Y+5, r18	; 0x05
    222a:	3e 83       	std	Y+6, r19	; 0x06
    222c:	4f 83       	std	Y+7, r20	; 0x07
    222e:	58 87       	std	Y+8, r21	; 0x08
    2230:	89 e0       	ldi	r24, 0x09	; 9
    2232:	e8 2e       	mov	r14, r24
    2234:	f1 2c       	mov	r15, r1
    2236:	ec 0e       	add	r14, r28
    2238:	fd 1e       	adc	r15, r29
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	b7 01       	movw	r22, r14
    2240:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    2244:	8e 01       	movw	r16, r28
    2246:	0f 5e       	subi	r16, 0xEF	; 239
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	ce 01       	movw	r24, r28
    224c:	05 96       	adiw	r24, 0x05	; 5
    224e:	b8 01       	movw	r22, r16
    2250:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	40 f0       	brcs	.+16     	; 0x226a <__ltsf2+0x56>
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	28 f0       	brcs	.+10     	; 0x226a <__ltsf2+0x56>
    2260:	c7 01       	movw	r24, r14
    2262:	b8 01       	movw	r22, r16
    2264:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fpcmp_parts_f>
    2268:	01 c0       	rjmp	.+2      	; 0x226c <__ltsf2+0x58>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	68 96       	adiw	r28, 0x18	; 24
    226e:	e6 e0       	ldi	r30, 0x06	; 6
    2270:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <__epilogue_restores__+0x18>

00002274 <__fixsfsi>:
    2274:	ac e0       	ldi	r26, 0x0C	; 12
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	f1 e1       	ldi	r31, 0x11	; 17
    227c:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <__prologue_saves__+0x20>
    2280:	69 83       	std	Y+1, r22	; 0x01
    2282:	7a 83       	std	Y+2, r23	; 0x02
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	be 01       	movw	r22, r28
    228e:	6b 5f       	subi	r22, 0xFB	; 251
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	0e 94 2b 13 	call	0x2656	; 0x2656 <__unpack_f>
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	61 f1       	breq	.+88     	; 0x22f4 <__fixsfsi+0x80>
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	50 f1       	brcs	.+84     	; 0x22f4 <__fixsfsi+0x80>
    22a0:	84 30       	cpi	r24, 0x04	; 4
    22a2:	21 f4       	brne	.+8      	; 0x22ac <__fixsfsi+0x38>
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	88 23       	and	r24, r24
    22a8:	51 f1       	breq	.+84     	; 0x22fe <__fixsfsi+0x8a>
    22aa:	2e c0       	rjmp	.+92     	; 0x2308 <__fixsfsi+0x94>
    22ac:	2f 81       	ldd	r18, Y+7	; 0x07
    22ae:	38 85       	ldd	r19, Y+8	; 0x08
    22b0:	37 fd       	sbrc	r19, 7
    22b2:	20 c0       	rjmp	.+64     	; 0x22f4 <__fixsfsi+0x80>
    22b4:	6e 81       	ldd	r22, Y+6	; 0x06
    22b6:	2f 31       	cpi	r18, 0x1F	; 31
    22b8:	31 05       	cpc	r19, r1
    22ba:	1c f0       	brlt	.+6      	; 0x22c2 <__fixsfsi+0x4e>
    22bc:	66 23       	and	r22, r22
    22be:	f9 f0       	breq	.+62     	; 0x22fe <__fixsfsi+0x8a>
    22c0:	23 c0       	rjmp	.+70     	; 0x2308 <__fixsfsi+0x94>
    22c2:	8e e1       	ldi	r24, 0x1E	; 30
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	82 1b       	sub	r24, r18
    22c8:	93 0b       	sbc	r25, r19
    22ca:	29 85       	ldd	r18, Y+9	; 0x09
    22cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    22d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <__fixsfsi+0x68>
    22d4:	56 95       	lsr	r21
    22d6:	47 95       	ror	r20
    22d8:	37 95       	ror	r19
    22da:	27 95       	ror	r18
    22dc:	8a 95       	dec	r24
    22de:	d2 f7       	brpl	.-12     	; 0x22d4 <__fixsfsi+0x60>
    22e0:	66 23       	and	r22, r22
    22e2:	b1 f0       	breq	.+44     	; 0x2310 <__fixsfsi+0x9c>
    22e4:	50 95       	com	r21
    22e6:	40 95       	com	r20
    22e8:	30 95       	com	r19
    22ea:	21 95       	neg	r18
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	4f 4f       	sbci	r20, 0xFF	; 255
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	0e c0       	rjmp	.+28     	; 0x2310 <__fixsfsi+0x9c>
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <__fixsfsi+0x9c>
    22fe:	2f ef       	ldi	r18, 0xFF	; 255
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f ef       	ldi	r20, 0xFF	; 255
    2304:	5f e7       	ldi	r21, 0x7F	; 127
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <__fixsfsi+0x9c>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e8       	ldi	r21, 0x80	; 128
    2310:	b9 01       	movw	r22, r18
    2312:	ca 01       	movw	r24, r20
    2314:	2c 96       	adiw	r28, 0x0c	; 12
    2316:	e2 e0       	ldi	r30, 0x02	; 2
    2318:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <__epilogue_restores__+0x20>

0000231c <__floatunsisf>:
    231c:	a8 e0       	ldi	r26, 0x08	; 8
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e4 e9       	ldi	r30, 0x94	; 148
    2322:	f1 e1       	ldi	r31, 0x11	; 17
    2324:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <__prologue_saves__+0x10>
    2328:	7b 01       	movw	r14, r22
    232a:	8c 01       	movw	r16, r24
    232c:	61 15       	cp	r22, r1
    232e:	71 05       	cpc	r23, r1
    2330:	81 05       	cpc	r24, r1
    2332:	91 05       	cpc	r25, r1
    2334:	19 f4       	brne	.+6      	; 0x233c <__floatunsisf+0x20>
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	60 c0       	rjmp	.+192    	; 0x23fc <__floatunsisf+0xe0>
    233c:	83 e0       	ldi	r24, 0x03	; 3
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	8e e1       	ldi	r24, 0x1E	; 30
    2342:	c8 2e       	mov	r12, r24
    2344:	d1 2c       	mov	r13, r1
    2346:	dc 82       	std	Y+4, r13	; 0x04
    2348:	cb 82       	std	Y+3, r12	; 0x03
    234a:	ed 82       	std	Y+5, r14	; 0x05
    234c:	fe 82       	std	Y+6, r15	; 0x06
    234e:	0f 83       	std	Y+7, r16	; 0x07
    2350:	18 87       	std	Y+8, r17	; 0x08
    2352:	c8 01       	movw	r24, r16
    2354:	b7 01       	movw	r22, r14
    2356:	0e 94 07 12 	call	0x240e	; 0x240e <__clzsi2>
    235a:	fc 01       	movw	r30, r24
    235c:	31 97       	sbiw	r30, 0x01	; 1
    235e:	f7 ff       	sbrs	r31, 7
    2360:	3b c0       	rjmp	.+118    	; 0x23d8 <__floatunsisf+0xbc>
    2362:	22 27       	eor	r18, r18
    2364:	33 27       	eor	r19, r19
    2366:	2e 1b       	sub	r18, r30
    2368:	3f 0b       	sbc	r19, r31
    236a:	57 01       	movw	r10, r14
    236c:	68 01       	movw	r12, r16
    236e:	02 2e       	mov	r0, r18
    2370:	04 c0       	rjmp	.+8      	; 0x237a <__floatunsisf+0x5e>
    2372:	d6 94       	lsr	r13
    2374:	c7 94       	ror	r12
    2376:	b7 94       	ror	r11
    2378:	a7 94       	ror	r10
    237a:	0a 94       	dec	r0
    237c:	d2 f7       	brpl	.-12     	; 0x2372 <__floatunsisf+0x56>
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e0       	ldi	r26, 0x00	; 0
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <__floatunsisf+0x7c>
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	aa 1f       	adc	r26, r26
    2396:	bb 1f       	adc	r27, r27
    2398:	2a 95       	dec	r18
    239a:	d2 f7       	brpl	.-12     	; 0x2390 <__floatunsisf+0x74>
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	a1 09       	sbc	r26, r1
    23a0:	b1 09       	sbc	r27, r1
    23a2:	8e 21       	and	r24, r14
    23a4:	9f 21       	and	r25, r15
    23a6:	a0 23       	and	r26, r16
    23a8:	b1 23       	and	r27, r17
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	a1 05       	cpc	r26, r1
    23ae:	b1 05       	cpc	r27, r1
    23b0:	21 f0       	breq	.+8      	; 0x23ba <__floatunsisf+0x9e>
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	4a 29       	or	r20, r10
    23bc:	5b 29       	or	r21, r11
    23be:	6c 29       	or	r22, r12
    23c0:	7d 29       	or	r23, r13
    23c2:	4d 83       	std	Y+5, r20	; 0x05
    23c4:	5e 83       	std	Y+6, r21	; 0x06
    23c6:	6f 83       	std	Y+7, r22	; 0x07
    23c8:	78 87       	std	Y+8, r23	; 0x08
    23ca:	8e e1       	ldi	r24, 0x1E	; 30
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	8e 1b       	sub	r24, r30
    23d0:	9f 0b       	sbc	r25, r31
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	12 c0       	rjmp	.+36     	; 0x23fc <__floatunsisf+0xe0>
    23d8:	30 97       	sbiw	r30, 0x00	; 0
    23da:	81 f0       	breq	.+32     	; 0x23fc <__floatunsisf+0xe0>
    23dc:	0e 2e       	mov	r0, r30
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <__floatunsisf+0xcc>
    23e0:	ee 0c       	add	r14, r14
    23e2:	ff 1c       	adc	r15, r15
    23e4:	00 1f       	adc	r16, r16
    23e6:	11 1f       	adc	r17, r17
    23e8:	0a 94       	dec	r0
    23ea:	d2 f7       	brpl	.-12     	; 0x23e0 <__floatunsisf+0xc4>
    23ec:	ed 82       	std	Y+5, r14	; 0x05
    23ee:	fe 82       	std	Y+6, r15	; 0x06
    23f0:	0f 83       	std	Y+7, r16	; 0x07
    23f2:	18 87       	std	Y+8, r17	; 0x08
    23f4:	ce 1a       	sub	r12, r30
    23f6:	df 0a       	sbc	r13, r31
    23f8:	dc 82       	std	Y+4, r13	; 0x04
    23fa:	cb 82       	std	Y+3, r12	; 0x03
    23fc:	1a 82       	std	Y+2, r1	; 0x02
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	0e 94 56 12 	call	0x24ac	; 0x24ac <__pack_f>
    2406:	28 96       	adiw	r28, 0x08	; 8
    2408:	ea e0       	ldi	r30, 0x0A	; 10
    240a:	0c 94 bf 3a 	jmp	0x757e	; 0x757e <__epilogue_restores__+0x10>

0000240e <__clzsi2>:
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	7b 01       	movw	r14, r22
    2418:	8c 01       	movw	r16, r24
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	e8 16       	cp	r14, r24
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	f8 06       	cpc	r15, r24
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	08 07       	cpc	r16, r24
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	18 07       	cpc	r17, r24
    242a:	88 f4       	brcc	.+34     	; 0x244e <__clzsi2+0x40>
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	e8 16       	cp	r14, r24
    2430:	f1 04       	cpc	r15, r1
    2432:	01 05       	cpc	r16, r1
    2434:	11 05       	cpc	r17, r1
    2436:	31 f0       	breq	.+12     	; 0x2444 <__clzsi2+0x36>
    2438:	28 f0       	brcs	.+10     	; 0x2444 <__clzsi2+0x36>
    243a:	88 e0       	ldi	r24, 0x08	; 8
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	17 c0       	rjmp	.+46     	; 0x2472 <__clzsi2+0x64>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e0       	ldi	r26, 0x00	; 0
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	12 c0       	rjmp	.+36     	; 0x2472 <__clzsi2+0x64>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	e8 16       	cp	r14, r24
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	f8 06       	cpc	r15, r24
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	08 07       	cpc	r16, r24
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	18 07       	cpc	r17, r24
    245e:	28 f0       	brcs	.+10     	; 0x246a <__clzsi2+0x5c>
    2460:	88 e1       	ldi	r24, 0x18	; 24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e0       	ldi	r26, 0x00	; 0
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	04 c0       	rjmp	.+8      	; 0x2472 <__clzsi2+0x64>
    246a:	80 e1       	ldi	r24, 0x10	; 16
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 e0       	ldi	r26, 0x00	; 0
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	20 e2       	ldi	r18, 0x20	; 32
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	28 1b       	sub	r18, r24
    247c:	39 0b       	sbc	r19, r25
    247e:	4a 0b       	sbc	r20, r26
    2480:	5b 0b       	sbc	r21, r27
    2482:	04 c0       	rjmp	.+8      	; 0x248c <__clzsi2+0x7e>
    2484:	16 95       	lsr	r17
    2486:	07 95       	ror	r16
    2488:	f7 94       	ror	r15
    248a:	e7 94       	ror	r14
    248c:	8a 95       	dec	r24
    248e:	d2 f7       	brpl	.-12     	; 0x2484 <__clzsi2+0x76>
    2490:	f7 01       	movw	r30, r14
    2492:	e5 5a       	subi	r30, 0xA5	; 165
    2494:	fc 4f       	sbci	r31, 0xFC	; 252
    2496:	80 81       	ld	r24, Z
    2498:	28 1b       	sub	r18, r24
    249a:	31 09       	sbc	r19, r1
    249c:	41 09       	sbc	r20, r1
    249e:	51 09       	sbc	r21, r1
    24a0:	c9 01       	movw	r24, r18
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	08 95       	ret

000024ac <__pack_f>:
    24ac:	df 92       	push	r13
    24ae:	ef 92       	push	r14
    24b0:	ff 92       	push	r15
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	fc 01       	movw	r30, r24
    24b8:	e4 80       	ldd	r14, Z+4	; 0x04
    24ba:	f5 80       	ldd	r15, Z+5	; 0x05
    24bc:	06 81       	ldd	r16, Z+6	; 0x06
    24be:	17 81       	ldd	r17, Z+7	; 0x07
    24c0:	d1 80       	ldd	r13, Z+1	; 0x01
    24c2:	80 81       	ld	r24, Z
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	48 f4       	brcc	.+18     	; 0x24da <__pack_f+0x2e>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e1       	ldi	r26, 0x10	; 16
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e8 2a       	or	r14, r24
    24d2:	f9 2a       	or	r15, r25
    24d4:	0a 2b       	or	r16, r26
    24d6:	1b 2b       	or	r17, r27
    24d8:	a5 c0       	rjmp	.+330    	; 0x2624 <__pack_f+0x178>
    24da:	84 30       	cpi	r24, 0x04	; 4
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <__pack_f+0x34>
    24de:	9f c0       	rjmp	.+318    	; 0x261e <__pack_f+0x172>
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	21 f4       	brne	.+8      	; 0x24ec <__pack_f+0x40>
    24e4:	ee 24       	eor	r14, r14
    24e6:	ff 24       	eor	r15, r15
    24e8:	87 01       	movw	r16, r14
    24ea:	05 c0       	rjmp	.+10     	; 0x24f6 <__pack_f+0x4a>
    24ec:	e1 14       	cp	r14, r1
    24ee:	f1 04       	cpc	r15, r1
    24f0:	01 05       	cpc	r16, r1
    24f2:	11 05       	cpc	r17, r1
    24f4:	19 f4       	brne	.+6      	; 0x24fc <__pack_f+0x50>
    24f6:	e0 e0       	ldi	r30, 0x00	; 0
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	96 c0       	rjmp	.+300    	; 0x2628 <__pack_f+0x17c>
    24fc:	62 81       	ldd	r22, Z+2	; 0x02
    24fe:	73 81       	ldd	r23, Z+3	; 0x03
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	62 38       	cpi	r22, 0x82	; 130
    2504:	79 07       	cpc	r23, r25
    2506:	0c f0       	brlt	.+2      	; 0x250a <__pack_f+0x5e>
    2508:	5b c0       	rjmp	.+182    	; 0x25c0 <__pack_f+0x114>
    250a:	22 e8       	ldi	r18, 0x82	; 130
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	26 1b       	sub	r18, r22
    2510:	37 0b       	sbc	r19, r23
    2512:	2a 31       	cpi	r18, 0x1A	; 26
    2514:	31 05       	cpc	r19, r1
    2516:	2c f0       	brlt	.+10     	; 0x2522 <__pack_f+0x76>
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	2a c0       	rjmp	.+84     	; 0x2576 <__pack_f+0xca>
    2522:	b8 01       	movw	r22, r16
    2524:	a7 01       	movw	r20, r14
    2526:	02 2e       	mov	r0, r18
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <__pack_f+0x86>
    252a:	76 95       	lsr	r23
    252c:	67 95       	ror	r22
    252e:	57 95       	ror	r21
    2530:	47 95       	ror	r20
    2532:	0a 94       	dec	r0
    2534:	d2 f7       	brpl	.-12     	; 0x252a <__pack_f+0x7e>
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e0       	ldi	r26, 0x00	; 0
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <__pack_f+0x9c>
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	aa 1f       	adc	r26, r26
    2546:	bb 1f       	adc	r27, r27
    2548:	2a 95       	dec	r18
    254a:	d2 f7       	brpl	.-12     	; 0x2540 <__pack_f+0x94>
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	a1 09       	sbc	r26, r1
    2550:	b1 09       	sbc	r27, r1
    2552:	8e 21       	and	r24, r14
    2554:	9f 21       	and	r25, r15
    2556:	a0 23       	and	r26, r16
    2558:	b1 23       	and	r27, r17
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	a1 05       	cpc	r26, r1
    255e:	b1 05       	cpc	r27, r1
    2560:	21 f0       	breq	.+8      	; 0x256a <__pack_f+0xbe>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e0       	ldi	r26, 0x00	; 0
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	9a 01       	movw	r18, r20
    256c:	ab 01       	movw	r20, r22
    256e:	28 2b       	or	r18, r24
    2570:	39 2b       	or	r19, r25
    2572:	4a 2b       	or	r20, r26
    2574:	5b 2b       	or	r21, r27
    2576:	da 01       	movw	r26, r20
    2578:	c9 01       	movw	r24, r18
    257a:	8f 77       	andi	r24, 0x7F	; 127
    257c:	90 70       	andi	r25, 0x00	; 0
    257e:	a0 70       	andi	r26, 0x00	; 0
    2580:	b0 70       	andi	r27, 0x00	; 0
    2582:	80 34       	cpi	r24, 0x40	; 64
    2584:	91 05       	cpc	r25, r1
    2586:	a1 05       	cpc	r26, r1
    2588:	b1 05       	cpc	r27, r1
    258a:	39 f4       	brne	.+14     	; 0x259a <__pack_f+0xee>
    258c:	27 ff       	sbrs	r18, 7
    258e:	09 c0       	rjmp	.+18     	; 0x25a2 <__pack_f+0xf6>
    2590:	20 5c       	subi	r18, 0xC0	; 192
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	4f 4f       	sbci	r20, 0xFF	; 255
    2596:	5f 4f       	sbci	r21, 0xFF	; 255
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <__pack_f+0xf6>
    259a:	21 5c       	subi	r18, 0xC1	; 193
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	4f 4f       	sbci	r20, 0xFF	; 255
    25a0:	5f 4f       	sbci	r21, 0xFF	; 255
    25a2:	e0 e0       	ldi	r30, 0x00	; 0
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	20 30       	cpi	r18, 0x00	; 0
    25a8:	a0 e0       	ldi	r26, 0x00	; 0
    25aa:	3a 07       	cpc	r19, r26
    25ac:	a0 e0       	ldi	r26, 0x00	; 0
    25ae:	4a 07       	cpc	r20, r26
    25b0:	a0 e4       	ldi	r26, 0x40	; 64
    25b2:	5a 07       	cpc	r21, r26
    25b4:	10 f0       	brcs	.+4      	; 0x25ba <__pack_f+0x10e>
    25b6:	e1 e0       	ldi	r30, 0x01	; 1
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	79 01       	movw	r14, r18
    25bc:	8a 01       	movw	r16, r20
    25be:	27 c0       	rjmp	.+78     	; 0x260e <__pack_f+0x162>
    25c0:	60 38       	cpi	r22, 0x80	; 128
    25c2:	71 05       	cpc	r23, r1
    25c4:	64 f5       	brge	.+88     	; 0x261e <__pack_f+0x172>
    25c6:	fb 01       	movw	r30, r22
    25c8:	e1 58       	subi	r30, 0x81	; 129
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	d8 01       	movw	r26, r16
    25ce:	c7 01       	movw	r24, r14
    25d0:	8f 77       	andi	r24, 0x7F	; 127
    25d2:	90 70       	andi	r25, 0x00	; 0
    25d4:	a0 70       	andi	r26, 0x00	; 0
    25d6:	b0 70       	andi	r27, 0x00	; 0
    25d8:	80 34       	cpi	r24, 0x40	; 64
    25da:	91 05       	cpc	r25, r1
    25dc:	a1 05       	cpc	r26, r1
    25de:	b1 05       	cpc	r27, r1
    25e0:	39 f4       	brne	.+14     	; 0x25f0 <__pack_f+0x144>
    25e2:	e7 fe       	sbrs	r14, 7
    25e4:	0d c0       	rjmp	.+26     	; 0x2600 <__pack_f+0x154>
    25e6:	80 e4       	ldi	r24, 0x40	; 64
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <__pack_f+0x14c>
    25f0:	8f e3       	ldi	r24, 0x3F	; 63
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e8 0e       	add	r14, r24
    25fa:	f9 1e       	adc	r15, r25
    25fc:	0a 1f       	adc	r16, r26
    25fe:	1b 1f       	adc	r17, r27
    2600:	17 ff       	sbrs	r17, 7
    2602:	05 c0       	rjmp	.+10     	; 0x260e <__pack_f+0x162>
    2604:	16 95       	lsr	r17
    2606:	07 95       	ror	r16
    2608:	f7 94       	ror	r15
    260a:	e7 94       	ror	r14
    260c:	31 96       	adiw	r30, 0x01	; 1
    260e:	87 e0       	ldi	r24, 0x07	; 7
    2610:	16 95       	lsr	r17
    2612:	07 95       	ror	r16
    2614:	f7 94       	ror	r15
    2616:	e7 94       	ror	r14
    2618:	8a 95       	dec	r24
    261a:	d1 f7       	brne	.-12     	; 0x2610 <__pack_f+0x164>
    261c:	05 c0       	rjmp	.+10     	; 0x2628 <__pack_f+0x17c>
    261e:	ee 24       	eor	r14, r14
    2620:	ff 24       	eor	r15, r15
    2622:	87 01       	movw	r16, r14
    2624:	ef ef       	ldi	r30, 0xFF	; 255
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	6e 2f       	mov	r22, r30
    262a:	67 95       	ror	r22
    262c:	66 27       	eor	r22, r22
    262e:	67 95       	ror	r22
    2630:	90 2f       	mov	r25, r16
    2632:	9f 77       	andi	r25, 0x7F	; 127
    2634:	d7 94       	ror	r13
    2636:	dd 24       	eor	r13, r13
    2638:	d7 94       	ror	r13
    263a:	8e 2f       	mov	r24, r30
    263c:	86 95       	lsr	r24
    263e:	49 2f       	mov	r20, r25
    2640:	46 2b       	or	r20, r22
    2642:	58 2f       	mov	r21, r24
    2644:	5d 29       	or	r21, r13
    2646:	b7 01       	movw	r22, r14
    2648:	ca 01       	movw	r24, r20
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	ff 90       	pop	r15
    2650:	ef 90       	pop	r14
    2652:	df 90       	pop	r13
    2654:	08 95       	ret

00002656 <__unpack_f>:
    2656:	fc 01       	movw	r30, r24
    2658:	db 01       	movw	r26, r22
    265a:	40 81       	ld	r20, Z
    265c:	51 81       	ldd	r21, Z+1	; 0x01
    265e:	22 81       	ldd	r18, Z+2	; 0x02
    2660:	62 2f       	mov	r22, r18
    2662:	6f 77       	andi	r22, 0x7F	; 127
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	22 1f       	adc	r18, r18
    2668:	22 27       	eor	r18, r18
    266a:	22 1f       	adc	r18, r18
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	89 2f       	mov	r24, r25
    2670:	88 0f       	add	r24, r24
    2672:	82 2b       	or	r24, r18
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	99 1f       	adc	r25, r25
    267a:	99 27       	eor	r25, r25
    267c:	99 1f       	adc	r25, r25
    267e:	11 96       	adiw	r26, 0x01	; 1
    2680:	9c 93       	st	X, r25
    2682:	11 97       	sbiw	r26, 0x01	; 1
    2684:	21 15       	cp	r18, r1
    2686:	31 05       	cpc	r19, r1
    2688:	a9 f5       	brne	.+106    	; 0x26f4 <__unpack_f+0x9e>
    268a:	41 15       	cp	r20, r1
    268c:	51 05       	cpc	r21, r1
    268e:	61 05       	cpc	r22, r1
    2690:	71 05       	cpc	r23, r1
    2692:	11 f4       	brne	.+4      	; 0x2698 <__unpack_f+0x42>
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	37 c0       	rjmp	.+110    	; 0x2706 <__unpack_f+0xb0>
    2698:	82 e8       	ldi	r24, 0x82	; 130
    269a:	9f ef       	ldi	r25, 0xFF	; 255
    269c:	13 96       	adiw	r26, 0x03	; 3
    269e:	9c 93       	st	X, r25
    26a0:	8e 93       	st	-X, r24
    26a2:	12 97       	sbiw	r26, 0x02	; 2
    26a4:	9a 01       	movw	r18, r20
    26a6:	ab 01       	movw	r20, r22
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	44 1f       	adc	r20, r20
    26b0:	55 1f       	adc	r21, r21
    26b2:	6a 95       	dec	r22
    26b4:	d1 f7       	brne	.-12     	; 0x26aa <__unpack_f+0x54>
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	8c 93       	st	X, r24
    26ba:	0d c0       	rjmp	.+26     	; 0x26d6 <__unpack_f+0x80>
    26bc:	22 0f       	add	r18, r18
    26be:	33 1f       	adc	r19, r19
    26c0:	44 1f       	adc	r20, r20
    26c2:	55 1f       	adc	r21, r21
    26c4:	12 96       	adiw	r26, 0x02	; 2
    26c6:	8d 91       	ld	r24, X+
    26c8:	9c 91       	ld	r25, X
    26ca:	13 97       	sbiw	r26, 0x03	; 3
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	13 96       	adiw	r26, 0x03	; 3
    26d0:	9c 93       	st	X, r25
    26d2:	8e 93       	st	-X, r24
    26d4:	12 97       	sbiw	r26, 0x02	; 2
    26d6:	20 30       	cpi	r18, 0x00	; 0
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	38 07       	cpc	r19, r24
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	48 07       	cpc	r20, r24
    26e0:	80 e4       	ldi	r24, 0x40	; 64
    26e2:	58 07       	cpc	r21, r24
    26e4:	58 f3       	brcs	.-42     	; 0x26bc <__unpack_f+0x66>
    26e6:	14 96       	adiw	r26, 0x04	; 4
    26e8:	2d 93       	st	X+, r18
    26ea:	3d 93       	st	X+, r19
    26ec:	4d 93       	st	X+, r20
    26ee:	5c 93       	st	X, r21
    26f0:	17 97       	sbiw	r26, 0x07	; 7
    26f2:	08 95       	ret
    26f4:	2f 3f       	cpi	r18, 0xFF	; 255
    26f6:	31 05       	cpc	r19, r1
    26f8:	79 f4       	brne	.+30     	; 0x2718 <__unpack_f+0xc2>
    26fa:	41 15       	cp	r20, r1
    26fc:	51 05       	cpc	r21, r1
    26fe:	61 05       	cpc	r22, r1
    2700:	71 05       	cpc	r23, r1
    2702:	19 f4       	brne	.+6      	; 0x270a <__unpack_f+0xb4>
    2704:	84 e0       	ldi	r24, 0x04	; 4
    2706:	8c 93       	st	X, r24
    2708:	08 95       	ret
    270a:	64 ff       	sbrs	r22, 4
    270c:	03 c0       	rjmp	.+6      	; 0x2714 <__unpack_f+0xbe>
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	8c 93       	st	X, r24
    2712:	12 c0       	rjmp	.+36     	; 0x2738 <__unpack_f+0xe2>
    2714:	1c 92       	st	X, r1
    2716:	10 c0       	rjmp	.+32     	; 0x2738 <__unpack_f+0xe2>
    2718:	2f 57       	subi	r18, 0x7F	; 127
    271a:	30 40       	sbci	r19, 0x00	; 0
    271c:	13 96       	adiw	r26, 0x03	; 3
    271e:	3c 93       	st	X, r19
    2720:	2e 93       	st	-X, r18
    2722:	12 97       	sbiw	r26, 0x02	; 2
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	8c 93       	st	X, r24
    2728:	87 e0       	ldi	r24, 0x07	; 7
    272a:	44 0f       	add	r20, r20
    272c:	55 1f       	adc	r21, r21
    272e:	66 1f       	adc	r22, r22
    2730:	77 1f       	adc	r23, r23
    2732:	8a 95       	dec	r24
    2734:	d1 f7       	brne	.-12     	; 0x272a <__unpack_f+0xd4>
    2736:	70 64       	ori	r23, 0x40	; 64
    2738:	14 96       	adiw	r26, 0x04	; 4
    273a:	4d 93       	st	X+, r20
    273c:	5d 93       	st	X+, r21
    273e:	6d 93       	st	X+, r22
    2740:	7c 93       	st	X, r23
    2742:	17 97       	sbiw	r26, 0x07	; 7
    2744:	08 95       	ret

00002746 <__fpcmp_parts_f>:
    2746:	1f 93       	push	r17
    2748:	dc 01       	movw	r26, r24
    274a:	fb 01       	movw	r30, r22
    274c:	9c 91       	ld	r25, X
    274e:	92 30       	cpi	r25, 0x02	; 2
    2750:	08 f4       	brcc	.+2      	; 0x2754 <__fpcmp_parts_f+0xe>
    2752:	47 c0       	rjmp	.+142    	; 0x27e2 <__fpcmp_parts_f+0x9c>
    2754:	80 81       	ld	r24, Z
    2756:	82 30       	cpi	r24, 0x02	; 2
    2758:	08 f4       	brcc	.+2      	; 0x275c <__fpcmp_parts_f+0x16>
    275a:	43 c0       	rjmp	.+134    	; 0x27e2 <__fpcmp_parts_f+0x9c>
    275c:	94 30       	cpi	r25, 0x04	; 4
    275e:	51 f4       	brne	.+20     	; 0x2774 <__fpcmp_parts_f+0x2e>
    2760:	11 96       	adiw	r26, 0x01	; 1
    2762:	1c 91       	ld	r17, X
    2764:	84 30       	cpi	r24, 0x04	; 4
    2766:	99 f5       	brne	.+102    	; 0x27ce <__fpcmp_parts_f+0x88>
    2768:	81 81       	ldd	r24, Z+1	; 0x01
    276a:	68 2f       	mov	r22, r24
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	61 1b       	sub	r22, r17
    2770:	71 09       	sbc	r23, r1
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <__fpcmp_parts_f+0xac>
    2774:	84 30       	cpi	r24, 0x04	; 4
    2776:	21 f0       	breq	.+8      	; 0x2780 <__fpcmp_parts_f+0x3a>
    2778:	92 30       	cpi	r25, 0x02	; 2
    277a:	31 f4       	brne	.+12     	; 0x2788 <__fpcmp_parts_f+0x42>
    277c:	82 30       	cpi	r24, 0x02	; 2
    277e:	b9 f1       	breq	.+110    	; 0x27ee <__fpcmp_parts_f+0xa8>
    2780:	81 81       	ldd	r24, Z+1	; 0x01
    2782:	88 23       	and	r24, r24
    2784:	89 f1       	breq	.+98     	; 0x27e8 <__fpcmp_parts_f+0xa2>
    2786:	2d c0       	rjmp	.+90     	; 0x27e2 <__fpcmp_parts_f+0x9c>
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	1c 91       	ld	r17, X
    278c:	11 97       	sbiw	r26, 0x01	; 1
    278e:	82 30       	cpi	r24, 0x02	; 2
    2790:	f1 f0       	breq	.+60     	; 0x27ce <__fpcmp_parts_f+0x88>
    2792:	81 81       	ldd	r24, Z+1	; 0x01
    2794:	18 17       	cp	r17, r24
    2796:	d9 f4       	brne	.+54     	; 0x27ce <__fpcmp_parts_f+0x88>
    2798:	12 96       	adiw	r26, 0x02	; 2
    279a:	2d 91       	ld	r18, X+
    279c:	3c 91       	ld	r19, X
    279e:	13 97       	sbiw	r26, 0x03	; 3
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	82 17       	cp	r24, r18
    27a6:	93 07       	cpc	r25, r19
    27a8:	94 f0       	brlt	.+36     	; 0x27ce <__fpcmp_parts_f+0x88>
    27aa:	28 17       	cp	r18, r24
    27ac:	39 07       	cpc	r19, r25
    27ae:	bc f0       	brlt	.+46     	; 0x27de <__fpcmp_parts_f+0x98>
    27b0:	14 96       	adiw	r26, 0x04	; 4
    27b2:	8d 91       	ld	r24, X+
    27b4:	9d 91       	ld	r25, X+
    27b6:	0d 90       	ld	r0, X+
    27b8:	bc 91       	ld	r27, X
    27ba:	a0 2d       	mov	r26, r0
    27bc:	24 81       	ldd	r18, Z+4	; 0x04
    27be:	35 81       	ldd	r19, Z+5	; 0x05
    27c0:	46 81       	ldd	r20, Z+6	; 0x06
    27c2:	57 81       	ldd	r21, Z+7	; 0x07
    27c4:	28 17       	cp	r18, r24
    27c6:	39 07       	cpc	r19, r25
    27c8:	4a 07       	cpc	r20, r26
    27ca:	5b 07       	cpc	r21, r27
    27cc:	18 f4       	brcc	.+6      	; 0x27d4 <__fpcmp_parts_f+0x8e>
    27ce:	11 23       	and	r17, r17
    27d0:	41 f0       	breq	.+16     	; 0x27e2 <__fpcmp_parts_f+0x9c>
    27d2:	0a c0       	rjmp	.+20     	; 0x27e8 <__fpcmp_parts_f+0xa2>
    27d4:	82 17       	cp	r24, r18
    27d6:	93 07       	cpc	r25, r19
    27d8:	a4 07       	cpc	r26, r20
    27da:	b5 07       	cpc	r27, r21
    27dc:	40 f4       	brcc	.+16     	; 0x27ee <__fpcmp_parts_f+0xa8>
    27de:	11 23       	and	r17, r17
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <__fpcmp_parts_f+0xa2>
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	05 c0       	rjmp	.+10     	; 0x27f2 <__fpcmp_parts_f+0xac>
    27e8:	6f ef       	ldi	r22, 0xFF	; 255
    27ea:	7f ef       	ldi	r23, 0xFF	; 255
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <__fpcmp_parts_f+0xac>
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	cb 01       	movw	r24, r22
    27f4:	1f 91       	pop	r17
    27f6:	08 95       	ret

000027f8 <ATM_Start>:
uint8 ID_Counter;
uint8 GateState;


void ATM_Start(void)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
	ATM_Init();
    2800:	0e 94 e7 16 	call	0x2dce	; 0x2dce <ATM_Init>
	Scheduler_Init();
    2804:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <Scheduler_Init>
	SetVariables();
    2808:	10 92 ac 04 	sts	0x04AC, r1
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	80 93 9d 04 	sts	0x049D, r24
    2812:	10 92 97 04 	sts	0x0497, r1
    2816:	81 e4       	ldi	r24, 0x41	; 65
    2818:	80 93 a5 04 	sts	0x04A5, r24
    281c:	10 92 9c 04 	sts	0x049C, r1
    2820:	10 92 98 04 	sts	0x0498, r1
    2824:	10 92 9b 04 	sts	0x049B, r1
    2828:	10 92 9a 04 	sts	0x049A, r1
    282c:	10 92 a4 04 	sts	0x04A4, r1
    2830:	10 92 8a 04 	sts	0x048A, r1
    2834:	10 92 89 04 	sts	0x0489, r1
    2838:	8f ef       	ldi	r24, 0xFF	; 255
    283a:	80 93 8b 04 	sts	0x048B, r24
    283e:	10 92 8c 04 	sts	0x048C, r1
    2842:	10 92 95 04 	sts	0x0495, r1
    2846:	10 92 99 04 	sts	0x0499, r1
    284a:	10 92 aa 04 	sts	0x04AA, r1
    284e:	10 92 94 04 	sts	0x0494, r1
    2852:	10 92 a3 04 	sts	0x04A3, r1
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 d2 3a 	call	0x75a4	; 0x75a4 <__eerd_byte_m32>
    285e:	80 93 ab 04 	sts	0x04AB, r24
    2862:	80 91 ab 04 	lds	r24, 0x04AB
    2866:	8f 3f       	cpi	r24, 0xFF	; 255
    2868:	11 f4       	brne	.+4      	; 0x286e <ATM_Start+0x76>
    286a:	10 92 ab 04 	sts	0x04AB, r1
    286e:	10 92 88 04 	sts	0x0488, r1
    2872:	10 92 9e 04 	sts	0x049E, r1
	Scheduler();
    2876:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <Scheduler>
}
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <SWC1_SystemTicks>:

void SWC1_SystemTicks(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
	SWC2_SystemTick ? SWC2_SystemTick-- : SWC2_SystemTick;
    2888:	80 91 9a 04 	lds	r24, 0x049A
    288c:	90 91 9b 04 	lds	r25, 0x049B
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	49 f0       	breq	.+18     	; 0x28a6 <SWC1_SystemTicks+0x26>
    2894:	80 91 9a 04 	lds	r24, 0x049A
    2898:	90 91 9b 04 	lds	r25, 0x049B
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	90 93 9b 04 	sts	0x049B, r25
    28a2:	80 93 9a 04 	sts	0x049A, r24
	SWC3_SystemTick ? SWC3_SystemTick-- : SWC3_SystemTick;
    28a6:	80 91 98 04 	lds	r24, 0x0498
    28aa:	88 23       	and	r24, r24
    28ac:	29 f0       	breq	.+10     	; 0x28b8 <SWC1_SystemTicks+0x38>
    28ae:	80 91 98 04 	lds	r24, 0x0498
    28b2:	81 50       	subi	r24, 0x01	; 1
    28b4:	80 93 98 04 	sts	0x0498, r24
	SWC7_SystemTick ? SWC7_SystemTick-- : SWC7_SystemTick;
    28b8:	80 91 a4 04 	lds	r24, 0x04A4
    28bc:	88 23       	and	r24, r24
    28be:	29 f0       	breq	.+10     	; 0x28ca <SWC1_SystemTicks+0x4a>
    28c0:	80 91 a4 04 	lds	r24, 0x04A4
    28c4:	81 50       	subi	r24, 0x01	; 1
    28c6:	80 93 a4 04 	sts	0x04A4, r24
	if(CurrentState != WelcomeInATM && CurrentState != ChangePassword_Response &&\
    28ca:	80 91 ac 04 	lds	r24, 0x04AC
    28ce:	88 23       	and	r24, r24
    28d0:	99 f1       	breq	.+102    	; 0x2938 <SWC1_SystemTicks+0xb8>
    28d2:	80 91 ac 04 	lds	r24, 0x04AC
    28d6:	8b 30       	cpi	r24, 0x0B	; 11
    28d8:	79 f1       	breq	.+94     	; 0x2938 <SWC1_SystemTicks+0xb8>
    28da:	80 91 ac 04 	lds	r24, 0x04AC
    28de:	8c 30       	cpi	r24, 0x0C	; 12
    28e0:	59 f1       	breq	.+86     	; 0x2938 <SWC1_SystemTicks+0xb8>
    28e2:	80 91 ac 04 	lds	r24, 0x04AC
    28e6:	8d 30       	cpi	r24, 0x0D	; 13
    28e8:	39 f1       	breq	.+78     	; 0x2938 <SWC1_SystemTicks+0xb8>
    28ea:	80 91 ac 04 	lds	r24, 0x04AC
    28ee:	8e 30       	cpi	r24, 0x0E	; 14
    28f0:	19 f1       	breq	.+70     	; 0x2938 <SWC1_SystemTicks+0xb8>
    28f2:	80 91 ac 04 	lds	r24, 0x04AC
    28f6:	8f 30       	cpi	r24, 0x0F	; 15
    28f8:	f9 f0       	breq	.+62     	; 0x2938 <SWC1_SystemTicks+0xb8>
			CurrentState != CashWithdraw_Response && CurrentState != CreditInquiry_Response &&\
			CurrentState != CreditDeposit_Response && CurrentState != Error)
	{
		TimeOutTick++;
    28fa:	80 91 89 04 	lds	r24, 0x0489
    28fe:	90 91 8a 04 	lds	r25, 0x048A
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	90 93 8a 04 	sts	0x048A, r25
    2908:	80 93 89 04 	sts	0x0489, r24
		if(TimeOutTick == TimeOutDelay)
    290c:	80 91 89 04 	lds	r24, 0x0489
    2910:	90 91 8a 04 	lds	r25, 0x048A
    2914:	21 e0       	ldi	r18, 0x01	; 1
    2916:	8c 32       	cpi	r24, 0x2C	; 44
    2918:	92 07       	cpc	r25, r18
    291a:	71 f4       	brne	.+28     	; 0x2938 <SWC1_SystemTicks+0xb8>
		{
			TimeOutTick = 0;
    291c:	10 92 8a 04 	sts	0x048A, r1
    2920:	10 92 89 04 	sts	0x0489, r1
			SWC2_SystemTick = StandardDelay;
    2924:	8e e1       	ldi	r24, 0x1E	; 30
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	90 93 9b 04 	sts	0x049B, r25
    292c:	80 93 9a 04 	sts	0x049A, r24
			HandleState(Error, Timeout);
    2930:	8f e0       	ldi	r24, 0x0F	; 15
    2932:	68 e0       	ldi	r22, 0x08	; 8
    2934:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
		}
	}
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <SWC2_Application>:

void SWC2_Application(void)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <SWC2_Application+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <SWC2_Application+0x8>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	if(SWC2_SystemTick == 0)
    294a:	80 91 9a 04 	lds	r24, 0x049A
    294e:	90 91 9b 04 	lds	r25, 0x049B
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	09 f0       	breq	.+2      	; 0x2958 <SWC2_Application+0x1a>
    2956:	b7 c0       	rjmp	.+366    	; 0x2ac6 <SWC2_Application+0x188>
	{
		switch(CurrentState)
    2958:	80 91 ac 04 	lds	r24, 0x04AC
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	3c 83       	std	Y+4, r19	; 0x04
    2962:	2b 83       	std	Y+3, r18	; 0x03
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	85 30       	cpi	r24, 0x05	; 5
    296a:	91 05       	cpc	r25, r1
    296c:	09 f4       	brne	.+2      	; 0x2970 <SWC2_Application+0x32>
    296e:	59 c0       	rjmp	.+178    	; 0x2a22 <SWC2_Application+0xe4>
    2970:	2b 81       	ldd	r18, Y+3	; 0x03
    2972:	3c 81       	ldd	r19, Y+4	; 0x04
    2974:	26 30       	cpi	r18, 0x06	; 6
    2976:	31 05       	cpc	r19, r1
    2978:	04 f5       	brge	.+64     	; 0x29ba <SWC2_Application+0x7c>
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	82 30       	cpi	r24, 0x02	; 2
    2980:	91 05       	cpc	r25, r1
    2982:	09 f4       	brne	.+2      	; 0x2986 <SWC2_Application+0x48>
    2984:	45 c0       	rjmp	.+138    	; 0x2a10 <SWC2_Application+0xd2>
    2986:	2b 81       	ldd	r18, Y+3	; 0x03
    2988:	3c 81       	ldd	r19, Y+4	; 0x04
    298a:	23 30       	cpi	r18, 0x03	; 3
    298c:	31 05       	cpc	r19, r1
    298e:	54 f4       	brge	.+20     	; 0x29a4 <SWC2_Application+0x66>
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	b1 f1       	breq	.+108    	; 0x2a04 <SWC2_Application+0xc6>
    2998:	2b 81       	ldd	r18, Y+3	; 0x03
    299a:	3c 81       	ldd	r19, Y+4	; 0x04
    299c:	21 30       	cpi	r18, 0x01	; 1
    299e:	31 05       	cpc	r19, r1
    29a0:	a1 f1       	breq	.+104    	; 0x2a0a <SWC2_Application+0xcc>
    29a2:	8d c0       	rjmp	.+282    	; 0x2abe <SWC2_Application+0x180>
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	83 30       	cpi	r24, 0x03	; 3
    29aa:	91 05       	cpc	r25, r1
    29ac:	a1 f1       	breq	.+104    	; 0x2a16 <SWC2_Application+0xd8>
    29ae:	2b 81       	ldd	r18, Y+3	; 0x03
    29b0:	3c 81       	ldd	r19, Y+4	; 0x04
    29b2:	24 30       	cpi	r18, 0x04	; 4
    29b4:	31 05       	cpc	r19, r1
    29b6:	91 f1       	breq	.+100    	; 0x2a1c <SWC2_Application+0xde>
    29b8:	82 c0       	rjmp	.+260    	; 0x2abe <SWC2_Application+0x180>
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	88 30       	cpi	r24, 0x08	; 8
    29c0:	91 05       	cpc	r25, r1
    29c2:	d1 f1       	breq	.+116    	; 0x2a38 <SWC2_Application+0xfa>
    29c4:	2b 81       	ldd	r18, Y+3	; 0x03
    29c6:	3c 81       	ldd	r19, Y+4	; 0x04
    29c8:	29 30       	cpi	r18, 0x09	; 9
    29ca:	31 05       	cpc	r19, r1
    29cc:	5c f4       	brge	.+22     	; 0x29e4 <SWC2_Application+0xa6>
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	86 30       	cpi	r24, 0x06	; 6
    29d4:	91 05       	cpc	r25, r1
    29d6:	51 f1       	breq	.+84     	; 0x2a2c <SWC2_Application+0xee>
    29d8:	2b 81       	ldd	r18, Y+3	; 0x03
    29da:	3c 81       	ldd	r19, Y+4	; 0x04
    29dc:	27 30       	cpi	r18, 0x07	; 7
    29de:	31 05       	cpc	r19, r1
    29e0:	41 f1       	breq	.+80     	; 0x2a32 <SWC2_Application+0xf4>
    29e2:	6d c0       	rjmp	.+218    	; 0x2abe <SWC2_Application+0x180>
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	8a 30       	cpi	r24, 0x0A	; 10
    29ea:	91 05       	cpc	r25, r1
    29ec:	59 f1       	breq	.+86     	; 0x2a44 <SWC2_Application+0x106>
    29ee:	2b 81       	ldd	r18, Y+3	; 0x03
    29f0:	3c 81       	ldd	r19, Y+4	; 0x04
    29f2:	2a 30       	cpi	r18, 0x0A	; 10
    29f4:	31 05       	cpc	r19, r1
    29f6:	1c f1       	brlt	.+70     	; 0x2a3e <SWC2_Application+0x100>
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	8f 30       	cpi	r24, 0x0F	; 15
    29fe:	91 05       	cpc	r25, r1
    2a00:	21 f1       	breq	.+72     	; 0x2a4a <SWC2_Application+0x10c>
    2a02:	5d c0       	rjmp	.+186    	; 0x2abe <SWC2_Application+0x180>
		{
		case WelcomeInATM:
			APP_WelcomeInATM();
    2a04:	0e 94 80 19 	call	0x3300	; 0x3300 <APP_WelcomeInATM>
    2a08:	5e c0       	rjmp	.+188    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case EnterID:
			APP_EnterID();
    2a0a:	0e 94 9e 19 	call	0x333c	; 0x333c <APP_EnterID>
    2a0e:	5b c0       	rjmp	.+182    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case SignInEnterPassword:
			APP_SignInEnterPassword();
    2a10:	0e 94 18 1a 	call	0x3430	; 0x3430 <APP_SignInEnterPassword>
    2a14:	58 c0       	rjmp	.+176    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case SignUpEnterPassword:
			APP_SignUpEnterPassword();
    2a16:	0e 94 84 1a 	call	0x3508	; 0x3508 <APP_SignUpEnterPassword>
    2a1a:	55 c0       	rjmp	.+170    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case ConfirmPassword:
			APP_ConfirmPassword();
    2a1c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <APP_ConfirmPassword>
    2a20:	52 c0       	rjmp	.+164    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case NewAccount:
			HandleState(WelcomeInATM, NoError);
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    2a2a:	4d c0       	rjmp	.+154    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case Account:
			APP_Account();
    2a2c:	0e 94 87 1b 	call	0x370e	; 0x370e <APP_Account>
    2a30:	4a c0       	rjmp	.+148    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case CashWithdraw:
			APP_CashWithdraw();
    2a32:	0e 94 b1 1b 	call	0x3762	; 0x3762 <APP_CashWithdraw>
    2a36:	47 c0       	rjmp	.+142    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case OtherServices:
			APP_OtherServices();
    2a38:	0e 94 10 1c 	call	0x3820	; 0x3820 <APP_OtherServices>
    2a3c:	44 c0       	rjmp	.+136    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case CashWithdraw_Service:
			APP_CashWithdraw_Service();
    2a3e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <APP_CashWithdraw_Service>
    2a42:	41 c0       	rjmp	.+130    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case CreditDeposit_Service:
			APP_CreditDeposit_Service();
    2a44:	0e 94 7e 22 	call	0x44fc	; 0x44fc <APP_CreditDeposit_Service>
    2a48:	3e c0       	rjmp	.+124    	; 0x2ac6 <SWC2_Application+0x188>
			break;
		case Error:
			switch(ERROR)
    2a4a:	80 91 9c 04 	lds	r24, 0x049C
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	3a 83       	std	Y+2, r19	; 0x02
    2a54:	29 83       	std	Y+1, r18	; 0x01
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	01 f1       	breq	.+64     	; 0x2aa0 <SWC2_Application+0x162>
    2a60:	29 81       	ldd	r18, Y+1	; 0x01
    2a62:	3a 81       	ldd	r19, Y+2	; 0x02
    2a64:	24 30       	cpi	r18, 0x04	; 4
    2a66:	31 05       	cpc	r19, r1
    2a68:	34 f4       	brge	.+12     	; 0x2a76 <SWC2_Application+0x138>
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	91 05       	cpc	r25, r1
    2a72:	61 f0       	breq	.+24     	; 0x2a8c <SWC2_Application+0x14e>
    2a74:	1f c0       	rjmp	.+62     	; 0x2ab4 <SWC2_Application+0x176>
    2a76:	29 81       	ldd	r18, Y+1	; 0x01
    2a78:	3a 81       	ldd	r19, Y+2	; 0x02
    2a7a:	26 30       	cpi	r18, 0x06	; 6
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	a9 f0       	breq	.+42     	; 0x2aaa <SWC2_Application+0x16c>
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	87 30       	cpi	r24, 0x07	; 7
    2a86:	91 05       	cpc	r25, r1
    2a88:	31 f0       	breq	.+12     	; 0x2a96 <SWC2_Application+0x158>
    2a8a:	14 c0       	rjmp	.+40     	; 0x2ab4 <SWC2_Application+0x176>
			{
			case SignInWrongPassword:
				HandleState(SignInEnterPassword, NoError);
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    2a94:	18 c0       	rjmp	.+48     	; 0x2ac6 <SWC2_Application+0x188>
				break;
			case Mismatch:
				HandleState(SignUpEnterPassword, NoError);
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    2a9e:	13 c0       	rjmp	.+38     	; 0x2ac6 <SWC2_Application+0x188>
				break;
			case MaxAmountPerTransaction:
				HandleState(Account, NoError);
    2aa0:	86 e0       	ldi	r24, 0x06	; 6
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    2aa8:	0e c0       	rjmp	.+28     	; 0x2ac6 <SWC2_Application+0x188>
				break;
			case NoCash:
				HandleState(Account, NoError);
    2aaa:	86 e0       	ldi	r24, 0x06	; 6
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    2ab2:	09 c0       	rjmp	.+18     	; 0x2ac6 <SWC2_Application+0x188>
				break;
			default:
				HandleState(WelcomeInATM, NoError);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <SWC2_Application+0x188>
				break;
			}
			break;
		default:
			HandleState(Account, NoError);
    2abe:	86 e0       	ldi	r24, 0x06	; 6
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
			break;
		}
	}
	KeypadChar = NULL_CHAR;
    2ac6:	81 e4       	ldi	r24, 0x41	; 65
    2ac8:	80 93 a5 04 	sts	0x04A5, r24
}
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <SWC3_Keypad>:

void SWC3_Keypad(void)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	if(SWC3_SystemTick == 0)
    2ae2:	80 91 98 04 	lds	r24, 0x0498
    2ae6:	88 23       	and	r24, r24
    2ae8:	61 f5       	brne	.+88     	; 0x2b42 <SWC3_Keypad+0x68>
	{
		KeypadChar = KEYPAD_GetStatus();
    2aea:	0e 94 18 30 	call	0x6030	; 0x6030 <KEYPAD_GetStatus>
    2aee:	80 93 a5 04 	sts	0x04A5, r24
		if((KeypadChar >= '0' && KeypadChar <= '9') || (KeypadChar == '%') || \
    2af2:	80 91 a5 04 	lds	r24, 0x04A5
    2af6:	80 33       	cpi	r24, 0x30	; 48
    2af8:	20 f0       	brcs	.+8      	; 0x2b02 <SWC3_Keypad+0x28>
    2afa:	80 91 a5 04 	lds	r24, 0x04A5
    2afe:	8a 33       	cpi	r24, 0x3A	; 58
    2b00:	c0 f0       	brcs	.+48     	; 0x2b32 <SWC3_Keypad+0x58>
    2b02:	80 91 a5 04 	lds	r24, 0x04A5
    2b06:	85 32       	cpi	r24, 0x25	; 37
    2b08:	a1 f0       	breq	.+40     	; 0x2b32 <SWC3_Keypad+0x58>
    2b0a:	80 91 a5 04 	lds	r24, 0x04A5
    2b0e:	8a 32       	cpi	r24, 0x2A	; 42
    2b10:	81 f0       	breq	.+32     	; 0x2b32 <SWC3_Keypad+0x58>
    2b12:	80 91 a5 04 	lds	r24, 0x04A5
    2b16:	8d 32       	cpi	r24, 0x2D	; 45
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <SWC3_Keypad+0x58>
    2b1a:	80 91 a5 04 	lds	r24, 0x04A5
    2b1e:	8b 32       	cpi	r24, 0x2B	; 43
    2b20:	41 f0       	breq	.+16     	; 0x2b32 <SWC3_Keypad+0x58>
    2b22:	80 91 a5 04 	lds	r24, 0x04A5
    2b26:	8d 33       	cpi	r24, 0x3D	; 61
    2b28:	21 f0       	breq	.+8      	; 0x2b32 <SWC3_Keypad+0x58>
    2b2a:	80 91 a5 04 	lds	r24, 0x04A5
    2b2e:	83 34       	cpi	r24, 0x43	; 67
    2b30:	29 f4       	brne	.+10     	; 0x2b3c <SWC3_Keypad+0x62>
				(KeypadChar == '*') || (KeypadChar == '-') || \
				(KeypadChar == '+') || (KeypadChar == '=') || \
				(KeypadChar == 'C'))
		{
			TimeOutTick = 0;
    2b32:	10 92 8a 04 	sts	0x048A, r1
    2b36:	10 92 89 04 	sts	0x0489, r1
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <SWC3_Keypad+0x68>
		}
		else
		{
			KeypadChar = NULL_CHAR;
    2b3c:	81 e4       	ldi	r24, 0x41	; 65
    2b3e:	80 93 a5 04 	sts	0x04A5, r24
		}
	}
}
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <SWC4_LCD>:

void SWC4_LCD(void)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <SWC4_LCD+0x6>
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
	if(LCD_PrintCharFlag == TRUE)
    2b52:	80 91 97 04 	lds	r24, 0x0497
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	31 f4       	brne	.+12     	; 0x2b66 <SWC4_LCD+0x1e>
	{
		LCD_SendCharacter(LCD_Char);
    2b5a:	80 91 96 04 	lds	r24, 0x0496
    2b5e:	0e 94 2b 33 	call	0x6656	; 0x6656 <LCD_SendCharacter>
		LCD_PrintCharFlag = FALSE;
    2b62:	10 92 97 04 	sts	0x0497, r1
	}

	if(LCD_ModificationFlag == TRUE)
    2b66:	80 91 9d 04 	lds	r24, 0x049D
    2b6a:	88 23       	and	r24, r24
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <SWC4_LCD+0x28>
    2b6e:	98 c0       	rjmp	.+304    	; 0x2ca0 <SWC4_LCD+0x158>
	{
		LCD_ClearScreen();
    2b70:	0e 94 89 36 	call	0x6d12	; 0x6d12 <LCD_ClearScreen>
		switch(CurrentState)
    2b74:	80 91 ac 04 	lds	r24, 0x04AC
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	3a 83       	std	Y+2, r19	; 0x02
    2b7e:	29 83       	std	Y+1, r18	; 0x01
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	87 30       	cpi	r24, 0x07	; 7
    2b86:	91 05       	cpc	r25, r1
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <SWC4_LCD+0x44>
    2b8a:	71 c0       	rjmp	.+226    	; 0x2c6e <SWC4_LCD+0x126>
    2b8c:	29 81       	ldd	r18, Y+1	; 0x01
    2b8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b90:	28 30       	cpi	r18, 0x08	; 8
    2b92:	31 05       	cpc	r19, r1
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <SWC4_LCD+0xa0>
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	83 30       	cpi	r24, 0x03	; 3
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <SWC4_LCD+0x5a>
    2ba0:	57 c0       	rjmp	.+174    	; 0x2c50 <SWC4_LCD+0x108>
    2ba2:	29 81       	ldd	r18, Y+1	; 0x01
    2ba4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba6:	24 30       	cpi	r18, 0x04	; 4
    2ba8:	31 05       	cpc	r19, r1
    2baa:	8c f4       	brge	.+34     	; 0x2bce <SWC4_LCD+0x86>
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <SWC4_LCD+0x70>
    2bb6:	46 c0       	rjmp	.+140    	; 0x2c44 <SWC4_LCD+0xfc>
    2bb8:	29 81       	ldd	r18, Y+1	; 0x01
    2bba:	3a 81       	ldd	r19, Y+2	; 0x02
    2bbc:	22 30       	cpi	r18, 0x02	; 2
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <SWC4_LCD+0x7c>
    2bc2:	43 c0       	rjmp	.+134    	; 0x2c4a <SWC4_LCD+0x102>
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	c9 f1       	breq	.+114    	; 0x2c3e <SWC4_LCD+0xf6>
    2bcc:	67 c0       	rjmp	.+206    	; 0x2c9c <SWC4_LCD+0x154>
    2bce:	29 81       	ldd	r18, Y+1	; 0x01
    2bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd2:	25 30       	cpi	r18, 0x05	; 5
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <SWC4_LCD+0x92>
    2bd8:	41 c0       	rjmp	.+130    	; 0x2c5c <SWC4_LCD+0x114>
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	86 30       	cpi	r24, 0x06	; 6
    2be0:	91 05       	cpc	r25, r1
    2be2:	0c f0       	brlt	.+2      	; 0x2be6 <SWC4_LCD+0x9e>
    2be4:	3e c0       	rjmp	.+124    	; 0x2c62 <SWC4_LCD+0x11a>
    2be6:	37 c0       	rjmp	.+110    	; 0x2c56 <SWC4_LCD+0x10e>
    2be8:	29 81       	ldd	r18, Y+1	; 0x01
    2bea:	3a 81       	ldd	r19, Y+2	; 0x02
    2bec:	2b 30       	cpi	r18, 0x0B	; 11
    2bee:	31 05       	cpc	r19, r1
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <SWC4_LCD+0xac>
    2bf2:	4f c0       	rjmp	.+158    	; 0x2c92 <SWC4_LCD+0x14a>
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	8c 30       	cpi	r24, 0x0C	; 12
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	5c f4       	brge	.+22     	; 0x2c14 <SWC4_LCD+0xcc>
    2bfe:	29 81       	ldd	r18, Y+1	; 0x01
    2c00:	3a 81       	ldd	r19, Y+2	; 0x02
    2c02:	29 30       	cpi	r18, 0x09	; 9
    2c04:	31 05       	cpc	r19, r1
    2c06:	81 f1       	breq	.+96     	; 0x2c68 <SWC4_LCD+0x120>
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	8a 30       	cpi	r24, 0x0A	; 10
    2c0e:	91 05       	cpc	r25, r1
    2c10:	a4 f5       	brge	.+104    	; 0x2c7a <SWC4_LCD+0x132>
    2c12:	30 c0       	rjmp	.+96     	; 0x2c74 <SWC4_LCD+0x12c>
    2c14:	29 81       	ldd	r18, Y+1	; 0x01
    2c16:	3a 81       	ldd	r19, Y+2	; 0x02
    2c18:	2d 30       	cpi	r18, 0x0D	; 13
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	a1 f1       	breq	.+104    	; 0x2c86 <SWC4_LCD+0x13e>
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	8d 30       	cpi	r24, 0x0D	; 13
    2c24:	91 05       	cpc	r25, r1
    2c26:	64 f1       	brlt	.+88     	; 0x2c80 <SWC4_LCD+0x138>
    2c28:	29 81       	ldd	r18, Y+1	; 0x01
    2c2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c2c:	2e 30       	cpi	r18, 0x0E	; 14
    2c2e:	31 05       	cpc	r19, r1
    2c30:	69 f1       	breq	.+90     	; 0x2c8c <SWC4_LCD+0x144>
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	8f 30       	cpi	r24, 0x0F	; 15
    2c38:	91 05       	cpc	r25, r1
    2c3a:	71 f1       	breq	.+92     	; 0x2c98 <SWC4_LCD+0x150>
    2c3c:	2f c0       	rjmp	.+94     	; 0x2c9c <SWC4_LCD+0x154>
		{
		case WelcomeInATM:
			LCD_WelcomeInATM();
    2c3e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_WelcomeInATM>
    2c42:	2c c0       	rjmp	.+88     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case EnterID:
			LCD_EnterID();
    2c44:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_EnterID>
    2c48:	29 c0       	rjmp	.+82     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case SignInEnterPassword:
			LCD_EnterPassword();
    2c4a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_EnterPassword>
    2c4e:	26 c0       	rjmp	.+76     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case SignUpEnterPassword:
			LCD_EnterPassword();
    2c50:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_EnterPassword>
    2c54:	23 c0       	rjmp	.+70     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case ConfirmPassword:
			LCD_ConfirmPassword();
    2c56:	0e 94 43 17 	call	0x2e86	; 0x2e86 <LCD_ConfirmPassword>
    2c5a:	20 c0       	rjmp	.+64     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case NewAccount:
			LCD_NewAccount();
    2c5c:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_NewAccount>
    2c60:	1d c0       	rjmp	.+58     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case Account:
			LCD_Account();
    2c62:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_Account>
    2c66:	1a c0       	rjmp	.+52     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case CashWithdraw_Service:
			LCD_CashWithdraw_Service();
    2c68:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_CashWithdraw_Service>
    2c6c:	17 c0       	rjmp	.+46     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case CashWithdraw:
			LCD_CashWithdraw();
    2c6e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_CashWithdraw>
    2c72:	14 c0       	rjmp	.+40     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case OtherServices:
			LCD_OtherServices();
    2c74:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_OtherServices>
    2c78:	11 c0       	rjmp	.+34     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case CreditDeposit_Service:
			LCD_CreditDeposit_Service();
    2c7a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <LCD_CreditDeposit_Service>
    2c7e:	0e c0       	rjmp	.+28     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case CashWithdraw_Response:
			LCD_CashWithdraw_Response();
    2c80:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_CashWithdraw_Response>
    2c84:	0b c0       	rjmp	.+22     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case CreditInquiry_Response:
			LCD_CreditInquiry_Response();
    2c86:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_CreditInquiry_Response>
    2c8a:	08 c0       	rjmp	.+16     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case CreditDeposit_Response:
			LCD_CreditDeposit_Response();
    2c8c:	0e 94 56 18 	call	0x30ac	; 0x30ac <LCD_CreditDeposit_Response>
    2c90:	05 c0       	rjmp	.+10     	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case ChangePassword_Response:
			LCD_ChangePassword_Response();
    2c92:	0e 94 79 18 	call	0x30f2	; 0x30f2 <LCD_ChangePassword_Response>
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <SWC4_LCD+0x154>
			break;
		case Error:
			LCD_Error();
    2c98:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_Error>
			break;
		default:
			//error message
			break;
		}
		LCD_ModificationFlag = FALSE;
    2c9c:	10 92 9d 04 	sts	0x049D, r1
	}
}
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <SWC5_Restart>:

void SWC5_Restart(void)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
	if(RestartButton() == TRUE)
    2cb2:	8b e1       	ldi	r24, 0x1B	; 27
    2cb4:	0e 94 98 2c 	call	0x5930	; 0x5930 <DIO_ReadChannel>
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	11 f5       	brne	.+68     	; 0x2d00 <SWC5_Restart+0x56>
	{
		if(Restart() != E_OK)
    2cbc:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <Restart>
    2cc0:	88 23       	and	r24, r24
    2cc2:	81 f0       	breq	.+32     	; 0x2ce4 <SWC5_Restart+0x3a>
		{
			SWC2_SystemTick = StandardDelay;
    2cc4:	8e e1       	ldi	r24, 0x1E	; 30
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	90 93 9b 04 	sts	0x049B, r25
    2ccc:	80 93 9a 04 	sts	0x049A, r24
			LCD_ModificationFlag = TRUE;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 9d 04 	sts	0x049D, r24
			CurrentState = Error;
    2cd6:	8f e0       	ldi	r24, 0x0F	; 15
    2cd8:	80 93 ac 04 	sts	0x04AC, r24
			ERROR = UnsuccessfulTransaction;
    2cdc:	85 e0       	ldi	r24, 0x05	; 5
    2cde:	80 93 9c 04 	sts	0x049C, r24
    2ce2:	0e c0       	rjmp	.+28     	; 0x2d00 <SWC5_Restart+0x56>
		}
		else
		{
			ID_Counter = 0;
    2ce4:	10 92 ab 04 	sts	0x04AB, r1
			eeprom_update_byte(ID_Counter_Address, ID_Counter);
    2ce8:	20 91 ab 04 	lds	r18, 0x04AB
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	62 2f       	mov	r22, r18
    2cf2:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <__eeupd_byte_m32>
			LCD_ModificationFlag = TRUE;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	80 93 9d 04 	sts	0x049D, r24
			CurrentState = WelcomeInATM;
    2cfc:	10 92 ac 04 	sts	0x04AC, r1
		}
	}
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <SWC6_LED>:

void SWC6_LED(void)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	if(SWC2_SystemTick == 0)
    2d0e:	80 91 9a 04 	lds	r24, 0x049A
    2d12:	90 91 9b 04 	lds	r25, 0x049B
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	39 f4       	brne	.+14     	; 0x2d28 <SWC6_LED+0x22>
	{
		TurnOnLED(GreenLed);
    2d1a:	86 e1       	ldi	r24, 0x16	; 22
    2d1c:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
		TurnOffLED(RedLed);
    2d20:	87 e1       	ldi	r24, 0x17	; 23
    2d22:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    2d26:	06 c0       	rjmp	.+12     	; 0x2d34 <SWC6_LED+0x2e>
	}
	else
	{
		TurnOnLED(RedLed);
    2d28:	87 e1       	ldi	r24, 0x17	; 23
    2d2a:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
		TurnOffLED(GreenLed);
    2d2e:	86 e1       	ldi	r24, 0x16	; 22
    2d30:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
	}
}
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <SWC7_CashGate>:

void SWC7_CashGate(void)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	if(SWC7_SystemTick == 0 && GateState == OPEN)
    2d42:	80 91 a4 04 	lds	r24, 0x04A4
    2d46:	88 23       	and	r24, r24
    2d48:	71 f4       	brne	.+28     	; 0x2d66 <SWC7_CashGate+0x2c>
    2d4a:	80 91 9e 04 	lds	r24, 0x049E
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	51 f4       	brne	.+20     	; 0x2d66 <SWC7_CashGate+0x2c>
	{
		MotorClockWise();
    2d52:	80 e1       	ldi	r24, 0x10	; 16
    2d54:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    2d58:	81 e1       	ldi	r24, 0x11	; 17
    2d5a:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
		SWC7_SystemTick = CashGateDelay;
    2d5e:	82 e3       	ldi	r24, 0x32	; 50
    2d60:	80 93 a4 04 	sts	0x04A4, r24
    2d64:	31 c0       	rjmp	.+98     	; 0x2dc8 <SWC7_CashGate+0x8e>
	}
	else if(SWC7_SystemTick == (CashGateDelay - 10) && GateState == OPEN)
    2d66:	80 91 a4 04 	lds	r24, 0x04A4
    2d6a:	88 32       	cpi	r24, 0x28	; 40
    2d6c:	71 f4       	brne	.+28     	; 0x2d8a <SWC7_CashGate+0x50>
    2d6e:	80 91 9e 04 	lds	r24, 0x049E
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	51 f4       	brne	.+20     	; 0x2d8a <SWC7_CashGate+0x50>
	{
		MotorStop();
    2d76:	80 e1       	ldi	r24, 0x10	; 16
    2d78:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    2d7c:	81 e1       	ldi	r24, 0x11	; 17
    2d7e:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
		GateState = CLOSE;
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	80 93 9e 04 	sts	0x049E, r24
    2d88:	1f c0       	rjmp	.+62     	; 0x2dc8 <SWC7_CashGate+0x8e>
	}
	else if(SWC7_SystemTick == 10 && GateState == CLOSE)
    2d8a:	80 91 a4 04 	lds	r24, 0x04A4
    2d8e:	8a 30       	cpi	r24, 0x0A	; 10
    2d90:	59 f4       	brne	.+22     	; 0x2da8 <SWC7_CashGate+0x6e>
    2d92:	80 91 9e 04 	lds	r24, 0x049E
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	39 f4       	brne	.+14     	; 0x2da8 <SWC7_CashGate+0x6e>
	{
		MotorAntiClockWise();
    2d9a:	80 e1       	ldi	r24, 0x10	; 16
    2d9c:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
    2da0:	81 e1       	ldi	r24, 0x11	; 17
    2da2:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    2da6:	10 c0       	rjmp	.+32     	; 0x2dc8 <SWC7_CashGate+0x8e>
	}
	else if(SWC7_SystemTick == 0 && GateState == CLOSE)
    2da8:	80 91 a4 04 	lds	r24, 0x04A4
    2dac:	88 23       	and	r24, r24
    2dae:	61 f4       	brne	.+24     	; 0x2dc8 <SWC7_CashGate+0x8e>
    2db0:	80 91 9e 04 	lds	r24, 0x049E
    2db4:	82 30       	cpi	r24, 0x02	; 2
    2db6:	41 f4       	brne	.+16     	; 0x2dc8 <SWC7_CashGate+0x8e>
	{
		MotorStop();
    2db8:	80 e1       	ldi	r24, 0x10	; 16
    2dba:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    2dbe:	81 e1       	ldi	r24, 0x11	; 17
    2dc0:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
		GateState = GATE_NULL;
    2dc4:	10 92 9e 04 	sts	0x049E, r1
	}
	else
	{

	}
}
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <ATM_Init>:
extern sint8 ConfirmedPassword[PassSize];
extern uint8 ID_Counter;
extern uint8 GateState;


void ATM_Init(void){
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
	ATM_MC_Init();
    2dd6:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <ATM_MC_Init>
	ATM_HW_Init();
    2dda:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <ATM_HW_Init>
}
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LCD_WelcomeInATM>:

void LCD_WelcomeInATM(void)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Welcome in ATM");
    2dec:	80 e6       	ldi	r24, 0x60	; 96
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("1 Access account");
    2dfc:	8f e6       	ldi	r24, 0x6F	; 111
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("2 Create account");
    2e0c:	80 e8       	ldi	r24, 0x80	; 128
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <LCD_EnterID>:

void LCD_EnterID(void)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Enter your ID");
    2e22:	81 e9       	ldi	r24, 0x91	; 145
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2e2a:	83 e0       	ldi	r24, 0x03	; 3
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("          Exit -");
    2e32:	8f e9       	ldi	r24, 0x9F	; 159
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LCD_EnterPassword>:

void LCD_EnterPassword(void)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Please enter 4");
    2e50:	80 eb       	ldi	r24, 0xB0	; 176
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("digit password");
    2e60:	8f eb       	ldi	r24, 0xBF	; 191
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("          Exit -");
    2e70:	8f e9       	ldi	r24, 0x9F	; 159
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    2e78:	82 e0       	ldi	r24, 0x02	; 2
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
}
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <LCD_ConfirmPassword>:

void LCD_ConfirmPassword(void)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Please rewrite");
    2e8e:	8e ec       	ldi	r24, 0xCE	; 206
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("password");
    2e9e:	8d ed       	ldi	r24, 0xDD	; 221
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2ea6:	83 e0       	ldi	r24, 0x03	; 3
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("          Exit -");
    2eae:	8f e9       	ldi	r24, 0x9F	; 159
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
}
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <LCD_NewAccount>:

void LCD_NewAccount(void)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Welcome In ATM");
    2ecc:	86 ee       	ldi	r24, 0xE6	; 230
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	60 e0       	ldi	r22, 0x00	; 0
    2ed8:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("Your ID: ");
    2edc:	85 ef       	ldi	r24, 0xF5	; 245
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SendString(CurrentClient.ID);
    2ee4:	8a eb       	ldi	r24, 0xBA	; 186
    2ee6:	94 e0       	ldi	r25, 0x04	; 4
    2ee8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <LCD_Account>:

void LCD_Account(void)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("1 Cash withdraw");
    2efa:	8f ef       	ldi	r24, 0xFF	; 255
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("2 Other Services");
    2f0a:	8f e0       	ldi	r24, 0x0F	; 15
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2f12:	83 e0       	ldi	r24, 0x03	; 3
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("          Exit 3");
    2f1a:	80 e2       	ldi	r24, 0x20	; 32
    2f1c:	91 e0       	ldi	r25, 0x01	; 1
    2f1e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <LCD_CashWithdraw>:

void LCD_CashWithdraw(void)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("1 100      200 2");
    2f30:	81 e3       	ldi	r24, 0x31	; 49
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("3 500     1000 4");
    2f40:	82 e4       	ldi	r24, 0x42	; 66
    2f42:	91 e0       	ldi	r25, 0x01	; 1
    2f44:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("5 2000    5000 6");
    2f50:	83 e5       	ldi	r24, 0x53	; 83
    2f52:	91 e0       	ldi	r25, 0x01	; 1
    2f54:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2f58:	83 e0       	ldi	r24, 0x03	; 3
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("          Exit -");
    2f60:	8f e9       	ldi	r24, 0x9F	; 159
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <LCD_CashWithdraw_Service>:

void LCD_CashWithdraw_Service(void)
{
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Enter amount of");
    2f76:	84 e6       	ldi	r24, 0x64	; 100
    2f78:	91 e0       	ldi	r25, 0x01	; 1
    2f7a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	60 e0       	ldi	r22, 0x00	; 0
    2f82:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("cash and press C");
    2f86:	84 e7       	ldi	r24, 0x74	; 116
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("Max amount ");
    2f96:	85 e8       	ldi	r24, 0x85	; 133
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SendString(MaxAmountOfCash_String);
    2f9e:	81 e9       	ldi	r24, 0x91	; 145
    2fa0:	91 e0       	ldi	r25, 0x01	; 1
    2fa2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    2fa6:	82 e0       	ldi	r24, 0x02	; 2
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
}
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <LCD_OtherServices>:

void LCD_OtherServices(void)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("1 Cash withdraw");
    2fbc:	8f ef       	ldi	r24, 0xFF	; 255
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("2 Cash deposit");
    2fcc:	86 e9       	ldi	r24, 0x96	; 150
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("3 Cash inquiry");
    2fdc:	85 ea       	ldi	r24, 0xA5	; 165
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    2fe4:	83 e0       	ldi	r24, 0x03	; 3
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("4 Change password");
    2fec:	84 eb       	ldi	r24, 0xB4	; 180
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <LCD_CreditDeposit_Service>:

void LCD_CreditDeposit_Service(void)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Enter amount of");
    3002:	84 e6       	ldi	r24, 0x64	; 100
    3004:	91 e0       	ldi	r25, 0x01	; 1
    3006:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("cash and press C");
    3012:	84 e7       	ldi	r24, 0x74	; 116
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("Max amount ");
    3022:	85 e8       	ldi	r24, 0x85	; 133
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SendString(MaxAmountOfCash_String);
    302a:	81 e9       	ldi	r24, 0x91	; 145
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <LCD_CashWithdraw_Response>:

void LCD_CashWithdraw_Response(void)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("You have now:");
    3048:	86 ec       	ldi	r24, 0xC6	; 198
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString(CurrentClient.Cash);
    3058:	8d ea       	ldi	r24, 0xAD	; 173
    305a:	94 e0       	ldi	r25, 0x04	; 4
    305c:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("Please wait for");
    3068:	84 ed       	ldi	r24, 0xD4	; 212
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    3070:	83 e0       	ldi	r24, 0x03	; 3
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("the money");
    3078:	84 ee       	ldi	r24, 0xE4	; 228
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <LCD_CreditInquiry_Response>:

void LCD_CreditInquiry_Response(void)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("You have now:");
    308e:	86 ec       	ldi	r24, 0xC6	; 198
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString(CurrentClient.Cash);
    309e:	8d ea       	ldi	r24, 0xAD	; 173
    30a0:	94 e0       	ldi	r25, 0x04	; 4
    30a2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <LCD_CreditDeposit_Response>:

void LCD_CreditDeposit_Response(void)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Your transaction");
    30b4:	8e ee       	ldi	r24, 0xEE	; 238
    30b6:	91 e0       	ldi	r25, 0x01	; 1
    30b8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("is completed");
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("You have now:");
    30d4:	86 ec       	ldi	r24, 0xC6	; 198
    30d6:	91 e0       	ldi	r25, 0x01	; 1
    30d8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(3, 0);
    30dc:	83 e0       	ldi	r24, 0x03	; 3
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString(CurrentClient.Cash);
    30e4:	8d ea       	ldi	r24, 0xAD	; 173
    30e6:	94 e0       	ldi	r25, 0x04	; 4
    30e8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <LCD_ChangePassword_Response>:

void LCD_ChangePassword_Response(void)
{
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
	LCD_SendString("Your Password is");
    30fa:	8c e0       	ldi	r24, 0x0C	; 12
    30fc:	92 e0       	ldi	r25, 0x02	; 2
    30fe:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(1, 0);
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("successfully");
    310a:	8d e1       	ldi	r24, 0x1D	; 29
    310c:	92 e0       	ldi	r25, 0x02	; 2
    310e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
	LCD_SetCursor(2, 0);
    3112:	82 e0       	ldi	r24, 0x02	; 2
    3114:	60 e0       	ldi	r22, 0x00	; 0
    3116:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
	LCD_SendString("Changed");
    311a:	8a e2       	ldi	r24, 0x2A	; 42
    311c:	92 e0       	ldi	r25, 0x02	; 2
    311e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <LCD_Error>:

void LCD_Error(void)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	00 d0       	rcall	.+0      	; 0x312e <LCD_Error+0x6>
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
	switch(ERROR)
    3132:	80 91 9c 04 	lds	r24, 0x049C
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	3a 83       	std	Y+2, r19	; 0x02
    313c:	29 83       	std	Y+1, r18	; 0x01
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	84 30       	cpi	r24, 0x04	; 4
    3144:	91 05       	cpc	r25, r1
    3146:	09 f4       	brne	.+2      	; 0x314a <LCD_Error+0x22>
    3148:	6e c0       	rjmp	.+220    	; 0x3226 <LCD_Error+0xfe>
    314a:	29 81       	ldd	r18, Y+1	; 0x01
    314c:	3a 81       	ldd	r19, Y+2	; 0x02
    314e:	25 30       	cpi	r18, 0x05	; 5
    3150:	31 05       	cpc	r19, r1
    3152:	8c f4       	brge	.+34     	; 0x3176 <LCD_Error+0x4e>
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	9a 81       	ldd	r25, Y+2	; 0x02
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	91 05       	cpc	r25, r1
    315c:	29 f1       	breq	.+74     	; 0x31a8 <LCD_Error+0x80>
    315e:	29 81       	ldd	r18, Y+1	; 0x01
    3160:	3a 81       	ldd	r19, Y+2	; 0x02
    3162:	23 30       	cpi	r18, 0x03	; 3
    3164:	31 05       	cpc	r19, r1
    3166:	0c f0       	brlt	.+2      	; 0x316a <LCD_Error+0x42>
    3168:	41 c0       	rjmp	.+130    	; 0x31ec <LCD_Error+0xc4>
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	91 05       	cpc	r25, r1
    3172:	b9 f1       	breq	.+110    	; 0x31e2 <LCD_Error+0xba>
    3174:	c0 c0       	rjmp	.+384    	; 0x32f6 <LCD_Error+0x1ce>
    3176:	29 81       	ldd	r18, Y+1	; 0x01
    3178:	3a 81       	ldd	r19, Y+2	; 0x02
    317a:	26 30       	cpi	r18, 0x06	; 6
    317c:	31 05       	cpc	r19, r1
    317e:	09 f4       	brne	.+2      	; 0x3182 <LCD_Error+0x5a>
    3180:	a6 c0       	rjmp	.+332    	; 0x32ce <LCD_Error+0x1a6>
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	9a 81       	ldd	r25, Y+2	; 0x02
    3186:	86 30       	cpi	r24, 0x06	; 6
    3188:	91 05       	cpc	r25, r1
    318a:	0c f4       	brge	.+2      	; 0x318e <LCD_Error+0x66>
    318c:	8b c0       	rjmp	.+278    	; 0x32a4 <LCD_Error+0x17c>
    318e:	29 81       	ldd	r18, Y+1	; 0x01
    3190:	3a 81       	ldd	r19, Y+2	; 0x02
    3192:	27 30       	cpi	r18, 0x07	; 7
    3194:	31 05       	cpc	r19, r1
    3196:	09 f4       	brne	.+2      	; 0x319a <LCD_Error+0x72>
    3198:	70 c0       	rjmp	.+224    	; 0x327a <LCD_Error+0x152>
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	88 30       	cpi	r24, 0x08	; 8
    31a0:	91 05       	cpc	r25, r1
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <LCD_Error+0x7e>
    31a4:	4d c0       	rjmp	.+154    	; 0x3240 <LCD_Error+0x118>
    31a6:	a7 c0       	rjmp	.+334    	; 0x32f6 <LCD_Error+0x1ce>
	{
	case ThreeWrongPassword:
		LCD_SendString("3 times wrong");
    31a8:	82 e3       	ldi	r24, 0x32	; 50
    31aa:	92 e0       	ldi	r25, 0x02	; 2
    31ac:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("password");
    31b8:	8d ed       	ldi	r24, 0xDD	; 221
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(2, 0);
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("The system halts");
    31c8:	80 e4       	ldi	r24, 0x40	; 64
    31ca:	92 e0       	ldi	r25, 0x02	; 2
    31cc:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(3, 0);
    31d0:	83 e0       	ldi	r24, 0x03	; 3
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("for 30 seconds");
    31d8:	81 e5       	ldi	r24, 0x51	; 81
    31da:	92 e0       	ldi	r25, 0x02	; 2
    31dc:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    31e0:	8a c0       	rjmp	.+276    	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case SignInWrongPassword:
		LCD_SendString(" Wrong Password");
    31e2:	80 e6       	ldi	r24, 0x60	; 96
    31e4:	92 e0       	ldi	r25, 0x02	; 2
    31e6:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    31ea:	85 c0       	rjmp	.+266    	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case MaxAmountPerTransaction:
		LCD_SendString("The amount of");
    31ec:	80 e7       	ldi	r24, 0x70	; 112
    31ee:	92 e0       	ldi	r25, 0x02	; 2
    31f0:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("cash you entered");
    31fc:	8e e7       	ldi	r24, 0x7E	; 126
    31fe:	92 e0       	ldi	r25, 0x02	; 2
    3200:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(2, 0);
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	60 e0       	ldi	r22, 0x00	; 0
    3208:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("exceeds the ");
    320c:	8f e8       	ldi	r24, 0x8F	; 143
    320e:	92 e0       	ldi	r25, 0x02	; 2
    3210:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(3, 0);
    3214:	83 e0       	ldi	r24, 0x03	; 3
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("maximum limit");
    321c:	8c e9       	ldi	r24, 0x9C	; 156
    321e:	92 e0       	ldi	r25, 0x02	; 2
    3220:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    3224:	68 c0       	rjmp	.+208    	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case WrongID:
		LCD_SendString("The ID is not");
    3226:	8a ea       	ldi	r24, 0xAA	; 170
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("valid");
    3236:	88 eb       	ldi	r24, 0xB8	; 184
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    323e:	5b c0       	rjmp	.+182    	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case Timeout:
		LCD_SendString("Timeout error:");
    3240:	8e eb       	ldi	r24, 0xBE	; 190
    3242:	92 e0       	ldi	r25, 0x02	; 2
    3244:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("ATM is not");
    3250:	8d ec       	ldi	r24, 0xCD	; 205
    3252:	92 e0       	ldi	r25, 0x02	; 2
    3254:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(2, 0);
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("receiving from");
    3260:	88 ed       	ldi	r24, 0xD8	; 216
    3262:	92 e0       	ldi	r25, 0x02	; 2
    3264:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(3, 0);
    3268:	83 e0       	ldi	r24, 0x03	; 3
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("you");
    3270:	87 ee       	ldi	r24, 0xE7	; 231
    3272:	92 e0       	ldi	r25, 0x02	; 2
    3274:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    3278:	3e c0       	rjmp	.+124    	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case Mismatch:
		LCD_SendString("The passwords");
    327a:	8b ee       	ldi	r24, 0xEB	; 235
    327c:	92 e0       	ldi	r25, 0x02	; 2
    327e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("you entered are");
    328a:	89 ef       	ldi	r24, 0xF9	; 249
    328c:	92 e0       	ldi	r25, 0x02	; 2
    328e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(2, 0);
    3292:	82 e0       	ldi	r24, 0x02	; 2
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("not identical");
    329a:	89 e0       	ldi	r24, 0x09	; 9
    329c:	93 e0       	ldi	r25, 0x03	; 3
    329e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    32a2:	29 c0       	rjmp	.+82     	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case UnsuccessfulTransaction:
		LCD_SendString("Unsuccessful");
    32a4:	87 e1       	ldi	r24, 0x17	; 23
    32a6:	93 e0       	ldi	r25, 0x03	; 3
    32a8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("Transaction,");
    32b4:	84 e2       	ldi	r24, 0x24	; 36
    32b6:	93 e0       	ldi	r25, 0x03	; 3
    32b8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(2, 0);
    32bc:	82 e0       	ldi	r24, 0x02	; 2
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("please try again");
    32c4:	81 e3       	ldi	r24, 0x31	; 49
    32c6:	93 e0       	ldi	r25, 0x03	; 3
    32c8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
    32cc:	14 c0       	rjmp	.+40     	; 0x32f6 <LCD_Error+0x1ce>
		break;
	case NoCash:
		LCD_SendString("The amount of");
    32ce:	80 e7       	ldi	r24, 0x70	; 112
    32d0:	92 e0       	ldi	r25, 0x02	; 2
    32d2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(1, 0);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("cash you entered");
    32de:	8e e7       	ldi	r24, 0x7E	; 126
    32e0:	92 e0       	ldi	r25, 0x02	; 2
    32e2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		LCD_SetCursor(2, 0);
    32e6:	82 e0       	ldi	r24, 0x02	; 2
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
		LCD_SendString("is not available");
    32ee:	82 e4       	ldi	r24, 0x42	; 66
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
		break;
	default:
		//error message
		break;
	}
}
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <APP_WelcomeInATM>:


void APP_WelcomeInATM(void)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar == '1')
    3308:	80 91 a5 04 	lds	r24, 0x04A5
    330c:	81 33       	cpi	r24, 0x31	; 49
    330e:	41 f4       	brne	.+16     	; 0x3320 <APP_WelcomeInATM+0x20>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	80 93 98 04 	sts	0x0498, r24
		HandleState(EnterID, NoError);
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    331e:	0b c0       	rjmp	.+22     	; 0x3336 <APP_WelcomeInATM+0x36>
	}
	else if(KeypadChar == '2')
    3320:	80 91 a5 04 	lds	r24, 0x04A5
    3324:	82 33       	cpi	r24, 0x32	; 50
    3326:	39 f4       	brne	.+14     	; 0x3336 <APP_WelcomeInATM+0x36>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	80 93 98 04 	sts	0x0498, r24
		HandleState(SignUpEnterPassword, NoError);
    332e:	83 e0       	ldi	r24, 0x03	; 3
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}else{}
}
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <APP_EnterID>:

void APP_EnterID(void)
{
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar >= '0' && KeypadChar <= '9')
    3344:	80 91 a5 04 	lds	r24, 0x04A5
    3348:	80 33       	cpi	r24, 0x30	; 48
    334a:	d0 f1       	brcs	.+116    	; 0x33c0 <APP_EnterID+0x84>
    334c:	80 91 a5 04 	lds	r24, 0x04A5
    3350:	8a 33       	cpi	r24, 0x3A	; 58
    3352:	b0 f5       	brcc	.+108    	; 0x33c0 <APP_EnterID+0x84>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	80 93 98 04 	sts	0x0498, r24
		if(User_ID == NULL_ID)
    335a:	80 91 8b 04 	lds	r24, 0x048B
    335e:	8f 3f       	cpi	r24, 0xFF	; 255
    3360:	69 f4       	brne	.+26     	; 0x337c <APP_EnterID+0x40>
		{
			LCD_PrintCharFlag = TRUE;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	80 93 97 04 	sts	0x0497, r24
			LCD_Char = KeypadChar;
    3368:	80 91 a5 04 	lds	r24, 0x04A5
    336c:	80 93 96 04 	sts	0x0496, r24
			User_ID = KeypadChar - '0';
    3370:	80 91 a5 04 	lds	r24, 0x04A5
    3374:	80 53       	subi	r24, 0x30	; 48
    3376:	80 93 8b 04 	sts	0x048B, r24
    337a:	57 c0       	rjmp	.+174    	; 0x342a <APP_EnterID+0xee>
		}
		else if(User_ID <= 9)
    337c:	80 91 8b 04 	lds	r24, 0x048B
    3380:	8a 30       	cpi	r24, 0x0A	; 10
    3382:	08 f0       	brcs	.+2      	; 0x3386 <APP_EnterID+0x4a>
    3384:	52 c0       	rjmp	.+164    	; 0x342a <APP_EnterID+0xee>
		{
			LCD_PrintCharFlag = TRUE;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	80 93 97 04 	sts	0x0497, r24
			LCD_Char = KeypadChar;
    338c:	80 91 a5 04 	lds	r24, 0x04A5
    3390:	80 93 96 04 	sts	0x0496, r24
			User_ID = (User_ID * 10) + (KeypadChar - '0');
    3394:	80 91 8b 04 	lds	r24, 0x048B
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9c 01       	movw	r18, r24
    339e:	22 0f       	add	r18, r18
    33a0:	33 1f       	adc	r19, r19
    33a2:	c9 01       	movw	r24, r18
    33a4:	88 0f       	add	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	88 0f       	add	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	82 0f       	add	r24, r18
    33ae:	93 1f       	adc	r25, r19
    33b0:	98 2f       	mov	r25, r24
    33b2:	80 91 a5 04 	lds	r24, 0x04A5
    33b6:	89 0f       	add	r24, r25
    33b8:	80 53       	subi	r24, 0x30	; 48
    33ba:	80 93 8b 04 	sts	0x048B, r24
    33be:	35 c0       	rjmp	.+106    	; 0x342a <APP_EnterID+0xee>
		}else{}
	}
	else if(KeypadChar == 'C')
    33c0:	80 91 a5 04 	lds	r24, 0x04A5
    33c4:	83 34       	cpi	r24, 0x43	; 67
    33c6:	31 f5       	brne	.+76     	; 0x3414 <APP_EnterID+0xd8>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	80 93 98 04 	sts	0x0498, r24
		if((User_ID >= 0 && User_ID <= 99))
    33ce:	80 91 8b 04 	lds	r24, 0x048B
    33d2:	84 36       	cpi	r24, 0x64	; 100
    33d4:	50 f5       	brcc	.+84     	; 0x342a <APP_EnterID+0xee>
		{
			if(GetClient(&CurrentClient, User_ID) != E_OK)
    33d6:	20 91 8b 04 	lds	r18, 0x048B
    33da:	8d ea       	ldi	r24, 0xAD	; 173
    33dc:	94 e0       	ldi	r25, 0x04	; 4
    33de:	62 2f       	mov	r22, r18
    33e0:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <GetClient>
    33e4:	88 23       	and	r24, r24
    33e6:	71 f0       	breq	.+28     	; 0x3404 <APP_EnterID+0xc8>
			{
				User_ID = NULL_ID;
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	80 93 8b 04 	sts	0x048B, r24
				SWC2_SystemTick = StandardDelay;
    33ee:	8e e1       	ldi	r24, 0x1E	; 30
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	90 93 9b 04 	sts	0x049B, r25
    33f6:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, WrongID);
    33fa:	8f e0       	ldi	r24, 0x0F	; 15
    33fc:	64 e0       	ldi	r22, 0x04	; 4
    33fe:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3402:	13 c0       	rjmp	.+38     	; 0x342a <APP_EnterID+0xee>
				// counter
			}
			else
			{
				User_ID = NULL_ID;
    3404:	8f ef       	ldi	r24, 0xFF	; 255
    3406:	80 93 8b 04 	sts	0x048B, r24
				HandleState(SignInEnterPassword, NoError);
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3412:	0b c0       	rjmp	.+22     	; 0x342a <APP_EnterID+0xee>
			}
		}else{}
	}
	else if(KeypadChar == '-')
    3414:	80 91 a5 04 	lds	r24, 0x04A5
    3418:	8d 32       	cpi	r24, 0x2D	; 45
    341a:	39 f4       	brne	.+14     	; 0x342a <APP_EnterID+0xee>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	80 93 98 04 	sts	0x0498, r24
		HandleState(WelcomeInATM, NoError);
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	60 e0       	ldi	r22, 0x00	; 0
    3426:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}else{}
}
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <APP_SignInEnterPassword>:

void APP_SignInEnterPassword(void)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar >= '0' && KeypadChar <= '9')
    3438:	80 91 a5 04 	lds	r24, 0x04A5
    343c:	80 33       	cpi	r24, 0x30	; 48
    343e:	08 f4       	brcc	.+2      	; 0x3442 <APP_SignInEnterPassword+0x12>
    3440:	55 c0       	rjmp	.+170    	; 0x34ec <APP_SignInEnterPassword+0xbc>
    3442:	80 91 a5 04 	lds	r24, 0x04A5
    3446:	8a 33       	cpi	r24, 0x3A	; 58
    3448:	08 f0       	brcs	.+2      	; 0x344c <APP_SignInEnterPassword+0x1c>
    344a:	50 c0       	rjmp	.+160    	; 0x34ec <APP_SignInEnterPassword+0xbc>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    344c:	82 e0       	ldi	r24, 0x02	; 2
    344e:	80 93 98 04 	sts	0x0498, r24
		Password[PasswordCounter] = KeypadChar;
    3452:	80 91 8c 04 	lds	r24, 0x048C
    3456:	88 2f       	mov	r24, r24
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	20 91 a5 04 	lds	r18, 0x04A5
    345e:	fc 01       	movw	r30, r24
    3460:	ea 55       	subi	r30, 0x5A	; 90
    3462:	fb 4f       	sbci	r31, 0xFB	; 251
    3464:	20 83       	st	Z, r18
		PasswordCounter++;
    3466:	80 91 8c 04 	lds	r24, 0x048C
    346a:	8f 5f       	subi	r24, 0xFF	; 255
    346c:	80 93 8c 04 	sts	0x048C, r24
		LCD_Char = '*';
    3470:	8a e2       	ldi	r24, 0x2A	; 42
    3472:	80 93 96 04 	sts	0x0496, r24
		LCD_PrintCharFlag = TRUE;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	80 93 97 04 	sts	0x0497, r24
		if(PasswordCounter == PASSWORD_DigitNum)
    347c:	80 91 8c 04 	lds	r24, 0x048C
    3480:	84 30       	cpi	r24, 0x04	; 4
    3482:	09 f0       	breq	.+2      	; 0x3486 <APP_SignInEnterPassword+0x56>
    3484:	3e c0       	rjmp	.+124    	; 0x3502 <APP_SignInEnterPassword+0xd2>
		{
			PasswordCounter = 0;
    3486:	10 92 8c 04 	sts	0x048C, r1
			if(Strings_Is_Equal(Password, CurrentClient.Pass) == TRUE)
    348a:	86 ea       	ldi	r24, 0xA6	; 166
    348c:	94 e0       	ldi	r25, 0x04	; 4
    348e:	25 eb       	ldi	r18, 0xB5	; 181
    3490:	34 e0       	ldi	r19, 0x04	; 4
    3492:	b9 01       	movw	r22, r18
    3494:	0e 94 39 2c 	call	0x5872	; 0x5872 <Strings_Is_Equal>
    3498:	81 30       	cpi	r24, 0x01	; 1
    349a:	39 f4       	brne	.+14     	; 0x34aa <APP_SignInEnterPassword+0x7a>
			{
				PasswordWrongCounter = 0;
    349c:	10 92 95 04 	sts	0x0495, r1
				HandleState(Account, NoError);
    34a0:	86 e0       	ldi	r24, 0x06	; 6
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    34a8:	2c c0       	rjmp	.+88     	; 0x3502 <APP_SignInEnterPassword+0xd2>
			}
			else
			{
				PasswordWrongCounter++;
    34aa:	80 91 95 04 	lds	r24, 0x0495
    34ae:	8f 5f       	subi	r24, 0xFF	; 255
    34b0:	80 93 95 04 	sts	0x0495, r24
				if(PasswordWrongCounter == WrongPassword_Max)
    34b4:	80 91 95 04 	lds	r24, 0x0495
    34b8:	83 30       	cpi	r24, 0x03	; 3
    34ba:	69 f4       	brne	.+26     	; 0x34d6 <APP_SignInEnterPassword+0xa6>
				{
					SWC2_SystemTick = ExtendedDelay;
    34bc:	8c e2       	ldi	r24, 0x2C	; 44
    34be:	91 e0       	ldi	r25, 0x01	; 1
    34c0:	90 93 9b 04 	sts	0x049B, r25
    34c4:	80 93 9a 04 	sts	0x049A, r24
					PasswordWrongCounter = 0;
    34c8:	10 92 95 04 	sts	0x0495, r1
					HandleState(Error, ThreeWrongPassword);
    34cc:	8f e0       	ldi	r24, 0x0F	; 15
    34ce:	62 e0       	ldi	r22, 0x02	; 2
    34d0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    34d4:	16 c0       	rjmp	.+44     	; 0x3502 <APP_SignInEnterPassword+0xd2>
				}
				else
				{
					SWC2_SystemTick = StandardDelay;
    34d6:	8e e1       	ldi	r24, 0x1E	; 30
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	90 93 9b 04 	sts	0x049B, r25
    34de:	80 93 9a 04 	sts	0x049A, r24
					HandleState(Error, SignInWrongPassword);
    34e2:	8f e0       	ldi	r24, 0x0F	; 15
    34e4:	61 e0       	ldi	r22, 0x01	; 1
    34e6:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    34ea:	0b c0       	rjmp	.+22     	; 0x3502 <APP_SignInEnterPassword+0xd2>
				}
			}
		}else{}
	}
	else if(KeypadChar == '-')
    34ec:	80 91 a5 04 	lds	r24, 0x04A5
    34f0:	8d 32       	cpi	r24, 0x2D	; 45
    34f2:	39 f4       	brne	.+14     	; 0x3502 <APP_SignInEnterPassword+0xd2>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    34f4:	82 e0       	ldi	r24, 0x02	; 2
    34f6:	80 93 98 04 	sts	0x0498, r24
		HandleState(WelcomeInATM, NoError);
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}else{}
}
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <APP_SignUpEnterPassword>:

void APP_SignUpEnterPassword(void)
{
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar >= '0' && KeypadChar <= '9')
    3510:	80 91 a5 04 	lds	r24, 0x04A5
    3514:	80 33       	cpi	r24, 0x30	; 48
    3516:	38 f1       	brcs	.+78     	; 0x3566 <APP_SignUpEnterPassword+0x5e>
    3518:	80 91 a5 04 	lds	r24, 0x04A5
    351c:	8a 33       	cpi	r24, 0x3A	; 58
    351e:	18 f5       	brcc	.+70     	; 0x3566 <APP_SignUpEnterPassword+0x5e>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3520:	82 e0       	ldi	r24, 0x02	; 2
    3522:	80 93 98 04 	sts	0x0498, r24
		Password[PasswordCounter] = KeypadChar;
    3526:	80 91 8c 04 	lds	r24, 0x048C
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	20 91 a5 04 	lds	r18, 0x04A5
    3532:	fc 01       	movw	r30, r24
    3534:	ea 55       	subi	r30, 0x5A	; 90
    3536:	fb 4f       	sbci	r31, 0xFB	; 251
    3538:	20 83       	st	Z, r18
		PasswordCounter++;
    353a:	80 91 8c 04 	lds	r24, 0x048C
    353e:	8f 5f       	subi	r24, 0xFF	; 255
    3540:	80 93 8c 04 	sts	0x048C, r24
		LCD_Char = '*';
    3544:	8a e2       	ldi	r24, 0x2A	; 42
    3546:	80 93 96 04 	sts	0x0496, r24
		LCD_PrintCharFlag = TRUE;
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	80 93 97 04 	sts	0x0497, r24
		if(PasswordCounter == PASSWORD_DigitNum)
    3550:	80 91 8c 04 	lds	r24, 0x048C
    3554:	84 30       	cpi	r24, 0x04	; 4
    3556:	91 f4       	brne	.+36     	; 0x357c <APP_SignUpEnterPassword+0x74>
		{
			PasswordCounter = 0;
    3558:	10 92 8c 04 	sts	0x048C, r1
			HandleState(ConfirmPassword, NoError);
    355c:	84 e0       	ldi	r24, 0x04	; 4
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3564:	0b c0       	rjmp	.+22     	; 0x357c <APP_SignUpEnterPassword+0x74>
		}else{}
	}
	else if(KeypadChar == '-')
    3566:	80 91 a5 04 	lds	r24, 0x04A5
    356a:	8d 32       	cpi	r24, 0x2D	; 45
    356c:	39 f4       	brne	.+14     	; 0x357c <APP_SignUpEnterPassword+0x74>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	80 93 98 04 	sts	0x0498, r24
		HandleState(WelcomeInATM, NoError);
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}else{}
}
    357c:	cf 91       	pop	r28
    357e:	df 91       	pop	r29
    3580:	08 95       	ret

00003582 <APP_ConfirmPassword>:

void APP_ConfirmPassword(void)
{
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	0f 92       	push	r0
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar >= '0' && KeypadChar <= '9')
    358c:	80 91 a5 04 	lds	r24, 0x04A5
    3590:	80 33       	cpi	r24, 0x30	; 48
    3592:	08 f4       	brcc	.+2      	; 0x3596 <APP_ConfirmPassword+0x14>
    3594:	ad c0       	rjmp	.+346    	; 0x36f0 <APP_ConfirmPassword+0x16e>
    3596:	80 91 a5 04 	lds	r24, 0x04A5
    359a:	8a 33       	cpi	r24, 0x3A	; 58
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <APP_ConfirmPassword+0x1e>
    359e:	a8 c0       	rjmp	.+336    	; 0x36f0 <APP_ConfirmPassword+0x16e>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	80 93 98 04 	sts	0x0498, r24
		ConfirmedPassword[PasswordCounter] = KeypadChar;
    35a6:	80 91 8c 04 	lds	r24, 0x048C
    35aa:	88 2f       	mov	r24, r24
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	20 91 a5 04 	lds	r18, 0x04A5
    35b2:	fc 01       	movw	r30, r24
    35b4:	e1 56       	subi	r30, 0x61	; 97
    35b6:	fb 4f       	sbci	r31, 0xFB	; 251
    35b8:	20 83       	st	Z, r18
		PasswordCounter++;
    35ba:	80 91 8c 04 	lds	r24, 0x048C
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	80 93 8c 04 	sts	0x048C, r24
		LCD_Char = '*';
    35c4:	8a e2       	ldi	r24, 0x2A	; 42
    35c6:	80 93 96 04 	sts	0x0496, r24
		LCD_PrintCharFlag = TRUE;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	80 93 97 04 	sts	0x0497, r24
		if(PasswordCounter == PASSWORD_DigitNum)
    35d0:	80 91 8c 04 	lds	r24, 0x048C
    35d4:	84 30       	cpi	r24, 0x04	; 4
    35d6:	09 f0       	breq	.+2      	; 0x35da <APP_ConfirmPassword+0x58>
    35d8:	96 c0       	rjmp	.+300    	; 0x3706 <APP_ConfirmPassword+0x184>
		{
			PasswordCounter = 0;
    35da:	10 92 8c 04 	sts	0x048C, r1
			if(Strings_Is_Equal(Password, ConfirmedPassword) == TRUE)
    35de:	86 ea       	ldi	r24, 0xA6	; 166
    35e0:	94 e0       	ldi	r25, 0x04	; 4
    35e2:	2f e9       	ldi	r18, 0x9F	; 159
    35e4:	34 e0       	ldi	r19, 0x04	; 4
    35e6:	b9 01       	movw	r22, r18
    35e8:	0e 94 39 2c 	call	0x5872	; 0x5872 <Strings_Is_Equal>
    35ec:	81 30       	cpi	r24, 0x01	; 1
    35ee:	09 f0       	breq	.+2      	; 0x35f2 <APP_ConfirmPassword+0x70>
    35f0:	74 c0       	rjmp	.+232    	; 0x36da <APP_ConfirmPassword+0x158>
			{
				if(ChangePasswordFlag == TRUE)
    35f2:	80 91 88 04 	lds	r24, 0x0488
    35f6:	88 23       	and	r24, r24
    35f8:	e1 f0       	breq	.+56     	; 0x3632 <APP_ConfirmPassword+0xb0>
				{
					ChangePasswordFlag = FALSE;
    35fa:	10 92 88 04 	sts	0x0488, r1
					SWC2_SystemTick = StandardDelay;
    35fe:	8e e1       	ldi	r24, 0x1E	; 30
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	90 93 9b 04 	sts	0x049B, r25
    3606:	80 93 9a 04 	sts	0x049A, r24
					if(UpdateClient(&CurrentClient, UpdatePass, Password) != E_OK)
    360a:	8d ea       	ldi	r24, 0xAD	; 173
    360c:	94 e0       	ldi	r25, 0x04	; 4
    360e:	26 ea       	ldi	r18, 0xA6	; 166
    3610:	34 e0       	ldi	r19, 0x04	; 4
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	a9 01       	movw	r20, r18
    3616:	0e 94 25 2a 	call	0x544a	; 0x544a <UpdateClient>
    361a:	88 23       	and	r24, r24
    361c:	29 f0       	breq	.+10     	; 0x3628 <APP_ConfirmPassword+0xa6>
					{
						HandleState(Error, UnsuccessfulTransaction);
    361e:	8f e0       	ldi	r24, 0x0F	; 15
    3620:	65 e0       	ldi	r22, 0x05	; 5
    3622:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3626:	6f c0       	rjmp	.+222    	; 0x3706 <APP_ConfirmPassword+0x184>
					}
					else
					{
						HandleState(ChangePassword_Response, NoError);
    3628:	8b e0       	ldi	r24, 0x0B	; 11
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3630:	6a c0       	rjmp	.+212    	; 0x3706 <APP_ConfirmPassword+0x184>
					}
				}
				else
				{
					ClientInit(Password);
    3632:	19 82       	std	Y+1, r1	; 0x01
    3634:	11 c0       	rjmp	.+34     	; 0x3658 <APP_ConfirmPassword+0xd6>
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	88 2f       	mov	r24, r24
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	fc 01       	movw	r30, r24
    3644:	ea 55       	subi	r30, 0x5A	; 90
    3646:	fb 4f       	sbci	r31, 0xFB	; 251
    3648:	80 81       	ld	r24, Z
    364a:	f9 01       	movw	r30, r18
    364c:	eb 54       	subi	r30, 0x4B	; 75
    364e:	fb 4f       	sbci	r31, 0xFB	; 251
    3650:	80 83       	st	Z, r24
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	85 30       	cpi	r24, 0x05	; 5
    365c:	60 f3       	brcs	.-40     	; 0x3636 <APP_ConfirmPassword+0xb4>
    365e:	10 92 b9 04 	sts	0x04B9, r1
    3662:	80 e3       	ldi	r24, 0x30	; 48
    3664:	80 93 ad 04 	sts	0x04AD, r24
    3668:	10 92 ae 04 	sts	0x04AE, r1
    366c:	80 91 ab 04 	lds	r24, 0x04AB
    3670:	9a e0       	ldi	r25, 0x0A	; 10
    3672:	69 2f       	mov	r22, r25
    3674:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__udivmodqi4>
    3678:	80 5d       	subi	r24, 0xD0	; 208
    367a:	80 93 ba 04 	sts	0x04BA, r24
    367e:	80 91 ab 04 	lds	r24, 0x04AB
    3682:	9a e0       	ldi	r25, 0x0A	; 10
    3684:	69 2f       	mov	r22, r25
    3686:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__udivmodqi4>
    368a:	89 2f       	mov	r24, r25
    368c:	80 5d       	subi	r24, 0xD0	; 208
    368e:	80 93 bb 04 	sts	0x04BB, r24
    3692:	10 92 bc 04 	sts	0x04BC, r1
    3696:	80 91 ab 04 	lds	r24, 0x04AB
    369a:	8f 5f       	subi	r24, 0xFF	; 255
    369c:	80 93 ab 04 	sts	0x04AB, r24
    36a0:	20 91 ab 04 	lds	r18, 0x04AB
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	62 2f       	mov	r22, r18
    36aa:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <__eeupd_byte_m32>
					SWC2_SystemTick = StandardDelay;
    36ae:	8e e1       	ldi	r24, 0x1E	; 30
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	90 93 9b 04 	sts	0x049B, r25
    36b6:	80 93 9a 04 	sts	0x049A, r24
					if(SendClient(&CurrentClient) != E_OK)
    36ba:	8d ea       	ldi	r24, 0xAD	; 173
    36bc:	94 e0       	ldi	r25, 0x04	; 4
    36be:	0e 94 b7 2b 	call	0x576e	; 0x576e <SendClient>
    36c2:	88 23       	and	r24, r24
    36c4:	29 f0       	breq	.+10     	; 0x36d0 <APP_ConfirmPassword+0x14e>
					{
						HandleState(Error, UnsuccessfulTransaction);
    36c6:	8f e0       	ldi	r24, 0x0F	; 15
    36c8:	65 e0       	ldi	r22, 0x05	; 5
    36ca:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    36ce:	1b c0       	rjmp	.+54     	; 0x3706 <APP_ConfirmPassword+0x184>
					}
					else
					{
						HandleState(NewAccount, NoError);
    36d0:	85 e0       	ldi	r24, 0x05	; 5
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    36d8:	16 c0       	rjmp	.+44     	; 0x3706 <APP_ConfirmPassword+0x184>
					}
				}
			}
			else
			{
				SWC2_SystemTick = StandardDelay;
    36da:	8e e1       	ldi	r24, 0x1E	; 30
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	90 93 9b 04 	sts	0x049B, r25
    36e2:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, Mismatch);
    36e6:	8f e0       	ldi	r24, 0x0F	; 15
    36e8:	67 e0       	ldi	r22, 0x07	; 7
    36ea:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    36ee:	0b c0       	rjmp	.+22     	; 0x3706 <APP_ConfirmPassword+0x184>
			}
		}else{}
	}
	else if(KeypadChar == '-')
    36f0:	80 91 a5 04 	lds	r24, 0x04A5
    36f4:	8d 32       	cpi	r24, 0x2D	; 45
    36f6:	39 f4       	brne	.+14     	; 0x3706 <APP_ConfirmPassword+0x184>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	80 93 98 04 	sts	0x0498, r24
		HandleState(WelcomeInATM, NoError);
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}else{}
}
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <APP_Account>:

void APP_Account(void)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar == '1')
    3716:	80 91 a5 04 	lds	r24, 0x04A5
    371a:	81 33       	cpi	r24, 0x31	; 49
    371c:	41 f4       	brne	.+16     	; 0x372e <APP_Account+0x20>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    371e:	82 e0       	ldi	r24, 0x02	; 2
    3720:	80 93 98 04 	sts	0x0498, r24
		HandleState(CashWithdraw, NoError);
    3724:	87 e0       	ldi	r24, 0x07	; 7
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    372c:	17 c0       	rjmp	.+46     	; 0x375c <APP_Account+0x4e>
	}
	else if(KeypadChar == '2')
    372e:	80 91 a5 04 	lds	r24, 0x04A5
    3732:	82 33       	cpi	r24, 0x32	; 50
    3734:	41 f4       	brne	.+16     	; 0x3746 <APP_Account+0x38>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	80 93 98 04 	sts	0x0498, r24
		HandleState(OtherServices, NoError);
    373c:	88 e0       	ldi	r24, 0x08	; 8
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3744:	0b c0       	rjmp	.+22     	; 0x375c <APP_Account+0x4e>
	}
	else if(KeypadChar == '3')
    3746:	80 91 a5 04 	lds	r24, 0x04A5
    374a:	83 33       	cpi	r24, 0x33	; 51
    374c:	39 f4       	brne	.+14     	; 0x375c <APP_Account+0x4e>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	80 93 98 04 	sts	0x0498, r24
		HandleState(WelcomeInATM, NoError);
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	60 e0       	ldi	r22, 0x00	; 0
    3758:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}else{}
}
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <APP_CashWithdraw>:

void APP_CashWithdraw(void)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	00 d0       	rcall	.+0      	; 0x3768 <APP_CashWithdraw+0x6>
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar >= '0' && KeypadChar <= '6')
    376c:	80 91 a5 04 	lds	r24, 0x04A5
    3770:	80 33       	cpi	r24, 0x30	; 48
    3772:	08 f4       	brcc	.+2      	; 0x3776 <APP_CashWithdraw+0x14>
    3774:	50 c0       	rjmp	.+160    	; 0x3816 <APP_CashWithdraw+0xb4>
    3776:	80 91 a5 04 	lds	r24, 0x04A5
    377a:	87 33       	cpi	r24, 0x37	; 55
    377c:	08 f0       	brcs	.+2      	; 0x3780 <APP_CashWithdraw+0x1e>
    377e:	4b c0       	rjmp	.+150    	; 0x3816 <APP_CashWithdraw+0xb4>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	80 93 98 04 	sts	0x0498, r24
		switch(KeypadChar)
    3786:	80 91 a5 04 	lds	r24, 0x04A5
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	3a 83       	std	Y+2, r19	; 0x02
    3790:	29 83       	std	Y+1, r18	; 0x01
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	83 33       	cpi	r24, 0x33	; 51
    3798:	91 05       	cpc	r25, r1
    379a:	51 f1       	breq	.+84     	; 0x37f0 <APP_CashWithdraw+0x8e>
    379c:	29 81       	ldd	r18, Y+1	; 0x01
    379e:	3a 81       	ldd	r19, Y+2	; 0x02
    37a0:	24 33       	cpi	r18, 0x34	; 52
    37a2:	31 05       	cpc	r19, r1
    37a4:	5c f4       	brge	.+22     	; 0x37bc <APP_CashWithdraw+0x5a>
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	9a 81       	ldd	r25, Y+2	; 0x02
    37aa:	81 33       	cpi	r24, 0x31	; 49
    37ac:	91 05       	cpc	r25, r1
    37ae:	b1 f0       	breq	.+44     	; 0x37dc <APP_CashWithdraw+0x7a>
    37b0:	29 81       	ldd	r18, Y+1	; 0x01
    37b2:	3a 81       	ldd	r19, Y+2	; 0x02
    37b4:	22 33       	cpi	r18, 0x32	; 50
    37b6:	31 05       	cpc	r19, r1
    37b8:	b1 f0       	breq	.+44     	; 0x37e6 <APP_CashWithdraw+0x84>
    37ba:	2d c0       	rjmp	.+90     	; 0x3816 <APP_CashWithdraw+0xb4>
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
    37c0:	85 33       	cpi	r24, 0x35	; 53
    37c2:	91 05       	cpc	r25, r1
    37c4:	f9 f0       	breq	.+62     	; 0x3804 <APP_CashWithdraw+0xa2>
    37c6:	29 81       	ldd	r18, Y+1	; 0x01
    37c8:	3a 81       	ldd	r19, Y+2	; 0x02
    37ca:	25 33       	cpi	r18, 0x35	; 53
    37cc:	31 05       	cpc	r19, r1
    37ce:	ac f0       	brlt	.+42     	; 0x37fa <APP_CashWithdraw+0x98>
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	86 33       	cpi	r24, 0x36	; 54
    37d6:	91 05       	cpc	r25, r1
    37d8:	d1 f0       	breq	.+52     	; 0x380e <APP_CashWithdraw+0xac>
    37da:	1d c0       	rjmp	.+58     	; 0x3816 <APP_CashWithdraw+0xb4>
		{
		case '1':
			CashWithdrawHandle(100);
    37dc:	84 e6       	ldi	r24, 0x64	; 100
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <CashWithdrawHandle>
    37e4:	18 c0       	rjmp	.+48     	; 0x3816 <APP_CashWithdraw+0xb4>
			break;
		case '2':
			CashWithdrawHandle(200);
    37e6:	88 ec       	ldi	r24, 0xC8	; 200
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <CashWithdrawHandle>
    37ee:	13 c0       	rjmp	.+38     	; 0x3816 <APP_CashWithdraw+0xb4>
			break;
		case '3':
			CashWithdrawHandle(500);
    37f0:	84 ef       	ldi	r24, 0xF4	; 244
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <CashWithdrawHandle>
    37f8:	0e c0       	rjmp	.+28     	; 0x3816 <APP_CashWithdraw+0xb4>
			break;
		case '4':
			CashWithdrawHandle(1000);
    37fa:	88 ee       	ldi	r24, 0xE8	; 232
    37fc:	93 e0       	ldi	r25, 0x03	; 3
    37fe:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <CashWithdrawHandle>
    3802:	09 c0       	rjmp	.+18     	; 0x3816 <APP_CashWithdraw+0xb4>
			break;
		case '5':
			CashWithdrawHandle(2000);
    3804:	80 ed       	ldi	r24, 0xD0	; 208
    3806:	97 e0       	ldi	r25, 0x07	; 7
    3808:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <CashWithdrawHandle>
    380c:	04 c0       	rjmp	.+8      	; 0x3816 <APP_CashWithdraw+0xb4>
			break;
		case '6':
			CashWithdrawHandle(5000);
    380e:	88 e8       	ldi	r24, 0x88	; 136
    3810:	93 e1       	ldi	r25, 0x13	; 19
    3812:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <CashWithdrawHandle>
			break;
		default:
			break;
		}
	}
}
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <APP_OtherServices>:

void APP_OtherServices(void)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	00 d0       	rcall	.+0      	; 0x3826 <APP_OtherServices+0x6>
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
	if(KeypadChar >= '0' && KeypadChar <= '4')
    382a:	80 91 a5 04 	lds	r24, 0x04A5
    382e:	80 33       	cpi	r24, 0x30	; 48
    3830:	08 f4       	brcc	.+2      	; 0x3834 <APP_OtherServices+0x14>
    3832:	45 c0       	rjmp	.+138    	; 0x38be <APP_OtherServices+0x9e>
    3834:	80 91 a5 04 	lds	r24, 0x04A5
    3838:	85 33       	cpi	r24, 0x35	; 53
    383a:	08 f0       	brcs	.+2      	; 0x383e <APP_OtherServices+0x1e>
    383c:	40 c0       	rjmp	.+128    	; 0x38be <APP_OtherServices+0x9e>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    383e:	82 e0       	ldi	r24, 0x02	; 2
    3840:	80 93 98 04 	sts	0x0498, r24
		switch(KeypadChar)
    3844:	80 91 a5 04 	lds	r24, 0x04A5
    3848:	28 2f       	mov	r18, r24
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	3a 83       	std	Y+2, r19	; 0x02
    384e:	29 83       	std	Y+1, r18	; 0x01
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
    3854:	82 33       	cpi	r24, 0x32	; 50
    3856:	91 05       	cpc	r25, r1
    3858:	d9 f0       	breq	.+54     	; 0x3890 <APP_OtherServices+0x70>
    385a:	29 81       	ldd	r18, Y+1	; 0x01
    385c:	3a 81       	ldd	r19, Y+2	; 0x02
    385e:	23 33       	cpi	r18, 0x33	; 51
    3860:	31 05       	cpc	r19, r1
    3862:	34 f4       	brge	.+12     	; 0x3870 <APP_OtherServices+0x50>
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	9a 81       	ldd	r25, Y+2	; 0x02
    3868:	81 33       	cpi	r24, 0x31	; 49
    386a:	91 05       	cpc	r25, r1
    386c:	61 f0       	breq	.+24     	; 0x3886 <APP_OtherServices+0x66>
    386e:	27 c0       	rjmp	.+78     	; 0x38be <APP_OtherServices+0x9e>
    3870:	29 81       	ldd	r18, Y+1	; 0x01
    3872:	3a 81       	ldd	r19, Y+2	; 0x02
    3874:	23 33       	cpi	r18, 0x33	; 51
    3876:	31 05       	cpc	r19, r1
    3878:	81 f0       	breq	.+32     	; 0x389a <APP_OtherServices+0x7a>
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	9a 81       	ldd	r25, Y+2	; 0x02
    387e:	84 33       	cpi	r24, 0x34	; 52
    3880:	91 05       	cpc	r25, r1
    3882:	b1 f0       	breq	.+44     	; 0x38b0 <APP_OtherServices+0x90>
    3884:	1c c0       	rjmp	.+56     	; 0x38be <APP_OtherServices+0x9e>
		{
		case '1':
			HandleState(CashWithdraw_Service, NoError);
    3886:	89 e0       	ldi	r24, 0x09	; 9
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    388e:	17 c0       	rjmp	.+46     	; 0x38be <APP_OtherServices+0x9e>
			break;
		case '2':
			HandleState(CreditDeposit_Service, NoError);
    3890:	8a e0       	ldi	r24, 0x0A	; 10
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3898:	12 c0       	rjmp	.+36     	; 0x38be <APP_OtherServices+0x9e>
			break;
		case '3':
			SWC2_SystemTick = StandardDelay;
    389a:	8e e1       	ldi	r24, 0x1E	; 30
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	90 93 9b 04 	sts	0x049B, r25
    38a2:	80 93 9a 04 	sts	0x049A, r24
			HandleState(CreditInquiry_Response, NoError);
    38a6:	8d e0       	ldi	r24, 0x0D	; 13
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    38ae:	07 c0       	rjmp	.+14     	; 0x38be <APP_OtherServices+0x9e>
			break;
		case '4':
			ChangePasswordFlag = TRUE;
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	80 93 88 04 	sts	0x0488, r24
			HandleState(SignUpEnterPassword, NoError);
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	60 e0       	ldi	r22, 0x00	; 0
    38ba:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
			break;
		default:
			break;
		}
	}
}
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <APP_CashWithdraw_Service>:

void APP_CashWithdraw_Service(void)
{
    38c8:	af 92       	push	r10
    38ca:	bf 92       	push	r11
    38cc:	cf 92       	push	r12
    38ce:	df 92       	push	r13
    38d0:	ef 92       	push	r14
    38d2:	ff 92       	push	r15
    38d4:	0f 93       	push	r16
    38d6:	1f 93       	push	r17
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	c6 58       	subi	r28, 0x86	; 134
    38e2:	d0 40       	sbci	r29, 0x00	; 0
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
	uint64 NewCash = 0;
    38ee:	19 82       	std	Y+1, r1	; 0x01
    38f0:	1a 82       	std	Y+2, r1	; 0x02
    38f2:	1b 82       	std	Y+3, r1	; 0x03
    38f4:	1c 82       	std	Y+4, r1	; 0x04
    38f6:	1d 82       	std	Y+5, r1	; 0x05
    38f8:	1e 82       	std	Y+6, r1	; 0x06
    38fa:	1f 82       	std	Y+7, r1	; 0x07
    38fc:	18 86       	std	Y+8, r1	; 0x08
	if(KeypadChar >= '0' && KeypadChar <= '9')
    38fe:	80 91 a5 04 	lds	r24, 0x04A5
    3902:	80 33       	cpi	r24, 0x30	; 48
    3904:	08 f4       	brcc	.+2      	; 0x3908 <APP_CashWithdraw_Service+0x40>
    3906:	3b c3       	rjmp	.+1654   	; 0x3f7e <APP_CashWithdraw_Service+0x6b6>
    3908:	80 91 a5 04 	lds	r24, 0x04A5
    390c:	8a 33       	cpi	r24, 0x3A	; 58
    390e:	08 f0       	brcs	.+2      	; 0x3912 <APP_CashWithdraw_Service+0x4a>
    3910:	36 c3       	rjmp	.+1644   	; 0x3f7e <APP_CashWithdraw_Service+0x6b6>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    3912:	82 e0       	ldi	r24, 0x02	; 2
    3914:	80 93 98 04 	sts	0x0498, r24
		Cash[CashCounter] = KeypadChar;
    3918:	80 91 99 04 	lds	r24, 0x0499
    391c:	88 2f       	mov	r24, r24
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	20 91 a5 04 	lds	r18, 0x04A5
    3924:	fc 01       	movw	r30, r24
    3926:	e3 57       	subi	r30, 0x73	; 115
    3928:	fb 4f       	sbci	r31, 0xFB	; 251
    392a:	20 83       	st	Z, r18
		CashCounter++;
    392c:	80 91 99 04 	lds	r24, 0x0499
    3930:	8f 5f       	subi	r24, 0xFF	; 255
    3932:	80 93 99 04 	sts	0x0499, r24
		LCD_Char = KeypadChar;
    3936:	80 91 a5 04 	lds	r24, 0x04A5
    393a:	80 93 96 04 	sts	0x0496, r24
		LCD_PrintCharFlag = TRUE;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	80 93 97 04 	sts	0x0497, r24
		if(CashCounter == CASH_DigitNum)
    3944:	80 91 99 04 	lds	r24, 0x0499
    3948:	84 30       	cpi	r24, 0x04	; 4
    394a:	09 f0       	breq	.+2      	; 0x394e <APP_CashWithdraw_Service+0x86>
    394c:	c5 c5       	rjmp	.+2954   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
		{
			Cash[CashCounter] = '\0';
    394e:	80 91 99 04 	lds	r24, 0x0499
    3952:	88 2f       	mov	r24, r24
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	fc 01       	movw	r30, r24
    3958:	e3 57       	subi	r30, 0x73	; 115
    395a:	fb 4f       	sbci	r31, 0xFB	; 251
    395c:	10 82       	st	Z, r1
			CashCounter = 0;
    395e:	10 92 99 04 	sts	0x0499, r1
			if(StringToNumber(Cash) > MaxAmountOfCash)
    3962:	8d e8       	ldi	r24, 0x8D	; 141
    3964:	94 e0       	ldi	r25, 0x04	; 4
    3966:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    396a:	2a 96       	adiw	r28, 0x0a	; 10
    396c:	2f af       	std	Y+63, r18	; 0x3f
    396e:	2a 97       	sbiw	r28, 0x0a	; 10
    3970:	2b 96       	adiw	r28, 0x0b	; 11
    3972:	3f af       	std	Y+63, r19	; 0x3f
    3974:	2b 97       	sbiw	r28, 0x0b	; 11
    3976:	2c 96       	adiw	r28, 0x0c	; 12
    3978:	4f af       	std	Y+63, r20	; 0x3f
    397a:	2c 97       	sbiw	r28, 0x0c	; 12
    397c:	2d 96       	adiw	r28, 0x0d	; 13
    397e:	5f af       	std	Y+63, r21	; 0x3f
    3980:	2d 97       	sbiw	r28, 0x0d	; 13
    3982:	2e 96       	adiw	r28, 0x0e	; 14
    3984:	6f af       	std	Y+63, r22	; 0x3f
    3986:	2e 97       	sbiw	r28, 0x0e	; 14
    3988:	2f 96       	adiw	r28, 0x0f	; 15
    398a:	7f af       	std	Y+63, r23	; 0x3f
    398c:	2f 97       	sbiw	r28, 0x0f	; 15
    398e:	60 96       	adiw	r28, 0x10	; 16
    3990:	8f af       	std	Y+63, r24	; 0x3f
    3992:	60 97       	sbiw	r28, 0x10	; 16
    3994:	61 96       	adiw	r28, 0x11	; 17
    3996:	9f af       	std	Y+63, r25	; 0x3f
    3998:	61 97       	sbiw	r28, 0x11	; 17
    399a:	61 96       	adiw	r28, 0x11	; 17
    399c:	8f ad       	ldd	r24, Y+63	; 0x3f
    399e:	61 97       	sbiw	r28, 0x11	; 17
    39a0:	88 23       	and	r24, r24
    39a2:	09 f0       	breq	.+2      	; 0x39a6 <APP_CashWithdraw_Service+0xde>
    39a4:	49 c0       	rjmp	.+146    	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    39a6:	61 96       	adiw	r28, 0x11	; 17
    39a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    39aa:	61 97       	sbiw	r28, 0x11	; 17
    39ac:	99 23       	and	r25, r25
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <APP_CashWithdraw_Service+0xea>
    39b0:	4e c0       	rjmp	.+156    	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    39b2:	60 96       	adiw	r28, 0x10	; 16
    39b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    39b6:	60 97       	sbiw	r28, 0x10	; 16
    39b8:	88 23       	and	r24, r24
    39ba:	09 f0       	breq	.+2      	; 0x39be <APP_CashWithdraw_Service+0xf6>
    39bc:	3d c0       	rjmp	.+122    	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    39be:	60 96       	adiw	r28, 0x10	; 16
    39c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    39c2:	60 97       	sbiw	r28, 0x10	; 16
    39c4:	99 23       	and	r25, r25
    39c6:	09 f0       	breq	.+2      	; 0x39ca <APP_CashWithdraw_Service+0x102>
    39c8:	42 c0       	rjmp	.+132    	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    39ca:	2f 96       	adiw	r28, 0x0f	; 15
    39cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    39ce:	2f 97       	sbiw	r28, 0x0f	; 15
    39d0:	88 23       	and	r24, r24
    39d2:	91 f5       	brne	.+100    	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    39d4:	2f 96       	adiw	r28, 0x0f	; 15
    39d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    39d8:	2f 97       	sbiw	r28, 0x0f	; 15
    39da:	99 23       	and	r25, r25
    39dc:	c1 f5       	brne	.+112    	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    39de:	2e 96       	adiw	r28, 0x0e	; 14
    39e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    39e2:	2e 97       	sbiw	r28, 0x0e	; 14
    39e4:	88 23       	and	r24, r24
    39e6:	41 f5       	brne	.+80     	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    39e8:	2e 96       	adiw	r28, 0x0e	; 14
    39ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    39ec:	2e 97       	sbiw	r28, 0x0e	; 14
    39ee:	99 23       	and	r25, r25
    39f0:	71 f5       	brne	.+92     	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    39f2:	2d 96       	adiw	r28, 0x0d	; 13
    39f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    39f6:	2d 97       	sbiw	r28, 0x0d	; 13
    39f8:	88 23       	and	r24, r24
    39fa:	f1 f4       	brne	.+60     	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    39fc:	2d 96       	adiw	r28, 0x0d	; 13
    39fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a00:	2d 97       	sbiw	r28, 0x0d	; 13
    3a02:	99 23       	and	r25, r25
    3a04:	21 f5       	brne	.+72     	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    3a06:	2c 96       	adiw	r28, 0x0c	; 12
    3a08:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a0a:	2c 97       	sbiw	r28, 0x0c	; 12
    3a0c:	88 23       	and	r24, r24
    3a0e:	a1 f4       	brne	.+40     	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    3a10:	2c 96       	adiw	r28, 0x0c	; 12
    3a12:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a14:	2c 97       	sbiw	r28, 0x0c	; 12
    3a16:	99 23       	and	r25, r25
    3a18:	d1 f4       	brne	.+52     	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    3a1a:	2b 96       	adiw	r28, 0x0b	; 11
    3a1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a1e:	2b 97       	sbiw	r28, 0x0b	; 11
    3a20:	84 31       	cpi	r24, 0x14	; 20
    3a22:	50 f4       	brcc	.+20     	; 0x3a38 <APP_CashWithdraw_Service+0x170>
    3a24:	2b 96       	adiw	r28, 0x0b	; 11
    3a26:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a28:	2b 97       	sbiw	r28, 0x0b	; 11
    3a2a:	93 31       	cpi	r25, 0x13	; 19
    3a2c:	81 f4       	brne	.+32     	; 0x3a4e <APP_CashWithdraw_Service+0x186>
    3a2e:	2a 96       	adiw	r28, 0x0a	; 10
    3a30:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a32:	2a 97       	sbiw	r28, 0x0a	; 10
    3a34:	89 38       	cpi	r24, 0x89	; 137
    3a36:	58 f0       	brcs	.+22     	; 0x3a4e <APP_CashWithdraw_Service+0x186>
			{
				SWC2_SystemTick = StandardDelay;
    3a38:	8e e1       	ldi	r24, 0x1E	; 30
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	90 93 9b 04 	sts	0x049B, r25
    3a40:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, MaxAmountPerTransaction);
    3a44:	8f e0       	ldi	r24, 0x0F	; 15
    3a46:	63 e0       	ldi	r22, 0x03	; 3
    3a48:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3a4c:	45 c5       	rjmp	.+2698   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
			}
			else if(StringToNumber(CurrentClient.Cash) >= StringToNumber(Cash))
    3a4e:	8d ea       	ldi	r24, 0xAD	; 173
    3a50:	94 e0       	ldi	r25, 0x04	; 4
    3a52:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    3a56:	22 96       	adiw	r28, 0x02	; 2
    3a58:	2f af       	std	Y+63, r18	; 0x3f
    3a5a:	22 97       	sbiw	r28, 0x02	; 2
    3a5c:	23 96       	adiw	r28, 0x03	; 3
    3a5e:	3f af       	std	Y+63, r19	; 0x3f
    3a60:	23 97       	sbiw	r28, 0x03	; 3
    3a62:	24 96       	adiw	r28, 0x04	; 4
    3a64:	4f af       	std	Y+63, r20	; 0x3f
    3a66:	24 97       	sbiw	r28, 0x04	; 4
    3a68:	25 96       	adiw	r28, 0x05	; 5
    3a6a:	5f af       	std	Y+63, r21	; 0x3f
    3a6c:	25 97       	sbiw	r28, 0x05	; 5
    3a6e:	26 96       	adiw	r28, 0x06	; 6
    3a70:	6f af       	std	Y+63, r22	; 0x3f
    3a72:	26 97       	sbiw	r28, 0x06	; 6
    3a74:	27 96       	adiw	r28, 0x07	; 7
    3a76:	7f af       	std	Y+63, r23	; 0x3f
    3a78:	27 97       	sbiw	r28, 0x07	; 7
    3a7a:	28 96       	adiw	r28, 0x08	; 8
    3a7c:	8f af       	std	Y+63, r24	; 0x3f
    3a7e:	28 97       	sbiw	r28, 0x08	; 8
    3a80:	29 96       	adiw	r28, 0x09	; 9
    3a82:	9f af       	std	Y+63, r25	; 0x3f
    3a84:	29 97       	sbiw	r28, 0x09	; 9
    3a86:	8d e8       	ldi	r24, 0x8D	; 141
    3a88:	94 e0       	ldi	r25, 0x04	; 4
    3a8a:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    3a8e:	29 af       	std	Y+57, r18	; 0x39
    3a90:	3a af       	std	Y+58, r19	; 0x3a
    3a92:	4b af       	std	Y+59, r20	; 0x3b
    3a94:	5c af       	std	Y+60, r21	; 0x3c
    3a96:	6d af       	std	Y+61, r22	; 0x3d
    3a98:	7e af       	std	Y+62, r23	; 0x3e
    3a9a:	8f af       	std	Y+63, r24	; 0x3f
    3a9c:	21 96       	adiw	r28, 0x01	; 1
    3a9e:	9f af       	std	Y+63, r25	; 0x3f
    3aa0:	21 97       	sbiw	r28, 0x01	; 1
    3aa2:	21 96       	adiw	r28, 0x01	; 1
    3aa4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aa6:	21 97       	sbiw	r28, 0x01	; 1
    3aa8:	29 96       	adiw	r28, 0x09	; 9
    3aaa:	8f ad       	ldd	r24, Y+63	; 0x3f
    3aac:	29 97       	sbiw	r28, 0x09	; 9
    3aae:	89 17       	cp	r24, r25
    3ab0:	08 f4       	brcc	.+2      	; 0x3ab4 <APP_CashWithdraw_Service+0x1ec>
    3ab2:	5a c2       	rjmp	.+1204   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3ab4:	21 96       	adiw	r28, 0x01	; 1
    3ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ab8:	21 97       	sbiw	r28, 0x01	; 1
    3aba:	29 96       	adiw	r28, 0x09	; 9
    3abc:	8f ad       	ldd	r24, Y+63	; 0x3f
    3abe:	29 97       	sbiw	r28, 0x09	; 9
    3ac0:	98 17       	cp	r25, r24
    3ac2:	09 f0       	breq	.+2      	; 0x3ac6 <APP_CashWithdraw_Service+0x1fe>
    3ac4:	56 c0       	rjmp	.+172    	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ac8:	28 96       	adiw	r28, 0x08	; 8
    3aca:	8f ad       	ldd	r24, Y+63	; 0x3f
    3acc:	28 97       	sbiw	r28, 0x08	; 8
    3ace:	89 17       	cp	r24, r25
    3ad0:	08 f4       	brcc	.+2      	; 0x3ad4 <APP_CashWithdraw_Service+0x20c>
    3ad2:	4a c2       	rjmp	.+1172   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3ad4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ad6:	28 96       	adiw	r28, 0x08	; 8
    3ad8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ada:	28 97       	sbiw	r28, 0x08	; 8
    3adc:	98 17       	cp	r25, r24
    3ade:	09 f0       	breq	.+2      	; 0x3ae2 <APP_CashWithdraw_Service+0x21a>
    3ae0:	48 c0       	rjmp	.+144    	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3ae2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ae4:	27 96       	adiw	r28, 0x07	; 7
    3ae6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ae8:	27 97       	sbiw	r28, 0x07	; 7
    3aea:	89 17       	cp	r24, r25
    3aec:	08 f4       	brcc	.+2      	; 0x3af0 <APP_CashWithdraw_Service+0x228>
    3aee:	3c c2       	rjmp	.+1144   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3af0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3af2:	27 96       	adiw	r28, 0x07	; 7
    3af4:	8f ad       	ldd	r24, Y+63	; 0x3f
    3af6:	27 97       	sbiw	r28, 0x07	; 7
    3af8:	98 17       	cp	r25, r24
    3afa:	d9 f5       	brne	.+118    	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3afc:	9d ad       	ldd	r25, Y+61	; 0x3d
    3afe:	26 96       	adiw	r28, 0x06	; 6
    3b00:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b02:	26 97       	sbiw	r28, 0x06	; 6
    3b04:	89 17       	cp	r24, r25
    3b06:	08 f4       	brcc	.+2      	; 0x3b0a <APP_CashWithdraw_Service+0x242>
    3b08:	2f c2       	rjmp	.+1118   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3b0a:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b0c:	26 96       	adiw	r28, 0x06	; 6
    3b0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b10:	26 97       	sbiw	r28, 0x06	; 6
    3b12:	98 17       	cp	r25, r24
    3b14:	71 f5       	brne	.+92     	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3b16:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b18:	25 96       	adiw	r28, 0x05	; 5
    3b1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b1c:	25 97       	sbiw	r28, 0x05	; 5
    3b1e:	89 17       	cp	r24, r25
    3b20:	08 f4       	brcc	.+2      	; 0x3b24 <APP_CashWithdraw_Service+0x25c>
    3b22:	22 c2       	rjmp	.+1092   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3b24:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b26:	25 96       	adiw	r28, 0x05	; 5
    3b28:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b2a:	25 97       	sbiw	r28, 0x05	; 5
    3b2c:	98 17       	cp	r25, r24
    3b2e:	09 f5       	brne	.+66     	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3b30:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b32:	24 96       	adiw	r28, 0x04	; 4
    3b34:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b36:	24 97       	sbiw	r28, 0x04	; 4
    3b38:	89 17       	cp	r24, r25
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <APP_CashWithdraw_Service+0x276>
    3b3c:	15 c2       	rjmp	.+1066   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3b3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b40:	24 96       	adiw	r28, 0x04	; 4
    3b42:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b44:	24 97       	sbiw	r28, 0x04	; 4
    3b46:	98 17       	cp	r25, r24
    3b48:	a1 f4       	brne	.+40     	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3b4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b4c:	23 96       	adiw	r28, 0x03	; 3
    3b4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b50:	23 97       	sbiw	r28, 0x03	; 3
    3b52:	89 17       	cp	r24, r25
    3b54:	08 f4       	brcc	.+2      	; 0x3b58 <APP_CashWithdraw_Service+0x290>
    3b56:	08 c2       	rjmp	.+1040   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
    3b58:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b5a:	23 96       	adiw	r28, 0x03	; 3
    3b5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b5e:	23 97       	sbiw	r28, 0x03	; 3
    3b60:	98 17       	cp	r25, r24
    3b62:	39 f4       	brne	.+14     	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3b64:	99 ad       	ldd	r25, Y+57	; 0x39
    3b66:	22 96       	adiw	r28, 0x02	; 2
    3b68:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b6a:	22 97       	sbiw	r28, 0x02	; 2
    3b6c:	89 17       	cp	r24, r25
    3b6e:	08 f4       	brcc	.+2      	; 0x3b72 <APP_CashWithdraw_Service+0x2aa>
    3b70:	fb c1       	rjmp	.+1014   	; 0x3f68 <APP_CashWithdraw_Service+0x6a0>
			{
				NewCash = StringToNumber(CurrentClient.Cash) - StringToNumber(Cash);
    3b72:	8d ea       	ldi	r24, 0xAD	; 173
    3b74:	94 e0       	ldi	r25, 0x04	; 4
    3b76:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    3b7a:	29 ab       	std	Y+49, r18	; 0x31
    3b7c:	3a ab       	std	Y+50, r19	; 0x32
    3b7e:	4b ab       	std	Y+51, r20	; 0x33
    3b80:	5c ab       	std	Y+52, r21	; 0x34
    3b82:	6d ab       	std	Y+53, r22	; 0x35
    3b84:	7e ab       	std	Y+54, r23	; 0x36
    3b86:	8f ab       	std	Y+55, r24	; 0x37
    3b88:	98 af       	std	Y+56, r25	; 0x38
    3b8a:	8d e8       	ldi	r24, 0x8D	; 141
    3b8c:	94 e0       	ldi	r25, 0x04	; 4
    3b8e:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    3b92:	29 a7       	std	Y+41, r18	; 0x29
    3b94:	3a a7       	std	Y+42, r19	; 0x2a
    3b96:	4b a7       	std	Y+43, r20	; 0x2b
    3b98:	5c a7       	std	Y+44, r21	; 0x2c
    3b9a:	6d a7       	std	Y+45, r22	; 0x2d
    3b9c:	7e a7       	std	Y+46, r23	; 0x2e
    3b9e:	8f a7       	std	Y+47, r24	; 0x2f
    3ba0:	98 ab       	std	Y+48, r25	; 0x30
    3ba2:	99 a9       	ldd	r25, Y+49	; 0x31
    3ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ba6:	98 1b       	sub	r25, r24
    3ba8:	62 96       	adiw	r28, 0x12	; 18
    3baa:	9f af       	std	Y+63, r25	; 0x3f
    3bac:	62 97       	sbiw	r28, 0x12	; 18
    3bae:	91 e0       	ldi	r25, 0x01	; 1
    3bb0:	6a 96       	adiw	r28, 0x1a	; 26
    3bb2:	9f af       	std	Y+63, r25	; 0x3f
    3bb4:	6a 97       	sbiw	r28, 0x1a	; 26
    3bb6:	62 96       	adiw	r28, 0x12	; 18
    3bb8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bba:	62 97       	sbiw	r28, 0x12	; 18
    3bbc:	99 a9       	ldd	r25, Y+49	; 0x31
    3bbe:	98 17       	cp	r25, r24
    3bc0:	18 f0       	brcs	.+6      	; 0x3bc8 <APP_CashWithdraw_Service+0x300>
    3bc2:	6a 96       	adiw	r28, 0x1a	; 26
    3bc4:	1f ae       	std	Y+63, r1	; 0x3f
    3bc6:	6a 97       	sbiw	r28, 0x1a	; 26
    3bc8:	8a a9       	ldd	r24, Y+50	; 0x32
    3bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bcc:	89 1b       	sub	r24, r25
    3bce:	63 96       	adiw	r28, 0x13	; 19
    3bd0:	8f af       	std	Y+63, r24	; 0x3f
    3bd2:	63 97       	sbiw	r28, 0x13	; 19
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	6b 96       	adiw	r28, 0x1b	; 27
    3bd8:	8f af       	std	Y+63, r24	; 0x3f
    3bda:	6b 97       	sbiw	r28, 0x1b	; 27
    3bdc:	63 96       	adiw	r28, 0x13	; 19
    3bde:	9f ad       	ldd	r25, Y+63	; 0x3f
    3be0:	63 97       	sbiw	r28, 0x13	; 19
    3be2:	8a a9       	ldd	r24, Y+50	; 0x32
    3be4:	89 17       	cp	r24, r25
    3be6:	18 f0       	brcs	.+6      	; 0x3bee <APP_CashWithdraw_Service+0x326>
    3be8:	6b 96       	adiw	r28, 0x1b	; 27
    3bea:	1f ae       	std	Y+63, r1	; 0x3f
    3bec:	6b 97       	sbiw	r28, 0x1b	; 27
    3bee:	63 96       	adiw	r28, 0x13	; 19
    3bf0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bf2:	63 97       	sbiw	r28, 0x13	; 19
    3bf4:	6a 96       	adiw	r28, 0x1a	; 26
    3bf6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bf8:	6a 97       	sbiw	r28, 0x1a	; 26
    3bfa:	98 1b       	sub	r25, r24
    3bfc:	6c 96       	adiw	r28, 0x1c	; 28
    3bfe:	9f af       	std	Y+63, r25	; 0x3f
    3c00:	6c 97       	sbiw	r28, 0x1c	; 28
    3c02:	91 e0       	ldi	r25, 0x01	; 1
    3c04:	6d 96       	adiw	r28, 0x1d	; 29
    3c06:	9f af       	std	Y+63, r25	; 0x3f
    3c08:	6d 97       	sbiw	r28, 0x1d	; 29
    3c0a:	6c 96       	adiw	r28, 0x1c	; 28
    3c0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c0e:	6c 97       	sbiw	r28, 0x1c	; 28
    3c10:	63 96       	adiw	r28, 0x13	; 19
    3c12:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c14:	63 97       	sbiw	r28, 0x13	; 19
    3c16:	98 17       	cp	r25, r24
    3c18:	18 f0       	brcs	.+6      	; 0x3c20 <APP_CashWithdraw_Service+0x358>
    3c1a:	6d 96       	adiw	r28, 0x1d	; 29
    3c1c:	1f ae       	std	Y+63, r1	; 0x3f
    3c1e:	6d 97       	sbiw	r28, 0x1d	; 29
    3c20:	6b 96       	adiw	r28, 0x1b	; 27
    3c22:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c24:	6b 97       	sbiw	r28, 0x1b	; 27
    3c26:	6d 96       	adiw	r28, 0x1d	; 29
    3c28:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c2a:	6d 97       	sbiw	r28, 0x1d	; 29
    3c2c:	89 2b       	or	r24, r25
    3c2e:	6b 96       	adiw	r28, 0x1b	; 27
    3c30:	8f af       	std	Y+63, r24	; 0x3f
    3c32:	6b 97       	sbiw	r28, 0x1b	; 27
    3c34:	6c 96       	adiw	r28, 0x1c	; 28
    3c36:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c38:	6c 97       	sbiw	r28, 0x1c	; 28
    3c3a:	63 96       	adiw	r28, 0x13	; 19
    3c3c:	8f af       	std	Y+63, r24	; 0x3f
    3c3e:	63 97       	sbiw	r28, 0x13	; 19
    3c40:	9b a9       	ldd	r25, Y+51	; 0x33
    3c42:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c44:	98 1b       	sub	r25, r24
    3c46:	64 96       	adiw	r28, 0x14	; 20
    3c48:	9f af       	std	Y+63, r25	; 0x3f
    3c4a:	64 97       	sbiw	r28, 0x14	; 20
    3c4c:	91 e0       	ldi	r25, 0x01	; 1
    3c4e:	6e 96       	adiw	r28, 0x1e	; 30
    3c50:	9f af       	std	Y+63, r25	; 0x3f
    3c52:	6e 97       	sbiw	r28, 0x1e	; 30
    3c54:	64 96       	adiw	r28, 0x14	; 20
    3c56:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c58:	64 97       	sbiw	r28, 0x14	; 20
    3c5a:	9b a9       	ldd	r25, Y+51	; 0x33
    3c5c:	98 17       	cp	r25, r24
    3c5e:	18 f0       	brcs	.+6      	; 0x3c66 <APP_CashWithdraw_Service+0x39e>
    3c60:	6e 96       	adiw	r28, 0x1e	; 30
    3c62:	1f ae       	std	Y+63, r1	; 0x3f
    3c64:	6e 97       	sbiw	r28, 0x1e	; 30
    3c66:	64 96       	adiw	r28, 0x14	; 20
    3c68:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c6a:	64 97       	sbiw	r28, 0x14	; 20
    3c6c:	6b 96       	adiw	r28, 0x1b	; 27
    3c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c70:	6b 97       	sbiw	r28, 0x1b	; 27
    3c72:	89 1b       	sub	r24, r25
    3c74:	6f 96       	adiw	r28, 0x1f	; 31
    3c76:	8f af       	std	Y+63, r24	; 0x3f
    3c78:	6f 97       	sbiw	r28, 0x1f	; 31
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	a0 96       	adiw	r28, 0x20	; 32
    3c7e:	8f af       	std	Y+63, r24	; 0x3f
    3c80:	a0 97       	sbiw	r28, 0x20	; 32
    3c82:	6f 96       	adiw	r28, 0x1f	; 31
    3c84:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c86:	6f 97       	sbiw	r28, 0x1f	; 31
    3c88:	64 96       	adiw	r28, 0x14	; 20
    3c8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c8c:	64 97       	sbiw	r28, 0x14	; 20
    3c8e:	89 17       	cp	r24, r25
    3c90:	18 f0       	brcs	.+6      	; 0x3c98 <APP_CashWithdraw_Service+0x3d0>
    3c92:	a0 96       	adiw	r28, 0x20	; 32
    3c94:	1f ae       	std	Y+63, r1	; 0x3f
    3c96:	a0 97       	sbiw	r28, 0x20	; 32
    3c98:	6e 96       	adiw	r28, 0x1e	; 30
    3c9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c9c:	6e 97       	sbiw	r28, 0x1e	; 30
    3c9e:	a0 96       	adiw	r28, 0x20	; 32
    3ca0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ca2:	a0 97       	sbiw	r28, 0x20	; 32
    3ca4:	98 2b       	or	r25, r24
    3ca6:	6e 96       	adiw	r28, 0x1e	; 30
    3ca8:	9f af       	std	Y+63, r25	; 0x3f
    3caa:	6e 97       	sbiw	r28, 0x1e	; 30
    3cac:	6f 96       	adiw	r28, 0x1f	; 31
    3cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cb0:	6f 97       	sbiw	r28, 0x1f	; 31
    3cb2:	64 96       	adiw	r28, 0x14	; 20
    3cb4:	9f af       	std	Y+63, r25	; 0x3f
    3cb6:	64 97       	sbiw	r28, 0x14	; 20
    3cb8:	8c a9       	ldd	r24, Y+52	; 0x34
    3cba:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cbc:	89 1b       	sub	r24, r25
    3cbe:	65 96       	adiw	r28, 0x15	; 21
    3cc0:	8f af       	std	Y+63, r24	; 0x3f
    3cc2:	65 97       	sbiw	r28, 0x15	; 21
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	a1 96       	adiw	r28, 0x21	; 33
    3cc8:	8f af       	std	Y+63, r24	; 0x3f
    3cca:	a1 97       	sbiw	r28, 0x21	; 33
    3ccc:	65 96       	adiw	r28, 0x15	; 21
    3cce:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cd0:	65 97       	sbiw	r28, 0x15	; 21
    3cd2:	8c a9       	ldd	r24, Y+52	; 0x34
    3cd4:	89 17       	cp	r24, r25
    3cd6:	18 f0       	brcs	.+6      	; 0x3cde <APP_CashWithdraw_Service+0x416>
    3cd8:	a1 96       	adiw	r28, 0x21	; 33
    3cda:	1f ae       	std	Y+63, r1	; 0x3f
    3cdc:	a1 97       	sbiw	r28, 0x21	; 33
    3cde:	65 96       	adiw	r28, 0x15	; 21
    3ce0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ce2:	65 97       	sbiw	r28, 0x15	; 21
    3ce4:	6e 96       	adiw	r28, 0x1e	; 30
    3ce6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ce8:	6e 97       	sbiw	r28, 0x1e	; 30
    3cea:	98 1b       	sub	r25, r24
    3cec:	a2 96       	adiw	r28, 0x22	; 34
    3cee:	9f af       	std	Y+63, r25	; 0x3f
    3cf0:	a2 97       	sbiw	r28, 0x22	; 34
    3cf2:	91 e0       	ldi	r25, 0x01	; 1
    3cf4:	a3 96       	adiw	r28, 0x23	; 35
    3cf6:	9f af       	std	Y+63, r25	; 0x3f
    3cf8:	a3 97       	sbiw	r28, 0x23	; 35
    3cfa:	a2 96       	adiw	r28, 0x22	; 34
    3cfc:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cfe:	a2 97       	sbiw	r28, 0x22	; 34
    3d00:	65 96       	adiw	r28, 0x15	; 21
    3d02:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d04:	65 97       	sbiw	r28, 0x15	; 21
    3d06:	98 17       	cp	r25, r24
    3d08:	18 f0       	brcs	.+6      	; 0x3d10 <APP_CashWithdraw_Service+0x448>
    3d0a:	a3 96       	adiw	r28, 0x23	; 35
    3d0c:	1f ae       	std	Y+63, r1	; 0x3f
    3d0e:	a3 97       	sbiw	r28, 0x23	; 35
    3d10:	a1 96       	adiw	r28, 0x21	; 33
    3d12:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d14:	a1 97       	sbiw	r28, 0x21	; 33
    3d16:	a3 96       	adiw	r28, 0x23	; 35
    3d18:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d1a:	a3 97       	sbiw	r28, 0x23	; 35
    3d1c:	89 2b       	or	r24, r25
    3d1e:	a1 96       	adiw	r28, 0x21	; 33
    3d20:	8f af       	std	Y+63, r24	; 0x3f
    3d22:	a1 97       	sbiw	r28, 0x21	; 33
    3d24:	a2 96       	adiw	r28, 0x22	; 34
    3d26:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d28:	a2 97       	sbiw	r28, 0x22	; 34
    3d2a:	65 96       	adiw	r28, 0x15	; 21
    3d2c:	8f af       	std	Y+63, r24	; 0x3f
    3d2e:	65 97       	sbiw	r28, 0x15	; 21
    3d30:	9d a9       	ldd	r25, Y+53	; 0x35
    3d32:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d34:	98 1b       	sub	r25, r24
    3d36:	66 96       	adiw	r28, 0x16	; 22
    3d38:	9f af       	std	Y+63, r25	; 0x3f
    3d3a:	66 97       	sbiw	r28, 0x16	; 22
    3d3c:	91 e0       	ldi	r25, 0x01	; 1
    3d3e:	a4 96       	adiw	r28, 0x24	; 36
    3d40:	9f af       	std	Y+63, r25	; 0x3f
    3d42:	a4 97       	sbiw	r28, 0x24	; 36
    3d44:	66 96       	adiw	r28, 0x16	; 22
    3d46:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d48:	66 97       	sbiw	r28, 0x16	; 22
    3d4a:	9d a9       	ldd	r25, Y+53	; 0x35
    3d4c:	98 17       	cp	r25, r24
    3d4e:	18 f0       	brcs	.+6      	; 0x3d56 <APP_CashWithdraw_Service+0x48e>
    3d50:	a4 96       	adiw	r28, 0x24	; 36
    3d52:	1f ae       	std	Y+63, r1	; 0x3f
    3d54:	a4 97       	sbiw	r28, 0x24	; 36
    3d56:	66 96       	adiw	r28, 0x16	; 22
    3d58:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d5a:	66 97       	sbiw	r28, 0x16	; 22
    3d5c:	a1 96       	adiw	r28, 0x21	; 33
    3d5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d60:	a1 97       	sbiw	r28, 0x21	; 33
    3d62:	89 1b       	sub	r24, r25
    3d64:	a5 96       	adiw	r28, 0x25	; 37
    3d66:	8f af       	std	Y+63, r24	; 0x3f
    3d68:	a5 97       	sbiw	r28, 0x25	; 37
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	a6 96       	adiw	r28, 0x26	; 38
    3d6e:	8f af       	std	Y+63, r24	; 0x3f
    3d70:	a6 97       	sbiw	r28, 0x26	; 38
    3d72:	a5 96       	adiw	r28, 0x25	; 37
    3d74:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d76:	a5 97       	sbiw	r28, 0x25	; 37
    3d78:	66 96       	adiw	r28, 0x16	; 22
    3d7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d7c:	66 97       	sbiw	r28, 0x16	; 22
    3d7e:	89 17       	cp	r24, r25
    3d80:	18 f0       	brcs	.+6      	; 0x3d88 <APP_CashWithdraw_Service+0x4c0>
    3d82:	a6 96       	adiw	r28, 0x26	; 38
    3d84:	1f ae       	std	Y+63, r1	; 0x3f
    3d86:	a6 97       	sbiw	r28, 0x26	; 38
    3d88:	a4 96       	adiw	r28, 0x24	; 36
    3d8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d8c:	a4 97       	sbiw	r28, 0x24	; 36
    3d8e:	a6 96       	adiw	r28, 0x26	; 38
    3d90:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d92:	a6 97       	sbiw	r28, 0x26	; 38
    3d94:	98 2b       	or	r25, r24
    3d96:	a4 96       	adiw	r28, 0x24	; 36
    3d98:	9f af       	std	Y+63, r25	; 0x3f
    3d9a:	a4 97       	sbiw	r28, 0x24	; 36
    3d9c:	a5 96       	adiw	r28, 0x25	; 37
    3d9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3da0:	a5 97       	sbiw	r28, 0x25	; 37
    3da2:	66 96       	adiw	r28, 0x16	; 22
    3da4:	9f af       	std	Y+63, r25	; 0x3f
    3da6:	66 97       	sbiw	r28, 0x16	; 22
    3da8:	8e a9       	ldd	r24, Y+54	; 0x36
    3daa:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dac:	89 1b       	sub	r24, r25
    3dae:	67 96       	adiw	r28, 0x17	; 23
    3db0:	8f af       	std	Y+63, r24	; 0x3f
    3db2:	67 97       	sbiw	r28, 0x17	; 23
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	a7 96       	adiw	r28, 0x27	; 39
    3db8:	8f af       	std	Y+63, r24	; 0x3f
    3dba:	a7 97       	sbiw	r28, 0x27	; 39
    3dbc:	67 96       	adiw	r28, 0x17	; 23
    3dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dc0:	67 97       	sbiw	r28, 0x17	; 23
    3dc2:	8e a9       	ldd	r24, Y+54	; 0x36
    3dc4:	89 17       	cp	r24, r25
    3dc6:	18 f0       	brcs	.+6      	; 0x3dce <APP_CashWithdraw_Service+0x506>
    3dc8:	a7 96       	adiw	r28, 0x27	; 39
    3dca:	1f ae       	std	Y+63, r1	; 0x3f
    3dcc:	a7 97       	sbiw	r28, 0x27	; 39
    3dce:	67 96       	adiw	r28, 0x17	; 23
    3dd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dd2:	67 97       	sbiw	r28, 0x17	; 23
    3dd4:	a4 96       	adiw	r28, 0x24	; 36
    3dd6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3dd8:	a4 97       	sbiw	r28, 0x24	; 36
    3dda:	98 1b       	sub	r25, r24
    3ddc:	a8 96       	adiw	r28, 0x28	; 40
    3dde:	9f af       	std	Y+63, r25	; 0x3f
    3de0:	a8 97       	sbiw	r28, 0x28	; 40
    3de2:	91 e0       	ldi	r25, 0x01	; 1
    3de4:	a9 96       	adiw	r28, 0x29	; 41
    3de6:	9f af       	std	Y+63, r25	; 0x3f
    3de8:	a9 97       	sbiw	r28, 0x29	; 41
    3dea:	a8 96       	adiw	r28, 0x28	; 40
    3dec:	8f ad       	ldd	r24, Y+63	; 0x3f
    3dee:	a8 97       	sbiw	r28, 0x28	; 40
    3df0:	67 96       	adiw	r28, 0x17	; 23
    3df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3df4:	67 97       	sbiw	r28, 0x17	; 23
    3df6:	98 17       	cp	r25, r24
    3df8:	18 f0       	brcs	.+6      	; 0x3e00 <APP_CashWithdraw_Service+0x538>
    3dfa:	a9 96       	adiw	r28, 0x29	; 41
    3dfc:	1f ae       	std	Y+63, r1	; 0x3f
    3dfe:	a9 97       	sbiw	r28, 0x29	; 41
    3e00:	a7 96       	adiw	r28, 0x27	; 39
    3e02:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e04:	a7 97       	sbiw	r28, 0x27	; 39
    3e06:	a9 96       	adiw	r28, 0x29	; 41
    3e08:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e0a:	a9 97       	sbiw	r28, 0x29	; 41
    3e0c:	89 2b       	or	r24, r25
    3e0e:	a7 96       	adiw	r28, 0x27	; 39
    3e10:	8f af       	std	Y+63, r24	; 0x3f
    3e12:	a7 97       	sbiw	r28, 0x27	; 39
    3e14:	a8 96       	adiw	r28, 0x28	; 40
    3e16:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e18:	a8 97       	sbiw	r28, 0x28	; 40
    3e1a:	67 96       	adiw	r28, 0x17	; 23
    3e1c:	8f af       	std	Y+63, r24	; 0x3f
    3e1e:	67 97       	sbiw	r28, 0x17	; 23
    3e20:	9f a9       	ldd	r25, Y+55	; 0x37
    3e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e24:	98 1b       	sub	r25, r24
    3e26:	68 96       	adiw	r28, 0x18	; 24
    3e28:	9f af       	std	Y+63, r25	; 0x3f
    3e2a:	68 97       	sbiw	r28, 0x18	; 24
    3e2c:	91 e0       	ldi	r25, 0x01	; 1
    3e2e:	aa 96       	adiw	r28, 0x2a	; 42
    3e30:	9f af       	std	Y+63, r25	; 0x3f
    3e32:	aa 97       	sbiw	r28, 0x2a	; 42
    3e34:	68 96       	adiw	r28, 0x18	; 24
    3e36:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e38:	68 97       	sbiw	r28, 0x18	; 24
    3e3a:	9f a9       	ldd	r25, Y+55	; 0x37
    3e3c:	98 17       	cp	r25, r24
    3e3e:	18 f0       	brcs	.+6      	; 0x3e46 <APP_CashWithdraw_Service+0x57e>
    3e40:	aa 96       	adiw	r28, 0x2a	; 42
    3e42:	1f ae       	std	Y+63, r1	; 0x3f
    3e44:	aa 97       	sbiw	r28, 0x2a	; 42
    3e46:	68 96       	adiw	r28, 0x18	; 24
    3e48:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e4a:	68 97       	sbiw	r28, 0x18	; 24
    3e4c:	a7 96       	adiw	r28, 0x27	; 39
    3e4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e50:	a7 97       	sbiw	r28, 0x27	; 39
    3e52:	89 1b       	sub	r24, r25
    3e54:	ab 96       	adiw	r28, 0x2b	; 43
    3e56:	8f af       	std	Y+63, r24	; 0x3f
    3e58:	ab 97       	sbiw	r28, 0x2b	; 43
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	ac 96       	adiw	r28, 0x2c	; 44
    3e5e:	8f af       	std	Y+63, r24	; 0x3f
    3e60:	ac 97       	sbiw	r28, 0x2c	; 44
    3e62:	ab 96       	adiw	r28, 0x2b	; 43
    3e64:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e66:	ab 97       	sbiw	r28, 0x2b	; 43
    3e68:	68 96       	adiw	r28, 0x18	; 24
    3e6a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e6c:	68 97       	sbiw	r28, 0x18	; 24
    3e6e:	89 17       	cp	r24, r25
    3e70:	18 f0       	brcs	.+6      	; 0x3e78 <APP_CashWithdraw_Service+0x5b0>
    3e72:	ac 96       	adiw	r28, 0x2c	; 44
    3e74:	1f ae       	std	Y+63, r1	; 0x3f
    3e76:	ac 97       	sbiw	r28, 0x2c	; 44
    3e78:	aa 96       	adiw	r28, 0x2a	; 42
    3e7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e7c:	aa 97       	sbiw	r28, 0x2a	; 42
    3e7e:	ac 96       	adiw	r28, 0x2c	; 44
    3e80:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e82:	ac 97       	sbiw	r28, 0x2c	; 44
    3e84:	98 2b       	or	r25, r24
    3e86:	aa 96       	adiw	r28, 0x2a	; 42
    3e88:	9f af       	std	Y+63, r25	; 0x3f
    3e8a:	aa 97       	sbiw	r28, 0x2a	; 42
    3e8c:	ab 96       	adiw	r28, 0x2b	; 43
    3e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e90:	ab 97       	sbiw	r28, 0x2b	; 43
    3e92:	68 96       	adiw	r28, 0x18	; 24
    3e94:	9f af       	std	Y+63, r25	; 0x3f
    3e96:	68 97       	sbiw	r28, 0x18	; 24
    3e98:	88 ad       	ldd	r24, Y+56	; 0x38
    3e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e9c:	89 1b       	sub	r24, r25
    3e9e:	69 96       	adiw	r28, 0x19	; 25
    3ea0:	8f af       	std	Y+63, r24	; 0x3f
    3ea2:	69 97       	sbiw	r28, 0x19	; 25
    3ea4:	69 96       	adiw	r28, 0x19	; 25
    3ea6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ea8:	69 97       	sbiw	r28, 0x19	; 25
    3eaa:	aa 96       	adiw	r28, 0x2a	; 42
    3eac:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eae:	aa 97       	sbiw	r28, 0x2a	; 42
    3eb0:	89 1b       	sub	r24, r25
    3eb2:	69 96       	adiw	r28, 0x19	; 25
    3eb4:	8f af       	std	Y+63, r24	; 0x3f
    3eb6:	69 97       	sbiw	r28, 0x19	; 25
    3eb8:	62 96       	adiw	r28, 0x12	; 18
    3eba:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ebc:	62 97       	sbiw	r28, 0x12	; 18
    3ebe:	89 83       	std	Y+1, r24	; 0x01
    3ec0:	63 96       	adiw	r28, 0x13	; 19
    3ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ec4:	63 97       	sbiw	r28, 0x13	; 19
    3ec6:	9a 83       	std	Y+2, r25	; 0x02
    3ec8:	64 96       	adiw	r28, 0x14	; 20
    3eca:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ecc:	64 97       	sbiw	r28, 0x14	; 20
    3ece:	8b 83       	std	Y+3, r24	; 0x03
    3ed0:	65 96       	adiw	r28, 0x15	; 21
    3ed2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed4:	65 97       	sbiw	r28, 0x15	; 21
    3ed6:	9c 83       	std	Y+4, r25	; 0x04
    3ed8:	66 96       	adiw	r28, 0x16	; 22
    3eda:	8f ad       	ldd	r24, Y+63	; 0x3f
    3edc:	66 97       	sbiw	r28, 0x16	; 22
    3ede:	8d 83       	std	Y+5, r24	; 0x05
    3ee0:	67 96       	adiw	r28, 0x17	; 23
    3ee2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ee4:	67 97       	sbiw	r28, 0x17	; 23
    3ee6:	9e 83       	std	Y+6, r25	; 0x06
    3ee8:	68 96       	adiw	r28, 0x18	; 24
    3eea:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eec:	68 97       	sbiw	r28, 0x18	; 24
    3eee:	8f 83       	std	Y+7, r24	; 0x07
    3ef0:	69 96       	adiw	r28, 0x19	; 25
    3ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef4:	69 97       	sbiw	r28, 0x19	; 25
    3ef6:	98 87       	std	Y+8, r25	; 0x08
				NumberToString(NewCash, Cash);
    3ef8:	a9 80       	ldd	r10, Y+1	; 0x01
    3efa:	ba 80       	ldd	r11, Y+2	; 0x02
    3efc:	cb 80       	ldd	r12, Y+3	; 0x03
    3efe:	dc 80       	ldd	r13, Y+4	; 0x04
    3f00:	ed 80       	ldd	r14, Y+5	; 0x05
    3f02:	fe 80       	ldd	r15, Y+6	; 0x06
    3f04:	0f 81       	ldd	r16, Y+7	; 0x07
    3f06:	18 85       	ldd	r17, Y+8	; 0x08
    3f08:	ed e8       	ldi	r30, 0x8D	; 141
    3f0a:	f4 e0       	ldi	r31, 0x04	; 4
    3f0c:	2a 2d       	mov	r18, r10
    3f0e:	3b 2d       	mov	r19, r11
    3f10:	4c 2d       	mov	r20, r12
    3f12:	5d 2d       	mov	r21, r13
    3f14:	6e 2d       	mov	r22, r14
    3f16:	7f 2d       	mov	r23, r15
    3f18:	80 2f       	mov	r24, r16
    3f1a:	91 2f       	mov	r25, r17
    3f1c:	8f 01       	movw	r16, r30
    3f1e:	0e 94 50 29 	call	0x52a0	; 0x52a0 <NumberToString>
				if(UpdateClient(&CurrentClient, UpdateCash, Cash) != E_OK)
    3f22:	8d ea       	ldi	r24, 0xAD	; 173
    3f24:	94 e0       	ldi	r25, 0x04	; 4
    3f26:	2d e8       	ldi	r18, 0x8D	; 141
    3f28:	34 e0       	ldi	r19, 0x04	; 4
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	a9 01       	movw	r20, r18
    3f2e:	0e 94 25 2a 	call	0x544a	; 0x544a <UpdateClient>
    3f32:	88 23       	and	r24, r24
    3f34:	59 f0       	breq	.+22     	; 0x3f4c <APP_CashWithdraw_Service+0x684>
				{
					SWC2_SystemTick = StandardDelay;
    3f36:	8e e1       	ldi	r24, 0x1E	; 30
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	90 93 9b 04 	sts	0x049B, r25
    3f3e:	80 93 9a 04 	sts	0x049A, r24
					HandleState(Error, UnsuccessfulTransaction);
    3f42:	8f e0       	ldi	r24, 0x0F	; 15
    3f44:	65 e0       	ldi	r22, 0x05	; 5
    3f46:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3f4a:	c6 c2       	rjmp	.+1420   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
				}
				else
				{
					SWC2_SystemTick = CashGateDelay;
    3f4c:	82 e3       	ldi	r24, 0x32	; 50
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	90 93 9b 04 	sts	0x049B, r25
    3f54:	80 93 9a 04 	sts	0x049A, r24
					GateState = OPEN;
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	80 93 9e 04 	sts	0x049E, r24
					HandleState(CashWithdraw_Response, NoError);
    3f5e:	8c e0       	ldi	r24, 0x0C	; 12
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3f66:	b8 c2       	rjmp	.+1392   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
				}
			}
			else
			{
				SWC2_SystemTick = StandardDelay;
    3f68:	8e e1       	ldi	r24, 0x1E	; 30
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	90 93 9b 04 	sts	0x049B, r25
    3f70:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, NoCash);
    3f74:	8f e0       	ldi	r24, 0x0F	; 15
    3f76:	66 e0       	ldi	r22, 0x06	; 6
    3f78:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    3f7c:	ad c2       	rjmp	.+1370   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
			}
		}else{}
	}
	else if(KeypadChar == 'C')
    3f7e:	80 91 a5 04 	lds	r24, 0x04A5
    3f82:	83 34       	cpi	r24, 0x43	; 67
    3f84:	09 f0       	breq	.+2      	; 0x3f88 <APP_CashWithdraw_Service+0x6c0>
    3f86:	a8 c2       	rjmp	.+1360   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
	{
		if(CashCounter != 0)
    3f88:	80 91 99 04 	lds	r24, 0x0499
    3f8c:	88 23       	and	r24, r24
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <APP_CashWithdraw_Service+0x6ca>
    3f90:	a3 c2       	rjmp	.+1350   	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
		{
			Cash[CashCounter] = '\0';
    3f92:	80 91 99 04 	lds	r24, 0x0499
    3f96:	88 2f       	mov	r24, r24
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	e3 57       	subi	r30, 0x73	; 115
    3f9e:	fb 4f       	sbci	r31, 0xFB	; 251
    3fa0:	10 82       	st	Z, r1
			CashCounter = 0;
    3fa2:	10 92 99 04 	sts	0x0499, r1
			if(StringToNumber(CurrentClient.Cash) >= StringToNumber(Cash))
    3fa6:	8d ea       	ldi	r24, 0xAD	; 173
    3fa8:	94 e0       	ldi	r25, 0x04	; 4
    3faa:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    3fae:	29 a3       	std	Y+33, r18	; 0x21
    3fb0:	3a a3       	std	Y+34, r19	; 0x22
    3fb2:	4b a3       	std	Y+35, r20	; 0x23
    3fb4:	5c a3       	std	Y+36, r21	; 0x24
    3fb6:	6d a3       	std	Y+37, r22	; 0x25
    3fb8:	7e a3       	std	Y+38, r23	; 0x26
    3fba:	8f a3       	std	Y+39, r24	; 0x27
    3fbc:	98 a7       	std	Y+40, r25	; 0x28
    3fbe:	8d e8       	ldi	r24, 0x8D	; 141
    3fc0:	94 e0       	ldi	r25, 0x04	; 4
    3fc2:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    3fc6:	29 8f       	std	Y+25, r18	; 0x19
    3fc8:	3a 8f       	std	Y+26, r19	; 0x1a
    3fca:	4b 8f       	std	Y+27, r20	; 0x1b
    3fcc:	5c 8f       	std	Y+28, r21	; 0x1c
    3fce:	6d 8f       	std	Y+29, r22	; 0x1d
    3fd0:	7e 8f       	std	Y+30, r23	; 0x1e
    3fd2:	8f 8f       	std	Y+31, r24	; 0x1f
    3fd4:	98 a3       	std	Y+32, r25	; 0x20
    3fd6:	88 a1       	ldd	r24, Y+32	; 0x20
    3fd8:	98 a5       	ldd	r25, Y+40	; 0x28
    3fda:	98 17       	cp	r25, r24
    3fdc:	08 f4       	brcc	.+2      	; 0x3fe0 <APP_CashWithdraw_Service+0x718>
    3fde:	72 c2       	rjmp	.+1252   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    3fe0:	88 a1       	ldd	r24, Y+32	; 0x20
    3fe2:	98 a5       	ldd	r25, Y+40	; 0x28
    3fe4:	89 17       	cp	r24, r25
    3fe6:	d9 f5       	brne	.+118    	; 0x405e <APP_CashWithdraw_Service+0x796>
    3fe8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fea:	9f a1       	ldd	r25, Y+39	; 0x27
    3fec:	98 17       	cp	r25, r24
    3fee:	08 f4       	brcc	.+2      	; 0x3ff2 <APP_CashWithdraw_Service+0x72a>
    3ff0:	69 c2       	rjmp	.+1234   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    3ff2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ff4:	9f a1       	ldd	r25, Y+39	; 0x27
    3ff6:	89 17       	cp	r24, r25
    3ff8:	91 f5       	brne	.+100    	; 0x405e <APP_CashWithdraw_Service+0x796>
    3ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ffe:	98 17       	cp	r25, r24
    4000:	08 f4       	brcc	.+2      	; 0x4004 <APP_CashWithdraw_Service+0x73c>
    4002:	60 c2       	rjmp	.+1216   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    4004:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4006:	9e a1       	ldd	r25, Y+38	; 0x26
    4008:	89 17       	cp	r24, r25
    400a:	49 f5       	brne	.+82     	; 0x405e <APP_CashWithdraw_Service+0x796>
    400c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    400e:	9d a1       	ldd	r25, Y+37	; 0x25
    4010:	98 17       	cp	r25, r24
    4012:	08 f4       	brcc	.+2      	; 0x4016 <APP_CashWithdraw_Service+0x74e>
    4014:	57 c2       	rjmp	.+1198   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    4016:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4018:	9d a1       	ldd	r25, Y+37	; 0x25
    401a:	89 17       	cp	r24, r25
    401c:	01 f5       	brne	.+64     	; 0x405e <APP_CashWithdraw_Service+0x796>
    401e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4020:	9c a1       	ldd	r25, Y+36	; 0x24
    4022:	98 17       	cp	r25, r24
    4024:	08 f4       	brcc	.+2      	; 0x4028 <APP_CashWithdraw_Service+0x760>
    4026:	4e c2       	rjmp	.+1180   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    4028:	8c 8d       	ldd	r24, Y+28	; 0x1c
    402a:	9c a1       	ldd	r25, Y+36	; 0x24
    402c:	89 17       	cp	r24, r25
    402e:	b9 f4       	brne	.+46     	; 0x405e <APP_CashWithdraw_Service+0x796>
    4030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4032:	9b a1       	ldd	r25, Y+35	; 0x23
    4034:	98 17       	cp	r25, r24
    4036:	08 f4       	brcc	.+2      	; 0x403a <APP_CashWithdraw_Service+0x772>
    4038:	45 c2       	rjmp	.+1162   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    403a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403c:	9b a1       	ldd	r25, Y+35	; 0x23
    403e:	89 17       	cp	r24, r25
    4040:	71 f4       	brne	.+28     	; 0x405e <APP_CashWithdraw_Service+0x796>
    4042:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4044:	9a a1       	ldd	r25, Y+34	; 0x22
    4046:	98 17       	cp	r25, r24
    4048:	08 f4       	brcc	.+2      	; 0x404c <APP_CashWithdraw_Service+0x784>
    404a:	3c c2       	rjmp	.+1144   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
    404c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    404e:	9a a1       	ldd	r25, Y+34	; 0x22
    4050:	89 17       	cp	r24, r25
    4052:	29 f4       	brne	.+10     	; 0x405e <APP_CashWithdraw_Service+0x796>
    4054:	89 8d       	ldd	r24, Y+25	; 0x19
    4056:	99 a1       	ldd	r25, Y+33	; 0x21
    4058:	98 17       	cp	r25, r24
    405a:	08 f4       	brcc	.+2      	; 0x405e <APP_CashWithdraw_Service+0x796>
    405c:	33 c2       	rjmp	.+1126   	; 0x44c4 <APP_CashWithdraw_Service+0xbfc>
			{
				NewCash = StringToNumber(CurrentClient.Cash) - StringToNumber(Cash);
    405e:	8d ea       	ldi	r24, 0xAD	; 173
    4060:	94 e0       	ldi	r25, 0x04	; 4
    4062:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    4066:	29 8b       	std	Y+17, r18	; 0x11
    4068:	3a 8b       	std	Y+18, r19	; 0x12
    406a:	4b 8b       	std	Y+19, r20	; 0x13
    406c:	5c 8b       	std	Y+20, r21	; 0x14
    406e:	6d 8b       	std	Y+21, r22	; 0x15
    4070:	7e 8b       	std	Y+22, r23	; 0x16
    4072:	8f 8b       	std	Y+23, r24	; 0x17
    4074:	98 8f       	std	Y+24, r25	; 0x18
    4076:	8d e8       	ldi	r24, 0x8D	; 141
    4078:	94 e0       	ldi	r25, 0x04	; 4
    407a:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    407e:	29 87       	std	Y+9, r18	; 0x09
    4080:	3a 87       	std	Y+10, r19	; 0x0a
    4082:	4b 87       	std	Y+11, r20	; 0x0b
    4084:	5c 87       	std	Y+12, r21	; 0x0c
    4086:	6d 87       	std	Y+13, r22	; 0x0d
    4088:	7e 87       	std	Y+14, r23	; 0x0e
    408a:	8f 87       	std	Y+15, r24	; 0x0f
    408c:	98 8b       	std	Y+16, r25	; 0x10
    408e:	89 89       	ldd	r24, Y+17	; 0x11
    4090:	99 85       	ldd	r25, Y+9	; 0x09
    4092:	89 1b       	sub	r24, r25
    4094:	ad 96       	adiw	r28, 0x2d	; 45
    4096:	8f af       	std	Y+63, r24	; 0x3f
    4098:	ad 97       	sbiw	r28, 0x2d	; 45
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	e5 96       	adiw	r28, 0x35	; 53
    409e:	8f af       	std	Y+63, r24	; 0x3f
    40a0:	e5 97       	sbiw	r28, 0x35	; 53
    40a2:	ad 96       	adiw	r28, 0x2d	; 45
    40a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    40a6:	ad 97       	sbiw	r28, 0x2d	; 45
    40a8:	89 89       	ldd	r24, Y+17	; 0x11
    40aa:	89 17       	cp	r24, r25
    40ac:	18 f0       	brcs	.+6      	; 0x40b4 <APP_CashWithdraw_Service+0x7ec>
    40ae:	e5 96       	adiw	r28, 0x35	; 53
    40b0:	1f ae       	std	Y+63, r1	; 0x3f
    40b2:	e5 97       	sbiw	r28, 0x35	; 53
    40b4:	9a 89       	ldd	r25, Y+18	; 0x12
    40b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b8:	98 1b       	sub	r25, r24
    40ba:	ae 96       	adiw	r28, 0x2e	; 46
    40bc:	9f af       	std	Y+63, r25	; 0x3f
    40be:	ae 97       	sbiw	r28, 0x2e	; 46
    40c0:	91 e0       	ldi	r25, 0x01	; 1
    40c2:	e6 96       	adiw	r28, 0x36	; 54
    40c4:	9f af       	std	Y+63, r25	; 0x3f
    40c6:	e6 97       	sbiw	r28, 0x36	; 54
    40c8:	ae 96       	adiw	r28, 0x2e	; 46
    40ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    40cc:	ae 97       	sbiw	r28, 0x2e	; 46
    40ce:	9a 89       	ldd	r25, Y+18	; 0x12
    40d0:	98 17       	cp	r25, r24
    40d2:	18 f0       	brcs	.+6      	; 0x40da <APP_CashWithdraw_Service+0x812>
    40d4:	e6 96       	adiw	r28, 0x36	; 54
    40d6:	1f ae       	std	Y+63, r1	; 0x3f
    40d8:	e6 97       	sbiw	r28, 0x36	; 54
    40da:	ae 96       	adiw	r28, 0x2e	; 46
    40dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    40de:	ae 97       	sbiw	r28, 0x2e	; 46
    40e0:	e5 96       	adiw	r28, 0x35	; 53
    40e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    40e4:	e5 97       	sbiw	r28, 0x35	; 53
    40e6:	89 1b       	sub	r24, r25
    40e8:	e7 96       	adiw	r28, 0x37	; 55
    40ea:	8f af       	std	Y+63, r24	; 0x3f
    40ec:	e7 97       	sbiw	r28, 0x37	; 55
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	e8 96       	adiw	r28, 0x38	; 56
    40f2:	8f af       	std	Y+63, r24	; 0x3f
    40f4:	e8 97       	sbiw	r28, 0x38	; 56
    40f6:	e7 96       	adiw	r28, 0x37	; 55
    40f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    40fa:	e7 97       	sbiw	r28, 0x37	; 55
    40fc:	ae 96       	adiw	r28, 0x2e	; 46
    40fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    4100:	ae 97       	sbiw	r28, 0x2e	; 46
    4102:	89 17       	cp	r24, r25
    4104:	18 f0       	brcs	.+6      	; 0x410c <APP_CashWithdraw_Service+0x844>
    4106:	e8 96       	adiw	r28, 0x38	; 56
    4108:	1f ae       	std	Y+63, r1	; 0x3f
    410a:	e8 97       	sbiw	r28, 0x38	; 56
    410c:	e6 96       	adiw	r28, 0x36	; 54
    410e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4110:	e6 97       	sbiw	r28, 0x36	; 54
    4112:	e8 96       	adiw	r28, 0x38	; 56
    4114:	8f ad       	ldd	r24, Y+63	; 0x3f
    4116:	e8 97       	sbiw	r28, 0x38	; 56
    4118:	98 2b       	or	r25, r24
    411a:	e6 96       	adiw	r28, 0x36	; 54
    411c:	9f af       	std	Y+63, r25	; 0x3f
    411e:	e6 97       	sbiw	r28, 0x36	; 54
    4120:	e7 96       	adiw	r28, 0x37	; 55
    4122:	9f ad       	ldd	r25, Y+63	; 0x3f
    4124:	e7 97       	sbiw	r28, 0x37	; 55
    4126:	ae 96       	adiw	r28, 0x2e	; 46
    4128:	9f af       	std	Y+63, r25	; 0x3f
    412a:	ae 97       	sbiw	r28, 0x2e	; 46
    412c:	8b 89       	ldd	r24, Y+19	; 0x13
    412e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4130:	89 1b       	sub	r24, r25
    4132:	af 96       	adiw	r28, 0x2f	; 47
    4134:	8f af       	std	Y+63, r24	; 0x3f
    4136:	af 97       	sbiw	r28, 0x2f	; 47
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	e9 96       	adiw	r28, 0x39	; 57
    413c:	8f af       	std	Y+63, r24	; 0x3f
    413e:	e9 97       	sbiw	r28, 0x39	; 57
    4140:	af 96       	adiw	r28, 0x2f	; 47
    4142:	9f ad       	ldd	r25, Y+63	; 0x3f
    4144:	af 97       	sbiw	r28, 0x2f	; 47
    4146:	8b 89       	ldd	r24, Y+19	; 0x13
    4148:	89 17       	cp	r24, r25
    414a:	18 f0       	brcs	.+6      	; 0x4152 <APP_CashWithdraw_Service+0x88a>
    414c:	e9 96       	adiw	r28, 0x39	; 57
    414e:	1f ae       	std	Y+63, r1	; 0x3f
    4150:	e9 97       	sbiw	r28, 0x39	; 57
    4152:	af 96       	adiw	r28, 0x2f	; 47
    4154:	9f ad       	ldd	r25, Y+63	; 0x3f
    4156:	af 97       	sbiw	r28, 0x2f	; 47
    4158:	e6 96       	adiw	r28, 0x36	; 54
    415a:	8f ad       	ldd	r24, Y+63	; 0x3f
    415c:	e6 97       	sbiw	r28, 0x36	; 54
    415e:	98 1b       	sub	r25, r24
    4160:	ea 96       	adiw	r28, 0x3a	; 58
    4162:	9f af       	std	Y+63, r25	; 0x3f
    4164:	ea 97       	sbiw	r28, 0x3a	; 58
    4166:	91 e0       	ldi	r25, 0x01	; 1
    4168:	eb 96       	adiw	r28, 0x3b	; 59
    416a:	9f af       	std	Y+63, r25	; 0x3f
    416c:	eb 97       	sbiw	r28, 0x3b	; 59
    416e:	ea 96       	adiw	r28, 0x3a	; 58
    4170:	8f ad       	ldd	r24, Y+63	; 0x3f
    4172:	ea 97       	sbiw	r28, 0x3a	; 58
    4174:	af 96       	adiw	r28, 0x2f	; 47
    4176:	9f ad       	ldd	r25, Y+63	; 0x3f
    4178:	af 97       	sbiw	r28, 0x2f	; 47
    417a:	98 17       	cp	r25, r24
    417c:	18 f0       	brcs	.+6      	; 0x4184 <APP_CashWithdraw_Service+0x8bc>
    417e:	eb 96       	adiw	r28, 0x3b	; 59
    4180:	1f ae       	std	Y+63, r1	; 0x3f
    4182:	eb 97       	sbiw	r28, 0x3b	; 59
    4184:	e9 96       	adiw	r28, 0x39	; 57
    4186:	8f ad       	ldd	r24, Y+63	; 0x3f
    4188:	e9 97       	sbiw	r28, 0x39	; 57
    418a:	eb 96       	adiw	r28, 0x3b	; 59
    418c:	9f ad       	ldd	r25, Y+63	; 0x3f
    418e:	eb 97       	sbiw	r28, 0x3b	; 59
    4190:	89 2b       	or	r24, r25
    4192:	e9 96       	adiw	r28, 0x39	; 57
    4194:	8f af       	std	Y+63, r24	; 0x3f
    4196:	e9 97       	sbiw	r28, 0x39	; 57
    4198:	ea 96       	adiw	r28, 0x3a	; 58
    419a:	8f ad       	ldd	r24, Y+63	; 0x3f
    419c:	ea 97       	sbiw	r28, 0x3a	; 58
    419e:	af 96       	adiw	r28, 0x2f	; 47
    41a0:	8f af       	std	Y+63, r24	; 0x3f
    41a2:	af 97       	sbiw	r28, 0x2f	; 47
    41a4:	9c 89       	ldd	r25, Y+20	; 0x14
    41a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    41a8:	98 1b       	sub	r25, r24
    41aa:	e0 96       	adiw	r28, 0x30	; 48
    41ac:	9f af       	std	Y+63, r25	; 0x3f
    41ae:	e0 97       	sbiw	r28, 0x30	; 48
    41b0:	91 e0       	ldi	r25, 0x01	; 1
    41b2:	ec 96       	adiw	r28, 0x3c	; 60
    41b4:	9f af       	std	Y+63, r25	; 0x3f
    41b6:	ec 97       	sbiw	r28, 0x3c	; 60
    41b8:	e0 96       	adiw	r28, 0x30	; 48
    41ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    41bc:	e0 97       	sbiw	r28, 0x30	; 48
    41be:	9c 89       	ldd	r25, Y+20	; 0x14
    41c0:	98 17       	cp	r25, r24
    41c2:	18 f0       	brcs	.+6      	; 0x41ca <APP_CashWithdraw_Service+0x902>
    41c4:	ec 96       	adiw	r28, 0x3c	; 60
    41c6:	1f ae       	std	Y+63, r1	; 0x3f
    41c8:	ec 97       	sbiw	r28, 0x3c	; 60
    41ca:	e0 96       	adiw	r28, 0x30	; 48
    41cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    41ce:	e0 97       	sbiw	r28, 0x30	; 48
    41d0:	e9 96       	adiw	r28, 0x39	; 57
    41d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    41d4:	e9 97       	sbiw	r28, 0x39	; 57
    41d6:	89 1b       	sub	r24, r25
    41d8:	ed 96       	adiw	r28, 0x3d	; 61
    41da:	8f af       	std	Y+63, r24	; 0x3f
    41dc:	ed 97       	sbiw	r28, 0x3d	; 61
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	ee 96       	adiw	r28, 0x3e	; 62
    41e2:	8f af       	std	Y+63, r24	; 0x3f
    41e4:	ee 97       	sbiw	r28, 0x3e	; 62
    41e6:	ed 96       	adiw	r28, 0x3d	; 61
    41e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    41ea:	ed 97       	sbiw	r28, 0x3d	; 61
    41ec:	e0 96       	adiw	r28, 0x30	; 48
    41ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    41f0:	e0 97       	sbiw	r28, 0x30	; 48
    41f2:	89 17       	cp	r24, r25
    41f4:	18 f0       	brcs	.+6      	; 0x41fc <APP_CashWithdraw_Service+0x934>
    41f6:	ee 96       	adiw	r28, 0x3e	; 62
    41f8:	1f ae       	std	Y+63, r1	; 0x3f
    41fa:	ee 97       	sbiw	r28, 0x3e	; 62
    41fc:	ec 96       	adiw	r28, 0x3c	; 60
    41fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    4200:	ec 97       	sbiw	r28, 0x3c	; 60
    4202:	ee 96       	adiw	r28, 0x3e	; 62
    4204:	8f ad       	ldd	r24, Y+63	; 0x3f
    4206:	ee 97       	sbiw	r28, 0x3e	; 62
    4208:	98 2b       	or	r25, r24
    420a:	ec 96       	adiw	r28, 0x3c	; 60
    420c:	9f af       	std	Y+63, r25	; 0x3f
    420e:	ec 97       	sbiw	r28, 0x3c	; 60
    4210:	ed 96       	adiw	r28, 0x3d	; 61
    4212:	9f ad       	ldd	r25, Y+63	; 0x3f
    4214:	ed 97       	sbiw	r28, 0x3d	; 61
    4216:	e0 96       	adiw	r28, 0x30	; 48
    4218:	9f af       	std	Y+63, r25	; 0x3f
    421a:	e0 97       	sbiw	r28, 0x30	; 48
    421c:	8d 89       	ldd	r24, Y+21	; 0x15
    421e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4220:	89 1b       	sub	r24, r25
    4222:	e1 96       	adiw	r28, 0x31	; 49
    4224:	8f af       	std	Y+63, r24	; 0x3f
    4226:	e1 97       	sbiw	r28, 0x31	; 49
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	ef 96       	adiw	r28, 0x3f	; 63
    422c:	8f af       	std	Y+63, r24	; 0x3f
    422e:	ef 97       	sbiw	r28, 0x3f	; 63
    4230:	e1 96       	adiw	r28, 0x31	; 49
    4232:	9f ad       	ldd	r25, Y+63	; 0x3f
    4234:	e1 97       	sbiw	r28, 0x31	; 49
    4236:	8d 89       	ldd	r24, Y+21	; 0x15
    4238:	89 17       	cp	r24, r25
    423a:	18 f0       	brcs	.+6      	; 0x4242 <APP_CashWithdraw_Service+0x97a>
    423c:	ef 96       	adiw	r28, 0x3f	; 63
    423e:	1f ae       	std	Y+63, r1	; 0x3f
    4240:	ef 97       	sbiw	r28, 0x3f	; 63
    4242:	e1 96       	adiw	r28, 0x31	; 49
    4244:	9f ad       	ldd	r25, Y+63	; 0x3f
    4246:	e1 97       	sbiw	r28, 0x31	; 49
    4248:	ec 96       	adiw	r28, 0x3c	; 60
    424a:	8f ad       	ldd	r24, Y+63	; 0x3f
    424c:	ec 97       	sbiw	r28, 0x3c	; 60
    424e:	98 1b       	sub	r25, r24
    4250:	c1 58       	subi	r28, 0x81	; 129
    4252:	df 4f       	sbci	r29, 0xFF	; 255
    4254:	98 83       	st	Y, r25
    4256:	cf 57       	subi	r28, 0x7F	; 127
    4258:	d0 40       	sbci	r29, 0x00	; 0
    425a:	91 e0       	ldi	r25, 0x01	; 1
    425c:	c0 58       	subi	r28, 0x80	; 128
    425e:	df 4f       	sbci	r29, 0xFF	; 255
    4260:	98 83       	st	Y, r25
    4262:	c0 58       	subi	r28, 0x80	; 128
    4264:	d0 40       	sbci	r29, 0x00	; 0
    4266:	c1 58       	subi	r28, 0x81	; 129
    4268:	df 4f       	sbci	r29, 0xFF	; 255
    426a:	88 81       	ld	r24, Y
    426c:	cf 57       	subi	r28, 0x7F	; 127
    426e:	d0 40       	sbci	r29, 0x00	; 0
    4270:	e1 96       	adiw	r28, 0x31	; 49
    4272:	9f ad       	ldd	r25, Y+63	; 0x3f
    4274:	e1 97       	sbiw	r28, 0x31	; 49
    4276:	98 17       	cp	r25, r24
    4278:	28 f0       	brcs	.+10     	; 0x4284 <APP_CashWithdraw_Service+0x9bc>
    427a:	c0 58       	subi	r28, 0x80	; 128
    427c:	df 4f       	sbci	r29, 0xFF	; 255
    427e:	18 82       	st	Y, r1
    4280:	c0 58       	subi	r28, 0x80	; 128
    4282:	d0 40       	sbci	r29, 0x00	; 0
    4284:	ef 96       	adiw	r28, 0x3f	; 63
    4286:	8f ad       	ldd	r24, Y+63	; 0x3f
    4288:	ef 97       	sbiw	r28, 0x3f	; 63
    428a:	c0 58       	subi	r28, 0x80	; 128
    428c:	df 4f       	sbci	r29, 0xFF	; 255
    428e:	98 81       	ld	r25, Y
    4290:	c0 58       	subi	r28, 0x80	; 128
    4292:	d0 40       	sbci	r29, 0x00	; 0
    4294:	89 2b       	or	r24, r25
    4296:	ef 96       	adiw	r28, 0x3f	; 63
    4298:	8f af       	std	Y+63, r24	; 0x3f
    429a:	ef 97       	sbiw	r28, 0x3f	; 63
    429c:	c1 58       	subi	r28, 0x81	; 129
    429e:	df 4f       	sbci	r29, 0xFF	; 255
    42a0:	88 81       	ld	r24, Y
    42a2:	cf 57       	subi	r28, 0x7F	; 127
    42a4:	d0 40       	sbci	r29, 0x00	; 0
    42a6:	e1 96       	adiw	r28, 0x31	; 49
    42a8:	8f af       	std	Y+63, r24	; 0x3f
    42aa:	e1 97       	sbiw	r28, 0x31	; 49
    42ac:	9e 89       	ldd	r25, Y+22	; 0x16
    42ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    42b0:	98 1b       	sub	r25, r24
    42b2:	e2 96       	adiw	r28, 0x32	; 50
    42b4:	9f af       	std	Y+63, r25	; 0x3f
    42b6:	e2 97       	sbiw	r28, 0x32	; 50
    42b8:	91 e0       	ldi	r25, 0x01	; 1
    42ba:	cf 57       	subi	r28, 0x7F	; 127
    42bc:	df 4f       	sbci	r29, 0xFF	; 255
    42be:	98 83       	st	Y, r25
    42c0:	c1 58       	subi	r28, 0x81	; 129
    42c2:	d0 40       	sbci	r29, 0x00	; 0
    42c4:	e2 96       	adiw	r28, 0x32	; 50
    42c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    42c8:	e2 97       	sbiw	r28, 0x32	; 50
    42ca:	9e 89       	ldd	r25, Y+22	; 0x16
    42cc:	98 17       	cp	r25, r24
    42ce:	28 f0       	brcs	.+10     	; 0x42da <APP_CashWithdraw_Service+0xa12>
    42d0:	cf 57       	subi	r28, 0x7F	; 127
    42d2:	df 4f       	sbci	r29, 0xFF	; 255
    42d4:	18 82       	st	Y, r1
    42d6:	c1 58       	subi	r28, 0x81	; 129
    42d8:	d0 40       	sbci	r29, 0x00	; 0
    42da:	e2 96       	adiw	r28, 0x32	; 50
    42dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    42de:	e2 97       	sbiw	r28, 0x32	; 50
    42e0:	ef 96       	adiw	r28, 0x3f	; 63
    42e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    42e4:	ef 97       	sbiw	r28, 0x3f	; 63
    42e6:	89 1b       	sub	r24, r25
    42e8:	ce 57       	subi	r28, 0x7E	; 126
    42ea:	df 4f       	sbci	r29, 0xFF	; 255
    42ec:	88 83       	st	Y, r24
    42ee:	c2 58       	subi	r28, 0x82	; 130
    42f0:	d0 40       	sbci	r29, 0x00	; 0
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	cd 57       	subi	r28, 0x7D	; 125
    42f6:	df 4f       	sbci	r29, 0xFF	; 255
    42f8:	88 83       	st	Y, r24
    42fa:	c3 58       	subi	r28, 0x83	; 131
    42fc:	d0 40       	sbci	r29, 0x00	; 0
    42fe:	ce 57       	subi	r28, 0x7E	; 126
    4300:	df 4f       	sbci	r29, 0xFF	; 255
    4302:	98 81       	ld	r25, Y
    4304:	c2 58       	subi	r28, 0x82	; 130
    4306:	d0 40       	sbci	r29, 0x00	; 0
    4308:	e2 96       	adiw	r28, 0x32	; 50
    430a:	8f ad       	ldd	r24, Y+63	; 0x3f
    430c:	e2 97       	sbiw	r28, 0x32	; 50
    430e:	89 17       	cp	r24, r25
    4310:	28 f0       	brcs	.+10     	; 0x431c <APP_CashWithdraw_Service+0xa54>
    4312:	cd 57       	subi	r28, 0x7D	; 125
    4314:	df 4f       	sbci	r29, 0xFF	; 255
    4316:	18 82       	st	Y, r1
    4318:	c3 58       	subi	r28, 0x83	; 131
    431a:	d0 40       	sbci	r29, 0x00	; 0
    431c:	cf 57       	subi	r28, 0x7F	; 127
    431e:	df 4f       	sbci	r29, 0xFF	; 255
    4320:	98 81       	ld	r25, Y
    4322:	c1 58       	subi	r28, 0x81	; 129
    4324:	d0 40       	sbci	r29, 0x00	; 0
    4326:	cd 57       	subi	r28, 0x7D	; 125
    4328:	df 4f       	sbci	r29, 0xFF	; 255
    432a:	88 81       	ld	r24, Y
    432c:	c3 58       	subi	r28, 0x83	; 131
    432e:	d0 40       	sbci	r29, 0x00	; 0
    4330:	98 2b       	or	r25, r24
    4332:	cf 57       	subi	r28, 0x7F	; 127
    4334:	df 4f       	sbci	r29, 0xFF	; 255
    4336:	98 83       	st	Y, r25
    4338:	c1 58       	subi	r28, 0x81	; 129
    433a:	d0 40       	sbci	r29, 0x00	; 0
    433c:	ce 57       	subi	r28, 0x7E	; 126
    433e:	df 4f       	sbci	r29, 0xFF	; 255
    4340:	98 81       	ld	r25, Y
    4342:	c2 58       	subi	r28, 0x82	; 130
    4344:	d0 40       	sbci	r29, 0x00	; 0
    4346:	e2 96       	adiw	r28, 0x32	; 50
    4348:	9f af       	std	Y+63, r25	; 0x3f
    434a:	e2 97       	sbiw	r28, 0x32	; 50
    434c:	8f 89       	ldd	r24, Y+23	; 0x17
    434e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4350:	89 1b       	sub	r24, r25
    4352:	e3 96       	adiw	r28, 0x33	; 51
    4354:	8f af       	std	Y+63, r24	; 0x3f
    4356:	e3 97       	sbiw	r28, 0x33	; 51
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	cc 57       	subi	r28, 0x7C	; 124
    435c:	df 4f       	sbci	r29, 0xFF	; 255
    435e:	88 83       	st	Y, r24
    4360:	c4 58       	subi	r28, 0x84	; 132
    4362:	d0 40       	sbci	r29, 0x00	; 0
    4364:	e3 96       	adiw	r28, 0x33	; 51
    4366:	9f ad       	ldd	r25, Y+63	; 0x3f
    4368:	e3 97       	sbiw	r28, 0x33	; 51
    436a:	8f 89       	ldd	r24, Y+23	; 0x17
    436c:	89 17       	cp	r24, r25
    436e:	28 f0       	brcs	.+10     	; 0x437a <APP_CashWithdraw_Service+0xab2>
    4370:	cc 57       	subi	r28, 0x7C	; 124
    4372:	df 4f       	sbci	r29, 0xFF	; 255
    4374:	18 82       	st	Y, r1
    4376:	c4 58       	subi	r28, 0x84	; 132
    4378:	d0 40       	sbci	r29, 0x00	; 0
    437a:	e3 96       	adiw	r28, 0x33	; 51
    437c:	9f ad       	ldd	r25, Y+63	; 0x3f
    437e:	e3 97       	sbiw	r28, 0x33	; 51
    4380:	cf 57       	subi	r28, 0x7F	; 127
    4382:	df 4f       	sbci	r29, 0xFF	; 255
    4384:	88 81       	ld	r24, Y
    4386:	c1 58       	subi	r28, 0x81	; 129
    4388:	d0 40       	sbci	r29, 0x00	; 0
    438a:	98 1b       	sub	r25, r24
    438c:	cb 57       	subi	r28, 0x7B	; 123
    438e:	df 4f       	sbci	r29, 0xFF	; 255
    4390:	98 83       	st	Y, r25
    4392:	c5 58       	subi	r28, 0x85	; 133
    4394:	d0 40       	sbci	r29, 0x00	; 0
    4396:	91 e0       	ldi	r25, 0x01	; 1
    4398:	ca 57       	subi	r28, 0x7A	; 122
    439a:	df 4f       	sbci	r29, 0xFF	; 255
    439c:	98 83       	st	Y, r25
    439e:	c6 58       	subi	r28, 0x86	; 134
    43a0:	d0 40       	sbci	r29, 0x00	; 0
    43a2:	cb 57       	subi	r28, 0x7B	; 123
    43a4:	df 4f       	sbci	r29, 0xFF	; 255
    43a6:	88 81       	ld	r24, Y
    43a8:	c5 58       	subi	r28, 0x85	; 133
    43aa:	d0 40       	sbci	r29, 0x00	; 0
    43ac:	e3 96       	adiw	r28, 0x33	; 51
    43ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    43b0:	e3 97       	sbiw	r28, 0x33	; 51
    43b2:	98 17       	cp	r25, r24
    43b4:	28 f0       	brcs	.+10     	; 0x43c0 <APP_CashWithdraw_Service+0xaf8>
    43b6:	ca 57       	subi	r28, 0x7A	; 122
    43b8:	df 4f       	sbci	r29, 0xFF	; 255
    43ba:	18 82       	st	Y, r1
    43bc:	c6 58       	subi	r28, 0x86	; 134
    43be:	d0 40       	sbci	r29, 0x00	; 0
    43c0:	cc 57       	subi	r28, 0x7C	; 124
    43c2:	df 4f       	sbci	r29, 0xFF	; 255
    43c4:	88 81       	ld	r24, Y
    43c6:	c4 58       	subi	r28, 0x84	; 132
    43c8:	d0 40       	sbci	r29, 0x00	; 0
    43ca:	ca 57       	subi	r28, 0x7A	; 122
    43cc:	df 4f       	sbci	r29, 0xFF	; 255
    43ce:	98 81       	ld	r25, Y
    43d0:	c6 58       	subi	r28, 0x86	; 134
    43d2:	d0 40       	sbci	r29, 0x00	; 0
    43d4:	89 2b       	or	r24, r25
    43d6:	cc 57       	subi	r28, 0x7C	; 124
    43d8:	df 4f       	sbci	r29, 0xFF	; 255
    43da:	88 83       	st	Y, r24
    43dc:	c4 58       	subi	r28, 0x84	; 132
    43de:	d0 40       	sbci	r29, 0x00	; 0
    43e0:	cb 57       	subi	r28, 0x7B	; 123
    43e2:	df 4f       	sbci	r29, 0xFF	; 255
    43e4:	88 81       	ld	r24, Y
    43e6:	c5 58       	subi	r28, 0x85	; 133
    43e8:	d0 40       	sbci	r29, 0x00	; 0
    43ea:	e3 96       	adiw	r28, 0x33	; 51
    43ec:	8f af       	std	Y+63, r24	; 0x3f
    43ee:	e3 97       	sbiw	r28, 0x33	; 51
    43f0:	98 8d       	ldd	r25, Y+24	; 0x18
    43f2:	88 89       	ldd	r24, Y+16	; 0x10
    43f4:	98 1b       	sub	r25, r24
    43f6:	e4 96       	adiw	r28, 0x34	; 52
    43f8:	9f af       	std	Y+63, r25	; 0x3f
    43fa:	e4 97       	sbiw	r28, 0x34	; 52
    43fc:	e4 96       	adiw	r28, 0x34	; 52
    43fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    4400:	e4 97       	sbiw	r28, 0x34	; 52
    4402:	cc 57       	subi	r28, 0x7C	; 124
    4404:	df 4f       	sbci	r29, 0xFF	; 255
    4406:	98 81       	ld	r25, Y
    4408:	c4 58       	subi	r28, 0x84	; 132
    440a:	d0 40       	sbci	r29, 0x00	; 0
    440c:	89 1b       	sub	r24, r25
    440e:	e4 96       	adiw	r28, 0x34	; 52
    4410:	8f af       	std	Y+63, r24	; 0x3f
    4412:	e4 97       	sbiw	r28, 0x34	; 52
    4414:	ad 96       	adiw	r28, 0x2d	; 45
    4416:	8f ad       	ldd	r24, Y+63	; 0x3f
    4418:	ad 97       	sbiw	r28, 0x2d	; 45
    441a:	89 83       	std	Y+1, r24	; 0x01
    441c:	ae 96       	adiw	r28, 0x2e	; 46
    441e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4420:	ae 97       	sbiw	r28, 0x2e	; 46
    4422:	9a 83       	std	Y+2, r25	; 0x02
    4424:	af 96       	adiw	r28, 0x2f	; 47
    4426:	8f ad       	ldd	r24, Y+63	; 0x3f
    4428:	af 97       	sbiw	r28, 0x2f	; 47
    442a:	8b 83       	std	Y+3, r24	; 0x03
    442c:	e0 96       	adiw	r28, 0x30	; 48
    442e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4430:	e0 97       	sbiw	r28, 0x30	; 48
    4432:	9c 83       	std	Y+4, r25	; 0x04
    4434:	e1 96       	adiw	r28, 0x31	; 49
    4436:	8f ad       	ldd	r24, Y+63	; 0x3f
    4438:	e1 97       	sbiw	r28, 0x31	; 49
    443a:	8d 83       	std	Y+5, r24	; 0x05
    443c:	e2 96       	adiw	r28, 0x32	; 50
    443e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4440:	e2 97       	sbiw	r28, 0x32	; 50
    4442:	9e 83       	std	Y+6, r25	; 0x06
    4444:	e3 96       	adiw	r28, 0x33	; 51
    4446:	8f ad       	ldd	r24, Y+63	; 0x3f
    4448:	e3 97       	sbiw	r28, 0x33	; 51
    444a:	8f 83       	std	Y+7, r24	; 0x07
    444c:	e4 96       	adiw	r28, 0x34	; 52
    444e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4450:	e4 97       	sbiw	r28, 0x34	; 52
    4452:	98 87       	std	Y+8, r25	; 0x08
				NumberToString(NewCash, Cash);
    4454:	a9 80       	ldd	r10, Y+1	; 0x01
    4456:	ba 80       	ldd	r11, Y+2	; 0x02
    4458:	cb 80       	ldd	r12, Y+3	; 0x03
    445a:	dc 80       	ldd	r13, Y+4	; 0x04
    445c:	ed 80       	ldd	r14, Y+5	; 0x05
    445e:	fe 80       	ldd	r15, Y+6	; 0x06
    4460:	0f 81       	ldd	r16, Y+7	; 0x07
    4462:	18 85       	ldd	r17, Y+8	; 0x08
    4464:	ed e8       	ldi	r30, 0x8D	; 141
    4466:	f4 e0       	ldi	r31, 0x04	; 4
    4468:	2a 2d       	mov	r18, r10
    446a:	3b 2d       	mov	r19, r11
    446c:	4c 2d       	mov	r20, r12
    446e:	5d 2d       	mov	r21, r13
    4470:	6e 2d       	mov	r22, r14
    4472:	7f 2d       	mov	r23, r15
    4474:	80 2f       	mov	r24, r16
    4476:	91 2f       	mov	r25, r17
    4478:	8f 01       	movw	r16, r30
    447a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <NumberToString>
				if(UpdateClient(&CurrentClient, UpdateCash, Cash) != E_OK)
    447e:	8d ea       	ldi	r24, 0xAD	; 173
    4480:	94 e0       	ldi	r25, 0x04	; 4
    4482:	2d e8       	ldi	r18, 0x8D	; 141
    4484:	34 e0       	ldi	r19, 0x04	; 4
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	a9 01       	movw	r20, r18
    448a:	0e 94 25 2a 	call	0x544a	; 0x544a <UpdateClient>
    448e:	88 23       	and	r24, r24
    4490:	59 f0       	breq	.+22     	; 0x44a8 <APP_CashWithdraw_Service+0xbe0>
				{
					SWC2_SystemTick = StandardDelay;
    4492:	8e e1       	ldi	r24, 0x1E	; 30
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	90 93 9b 04 	sts	0x049B, r25
    449a:	80 93 9a 04 	sts	0x049A, r24
					HandleState(Error, UnsuccessfulTransaction);
    449e:	8f e0       	ldi	r24, 0x0F	; 15
    44a0:	65 e0       	ldi	r22, 0x05	; 5
    44a2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    44a6:	18 c0       	rjmp	.+48     	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
				}
				else
				{
					SWC2_SystemTick = CashGateDelay;
    44a8:	82 e3       	ldi	r24, 0x32	; 50
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	90 93 9b 04 	sts	0x049B, r25
    44b0:	80 93 9a 04 	sts	0x049A, r24
					GateState = OPEN;
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	80 93 9e 04 	sts	0x049E, r24
					HandleState(CashWithdraw_Response, NoError);
    44ba:	8c e0       	ldi	r24, 0x0C	; 12
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    44c2:	0a c0       	rjmp	.+20     	; 0x44d8 <APP_CashWithdraw_Service+0xc10>
				}
			}
			else
			{
				SWC2_SystemTick = StandardDelay;
    44c4:	8e e1       	ldi	r24, 0x1E	; 30
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	90 93 9b 04 	sts	0x049B, r25
    44cc:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, NoCash);
    44d0:	8f e0       	ldi	r24, 0x0F	; 15
    44d2:	66 e0       	ldi	r22, 0x06	; 6
    44d4:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
			}
		}else{}
	}else{}
}
    44d8:	ca 57       	subi	r28, 0x7A	; 122
    44da:	df 4f       	sbci	r29, 0xFF	; 255
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	f8 94       	cli
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	ff 90       	pop	r15
    44f0:	ef 90       	pop	r14
    44f2:	df 90       	pop	r13
    44f4:	cf 90       	pop	r12
    44f6:	bf 90       	pop	r11
    44f8:	af 90       	pop	r10
    44fa:	08 95       	ret

000044fc <APP_CreditDeposit_Service>:

void APP_CreditDeposit_Service(void)
{
    44fc:	af 92       	push	r10
    44fe:	bf 92       	push	r11
    4500:	cf 92       	push	r12
    4502:	df 92       	push	r13
    4504:	ef 92       	push	r14
    4506:	ff 92       	push	r15
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    450c:	df 93       	push	r29
    450e:	cf 93       	push	r28
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	c6 56       	subi	r28, 0x66	; 102
    4516:	d0 40       	sbci	r29, 0x00	; 0
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	f8 94       	cli
    451c:	de bf       	out	0x3e, r29	; 62
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	cd bf       	out	0x3d, r28	; 61
	uint64 NewCash = 0;
    4522:	19 82       	std	Y+1, r1	; 0x01
    4524:	1a 82       	std	Y+2, r1	; 0x02
    4526:	1b 82       	std	Y+3, r1	; 0x03
    4528:	1c 82       	std	Y+4, r1	; 0x04
    452a:	1d 82       	std	Y+5, r1	; 0x05
    452c:	1e 82       	std	Y+6, r1	; 0x06
    452e:	1f 82       	std	Y+7, r1	; 0x07
    4530:	18 86       	std	Y+8, r1	; 0x08
	if(KeypadChar >= '0' && KeypadChar <= '9')
    4532:	80 91 a5 04 	lds	r24, 0x04A5
    4536:	80 33       	cpi	r24, 0x30	; 48
    4538:	08 f4       	brcc	.+2      	; 0x453c <APP_CreditDeposit_Service+0x40>
    453a:	e1 c1       	rjmp	.+962    	; 0x48fe <APP_CreditDeposit_Service+0x402>
    453c:	80 91 a5 04 	lds	r24, 0x04A5
    4540:	8a 33       	cpi	r24, 0x3A	; 58
    4542:	08 f0       	brcs	.+2      	; 0x4546 <APP_CreditDeposit_Service+0x4a>
    4544:	dc c1       	rjmp	.+952    	; 0x48fe <APP_CreditDeposit_Service+0x402>
	{
		SWC3_SystemTick = KYEPAD_DelayTicks;
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	80 93 98 04 	sts	0x0498, r24
		Cash[CashCounter] = KeypadChar;
    454c:	80 91 99 04 	lds	r24, 0x0499
    4550:	88 2f       	mov	r24, r24
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	20 91 a5 04 	lds	r18, 0x04A5
    4558:	fc 01       	movw	r30, r24
    455a:	e3 57       	subi	r30, 0x73	; 115
    455c:	fb 4f       	sbci	r31, 0xFB	; 251
    455e:	20 83       	st	Z, r18
		CashCounter++;
    4560:	80 91 99 04 	lds	r24, 0x0499
    4564:	8f 5f       	subi	r24, 0xFF	; 255
    4566:	80 93 99 04 	sts	0x0499, r24
		LCD_Char = KeypadChar;
    456a:	80 91 a5 04 	lds	r24, 0x04A5
    456e:	80 93 96 04 	sts	0x0496, r24
		LCD_PrintCharFlag = TRUE;
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	80 93 97 04 	sts	0x0497, r24
		if(CashCounter == CASH_DigitNum)
    4578:	80 91 99 04 	lds	r24, 0x0499
    457c:	84 30       	cpi	r24, 0x04	; 4
    457e:	09 f0       	breq	.+2      	; 0x4582 <APP_CreditDeposit_Service+0x86>
    4580:	c9 c3       	rjmp	.+1938   	; 0x4d14 <APP_CreditDeposit_Service+0x818>
		{
			Cash[CashCounter] = '\0';
    4582:	80 91 99 04 	lds	r24, 0x0499
    4586:	88 2f       	mov	r24, r24
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	fc 01       	movw	r30, r24
    458c:	e3 57       	subi	r30, 0x73	; 115
    458e:	fb 4f       	sbci	r31, 0xFB	; 251
    4590:	10 82       	st	Z, r1
			CashCounter = 0;
    4592:	10 92 99 04 	sts	0x0499, r1
			if(StringToNumber(Cash) > MaxAmountOfCash)
    4596:	8d e8       	ldi	r24, 0x8D	; 141
    4598:	94 e0       	ldi	r25, 0x04	; 4
    459a:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    459e:	29 a7       	std	Y+41, r18	; 0x29
    45a0:	3a a7       	std	Y+42, r19	; 0x2a
    45a2:	4b a7       	std	Y+43, r20	; 0x2b
    45a4:	5c a7       	std	Y+44, r21	; 0x2c
    45a6:	6d a7       	std	Y+45, r22	; 0x2d
    45a8:	7e a7       	std	Y+46, r23	; 0x2e
    45aa:	8f a7       	std	Y+47, r24	; 0x2f
    45ac:	98 ab       	std	Y+48, r25	; 0x30
    45ae:	88 a9       	ldd	r24, Y+48	; 0x30
    45b0:	88 23       	and	r24, r24
    45b2:	51 f5       	brne	.+84     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45b4:	98 a9       	ldd	r25, Y+48	; 0x30
    45b6:	99 23       	and	r25, r25
    45b8:	91 f5       	brne	.+100    	; 0x461e <APP_CreditDeposit_Service+0x122>
    45ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    45bc:	88 23       	and	r24, r24
    45be:	21 f5       	brne	.+72     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45c0:	9f a5       	ldd	r25, Y+47	; 0x2f
    45c2:	99 23       	and	r25, r25
    45c4:	61 f5       	brne	.+88     	; 0x461e <APP_CreditDeposit_Service+0x122>
    45c6:	8e a5       	ldd	r24, Y+46	; 0x2e
    45c8:	88 23       	and	r24, r24
    45ca:	f1 f4       	brne	.+60     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    45ce:	99 23       	and	r25, r25
    45d0:	31 f5       	brne	.+76     	; 0x461e <APP_CreditDeposit_Service+0x122>
    45d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    45d4:	88 23       	and	r24, r24
    45d6:	c1 f4       	brne	.+48     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    45da:	99 23       	and	r25, r25
    45dc:	01 f5       	brne	.+64     	; 0x461e <APP_CreditDeposit_Service+0x122>
    45de:	8c a5       	ldd	r24, Y+44	; 0x2c
    45e0:	88 23       	and	r24, r24
    45e2:	91 f4       	brne	.+36     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    45e6:	99 23       	and	r25, r25
    45e8:	d1 f4       	brne	.+52     	; 0x461e <APP_CreditDeposit_Service+0x122>
    45ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    45ec:	88 23       	and	r24, r24
    45ee:	61 f4       	brne	.+24     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    45f2:	99 23       	and	r25, r25
    45f4:	a1 f4       	brne	.+40     	; 0x461e <APP_CreditDeposit_Service+0x122>
    45f6:	8a a5       	ldd	r24, Y+42	; 0x2a
    45f8:	84 31       	cpi	r24, 0x14	; 20
    45fa:	30 f4       	brcc	.+12     	; 0x4608 <APP_CreditDeposit_Service+0x10c>
    45fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    45fe:	93 31       	cpi	r25, 0x13	; 19
    4600:	71 f4       	brne	.+28     	; 0x461e <APP_CreditDeposit_Service+0x122>
    4602:	89 a5       	ldd	r24, Y+41	; 0x29
    4604:	89 38       	cpi	r24, 0x89	; 137
    4606:	58 f0       	brcs	.+22     	; 0x461e <APP_CreditDeposit_Service+0x122>
			{
				SWC2_SystemTick = StandardDelay;
    4608:	8e e1       	ldi	r24, 0x1E	; 30
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	90 93 9b 04 	sts	0x049B, r25
    4610:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, MaxAmountPerTransaction);
    4614:	8f e0       	ldi	r24, 0x0F	; 15
    4616:	63 e0       	ldi	r22, 0x03	; 3
    4618:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    461c:	7b c3       	rjmp	.+1782   	; 0x4d14 <APP_CreditDeposit_Service+0x818>
			}
			else
			{
				NewCash = StringToNumber(CurrentClient.Cash) + StringToNumber(Cash);
    461e:	8d ea       	ldi	r24, 0xAD	; 173
    4620:	94 e0       	ldi	r25, 0x04	; 4
    4622:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    4626:	29 a3       	std	Y+33, r18	; 0x21
    4628:	3a a3       	std	Y+34, r19	; 0x22
    462a:	4b a3       	std	Y+35, r20	; 0x23
    462c:	5c a3       	std	Y+36, r21	; 0x24
    462e:	6d a3       	std	Y+37, r22	; 0x25
    4630:	7e a3       	std	Y+38, r23	; 0x26
    4632:	8f a3       	std	Y+39, r24	; 0x27
    4634:	98 a7       	std	Y+40, r25	; 0x28
    4636:	8d e8       	ldi	r24, 0x8D	; 141
    4638:	94 e0       	ldi	r25, 0x04	; 4
    463a:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    463e:	29 8f       	std	Y+25, r18	; 0x19
    4640:	3a 8f       	std	Y+26, r19	; 0x1a
    4642:	4b 8f       	std	Y+27, r20	; 0x1b
    4644:	5c 8f       	std	Y+28, r21	; 0x1c
    4646:	6d 8f       	std	Y+29, r22	; 0x1d
    4648:	7e 8f       	std	Y+30, r23	; 0x1e
    464a:	8f 8f       	std	Y+31, r24	; 0x1f
    464c:	98 a3       	std	Y+32, r25	; 0x20
    464e:	99 a1       	ldd	r25, Y+33	; 0x21
    4650:	89 8d       	ldd	r24, Y+25	; 0x19
    4652:	98 0f       	add	r25, r24
    4654:	99 ab       	std	Y+49, r25	; 0x31
    4656:	91 e0       	ldi	r25, 0x01	; 1
    4658:	99 af       	std	Y+57, r25	; 0x39
    465a:	89 a9       	ldd	r24, Y+49	; 0x31
    465c:	99 a1       	ldd	r25, Y+33	; 0x21
    465e:	89 17       	cp	r24, r25
    4660:	08 f0       	brcs	.+2      	; 0x4664 <APP_CreditDeposit_Service+0x168>
    4662:	19 ae       	std	Y+57, r1	; 0x39
    4664:	8a a1       	ldd	r24, Y+34	; 0x22
    4666:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4668:	89 0f       	add	r24, r25
    466a:	8a ab       	std	Y+50, r24	; 0x32
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	8a af       	std	Y+58, r24	; 0x3a
    4670:	9a a9       	ldd	r25, Y+50	; 0x32
    4672:	8a a1       	ldd	r24, Y+34	; 0x22
    4674:	98 17       	cp	r25, r24
    4676:	08 f0       	brcs	.+2      	; 0x467a <APP_CreditDeposit_Service+0x17e>
    4678:	1a ae       	std	Y+58, r1	; 0x3a
    467a:	99 ad       	ldd	r25, Y+57	; 0x39
    467c:	8a a9       	ldd	r24, Y+50	; 0x32
    467e:	98 0f       	add	r25, r24
    4680:	9b af       	std	Y+59, r25	; 0x3b
    4682:	91 e0       	ldi	r25, 0x01	; 1
    4684:	9c af       	std	Y+60, r25	; 0x3c
    4686:	8b ad       	ldd	r24, Y+59	; 0x3b
    4688:	9a a9       	ldd	r25, Y+50	; 0x32
    468a:	89 17       	cp	r24, r25
    468c:	08 f0       	brcs	.+2      	; 0x4690 <APP_CreditDeposit_Service+0x194>
    468e:	1c ae       	std	Y+60, r1	; 0x3c
    4690:	8a ad       	ldd	r24, Y+58	; 0x3a
    4692:	9c ad       	ldd	r25, Y+60	; 0x3c
    4694:	89 2b       	or	r24, r25
    4696:	8a af       	std	Y+58, r24	; 0x3a
    4698:	8b ad       	ldd	r24, Y+59	; 0x3b
    469a:	8a ab       	std	Y+50, r24	; 0x32
    469c:	9b a1       	ldd	r25, Y+35	; 0x23
    469e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a0:	98 0f       	add	r25, r24
    46a2:	9b ab       	std	Y+51, r25	; 0x33
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	9d af       	std	Y+61, r25	; 0x3d
    46a8:	8b a9       	ldd	r24, Y+51	; 0x33
    46aa:	9b a1       	ldd	r25, Y+35	; 0x23
    46ac:	89 17       	cp	r24, r25
    46ae:	08 f0       	brcs	.+2      	; 0x46b2 <APP_CreditDeposit_Service+0x1b6>
    46b0:	1d ae       	std	Y+61, r1	; 0x3d
    46b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    46b4:	9b a9       	ldd	r25, Y+51	; 0x33
    46b6:	89 0f       	add	r24, r25
    46b8:	8e af       	std	Y+62, r24	; 0x3e
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	8f af       	std	Y+63, r24	; 0x3f
    46be:	9e ad       	ldd	r25, Y+62	; 0x3e
    46c0:	8b a9       	ldd	r24, Y+51	; 0x33
    46c2:	98 17       	cp	r25, r24
    46c4:	08 f0       	brcs	.+2      	; 0x46c8 <APP_CreditDeposit_Service+0x1cc>
    46c6:	1f ae       	std	Y+63, r1	; 0x3f
    46c8:	9d ad       	ldd	r25, Y+61	; 0x3d
    46ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    46cc:	98 2b       	or	r25, r24
    46ce:	9d af       	std	Y+61, r25	; 0x3d
    46d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    46d2:	9b ab       	std	Y+51, r25	; 0x33
    46d4:	8c a1       	ldd	r24, Y+36	; 0x24
    46d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46d8:	89 0f       	add	r24, r25
    46da:	8c ab       	std	Y+52, r24	; 0x34
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	21 96       	adiw	r28, 0x01	; 1
    46e0:	8f af       	std	Y+63, r24	; 0x3f
    46e2:	21 97       	sbiw	r28, 0x01	; 1
    46e4:	9c a9       	ldd	r25, Y+52	; 0x34
    46e6:	8c a1       	ldd	r24, Y+36	; 0x24
    46e8:	98 17       	cp	r25, r24
    46ea:	18 f0       	brcs	.+6      	; 0x46f2 <APP_CreditDeposit_Service+0x1f6>
    46ec:	21 96       	adiw	r28, 0x01	; 1
    46ee:	1f ae       	std	Y+63, r1	; 0x3f
    46f0:	21 97       	sbiw	r28, 0x01	; 1
    46f2:	9d ad       	ldd	r25, Y+61	; 0x3d
    46f4:	8c a9       	ldd	r24, Y+52	; 0x34
    46f6:	98 0f       	add	r25, r24
    46f8:	22 96       	adiw	r28, 0x02	; 2
    46fa:	9f af       	std	Y+63, r25	; 0x3f
    46fc:	22 97       	sbiw	r28, 0x02	; 2
    46fe:	91 e0       	ldi	r25, 0x01	; 1
    4700:	23 96       	adiw	r28, 0x03	; 3
    4702:	9f af       	std	Y+63, r25	; 0x3f
    4704:	23 97       	sbiw	r28, 0x03	; 3
    4706:	22 96       	adiw	r28, 0x02	; 2
    4708:	8f ad       	ldd	r24, Y+63	; 0x3f
    470a:	22 97       	sbiw	r28, 0x02	; 2
    470c:	9c a9       	ldd	r25, Y+52	; 0x34
    470e:	89 17       	cp	r24, r25
    4710:	18 f0       	brcs	.+6      	; 0x4718 <APP_CreditDeposit_Service+0x21c>
    4712:	23 96       	adiw	r28, 0x03	; 3
    4714:	1f ae       	std	Y+63, r1	; 0x3f
    4716:	23 97       	sbiw	r28, 0x03	; 3
    4718:	21 96       	adiw	r28, 0x01	; 1
    471a:	8f ad       	ldd	r24, Y+63	; 0x3f
    471c:	21 97       	sbiw	r28, 0x01	; 1
    471e:	23 96       	adiw	r28, 0x03	; 3
    4720:	9f ad       	ldd	r25, Y+63	; 0x3f
    4722:	23 97       	sbiw	r28, 0x03	; 3
    4724:	89 2b       	or	r24, r25
    4726:	21 96       	adiw	r28, 0x01	; 1
    4728:	8f af       	std	Y+63, r24	; 0x3f
    472a:	21 97       	sbiw	r28, 0x01	; 1
    472c:	22 96       	adiw	r28, 0x02	; 2
    472e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4730:	22 97       	sbiw	r28, 0x02	; 2
    4732:	8c ab       	std	Y+52, r24	; 0x34
    4734:	9d a1       	ldd	r25, Y+37	; 0x25
    4736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4738:	98 0f       	add	r25, r24
    473a:	9d ab       	std	Y+53, r25	; 0x35
    473c:	91 e0       	ldi	r25, 0x01	; 1
    473e:	24 96       	adiw	r28, 0x04	; 4
    4740:	9f af       	std	Y+63, r25	; 0x3f
    4742:	24 97       	sbiw	r28, 0x04	; 4
    4744:	8d a9       	ldd	r24, Y+53	; 0x35
    4746:	9d a1       	ldd	r25, Y+37	; 0x25
    4748:	89 17       	cp	r24, r25
    474a:	18 f0       	brcs	.+6      	; 0x4752 <APP_CreditDeposit_Service+0x256>
    474c:	24 96       	adiw	r28, 0x04	; 4
    474e:	1f ae       	std	Y+63, r1	; 0x3f
    4750:	24 97       	sbiw	r28, 0x04	; 4
    4752:	21 96       	adiw	r28, 0x01	; 1
    4754:	8f ad       	ldd	r24, Y+63	; 0x3f
    4756:	21 97       	sbiw	r28, 0x01	; 1
    4758:	9d a9       	ldd	r25, Y+53	; 0x35
    475a:	89 0f       	add	r24, r25
    475c:	25 96       	adiw	r28, 0x05	; 5
    475e:	8f af       	std	Y+63, r24	; 0x3f
    4760:	25 97       	sbiw	r28, 0x05	; 5
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	26 96       	adiw	r28, 0x06	; 6
    4766:	8f af       	std	Y+63, r24	; 0x3f
    4768:	26 97       	sbiw	r28, 0x06	; 6
    476a:	25 96       	adiw	r28, 0x05	; 5
    476c:	9f ad       	ldd	r25, Y+63	; 0x3f
    476e:	25 97       	sbiw	r28, 0x05	; 5
    4770:	8d a9       	ldd	r24, Y+53	; 0x35
    4772:	98 17       	cp	r25, r24
    4774:	18 f0       	brcs	.+6      	; 0x477c <APP_CreditDeposit_Service+0x280>
    4776:	26 96       	adiw	r28, 0x06	; 6
    4778:	1f ae       	std	Y+63, r1	; 0x3f
    477a:	26 97       	sbiw	r28, 0x06	; 6
    477c:	24 96       	adiw	r28, 0x04	; 4
    477e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4780:	24 97       	sbiw	r28, 0x04	; 4
    4782:	26 96       	adiw	r28, 0x06	; 6
    4784:	8f ad       	ldd	r24, Y+63	; 0x3f
    4786:	26 97       	sbiw	r28, 0x06	; 6
    4788:	98 2b       	or	r25, r24
    478a:	24 96       	adiw	r28, 0x04	; 4
    478c:	9f af       	std	Y+63, r25	; 0x3f
    478e:	24 97       	sbiw	r28, 0x04	; 4
    4790:	25 96       	adiw	r28, 0x05	; 5
    4792:	9f ad       	ldd	r25, Y+63	; 0x3f
    4794:	25 97       	sbiw	r28, 0x05	; 5
    4796:	9d ab       	std	Y+53, r25	; 0x35
    4798:	8e a1       	ldd	r24, Y+38	; 0x26
    479a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    479c:	89 0f       	add	r24, r25
    479e:	8e ab       	std	Y+54, r24	; 0x36
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	27 96       	adiw	r28, 0x07	; 7
    47a4:	8f af       	std	Y+63, r24	; 0x3f
    47a6:	27 97       	sbiw	r28, 0x07	; 7
    47a8:	9e a9       	ldd	r25, Y+54	; 0x36
    47aa:	8e a1       	ldd	r24, Y+38	; 0x26
    47ac:	98 17       	cp	r25, r24
    47ae:	18 f0       	brcs	.+6      	; 0x47b6 <APP_CreditDeposit_Service+0x2ba>
    47b0:	27 96       	adiw	r28, 0x07	; 7
    47b2:	1f ae       	std	Y+63, r1	; 0x3f
    47b4:	27 97       	sbiw	r28, 0x07	; 7
    47b6:	24 96       	adiw	r28, 0x04	; 4
    47b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    47ba:	24 97       	sbiw	r28, 0x04	; 4
    47bc:	8e a9       	ldd	r24, Y+54	; 0x36
    47be:	98 0f       	add	r25, r24
    47c0:	28 96       	adiw	r28, 0x08	; 8
    47c2:	9f af       	std	Y+63, r25	; 0x3f
    47c4:	28 97       	sbiw	r28, 0x08	; 8
    47c6:	91 e0       	ldi	r25, 0x01	; 1
    47c8:	29 96       	adiw	r28, 0x09	; 9
    47ca:	9f af       	std	Y+63, r25	; 0x3f
    47cc:	29 97       	sbiw	r28, 0x09	; 9
    47ce:	28 96       	adiw	r28, 0x08	; 8
    47d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    47d2:	28 97       	sbiw	r28, 0x08	; 8
    47d4:	9e a9       	ldd	r25, Y+54	; 0x36
    47d6:	89 17       	cp	r24, r25
    47d8:	18 f0       	brcs	.+6      	; 0x47e0 <APP_CreditDeposit_Service+0x2e4>
    47da:	29 96       	adiw	r28, 0x09	; 9
    47dc:	1f ae       	std	Y+63, r1	; 0x3f
    47de:	29 97       	sbiw	r28, 0x09	; 9
    47e0:	27 96       	adiw	r28, 0x07	; 7
    47e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    47e4:	27 97       	sbiw	r28, 0x07	; 7
    47e6:	29 96       	adiw	r28, 0x09	; 9
    47e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    47ea:	29 97       	sbiw	r28, 0x09	; 9
    47ec:	89 2b       	or	r24, r25
    47ee:	27 96       	adiw	r28, 0x07	; 7
    47f0:	8f af       	std	Y+63, r24	; 0x3f
    47f2:	27 97       	sbiw	r28, 0x07	; 7
    47f4:	28 96       	adiw	r28, 0x08	; 8
    47f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    47f8:	28 97       	sbiw	r28, 0x08	; 8
    47fa:	8e ab       	std	Y+54, r24	; 0x36
    47fc:	9f a1       	ldd	r25, Y+39	; 0x27
    47fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4800:	98 0f       	add	r25, r24
    4802:	9f ab       	std	Y+55, r25	; 0x37
    4804:	91 e0       	ldi	r25, 0x01	; 1
    4806:	2a 96       	adiw	r28, 0x0a	; 10
    4808:	9f af       	std	Y+63, r25	; 0x3f
    480a:	2a 97       	sbiw	r28, 0x0a	; 10
    480c:	8f a9       	ldd	r24, Y+55	; 0x37
    480e:	9f a1       	ldd	r25, Y+39	; 0x27
    4810:	89 17       	cp	r24, r25
    4812:	18 f0       	brcs	.+6      	; 0x481a <APP_CreditDeposit_Service+0x31e>
    4814:	2a 96       	adiw	r28, 0x0a	; 10
    4816:	1f ae       	std	Y+63, r1	; 0x3f
    4818:	2a 97       	sbiw	r28, 0x0a	; 10
    481a:	27 96       	adiw	r28, 0x07	; 7
    481c:	8f ad       	ldd	r24, Y+63	; 0x3f
    481e:	27 97       	sbiw	r28, 0x07	; 7
    4820:	9f a9       	ldd	r25, Y+55	; 0x37
    4822:	89 0f       	add	r24, r25
    4824:	2b 96       	adiw	r28, 0x0b	; 11
    4826:	8f af       	std	Y+63, r24	; 0x3f
    4828:	2b 97       	sbiw	r28, 0x0b	; 11
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	2c 96       	adiw	r28, 0x0c	; 12
    482e:	8f af       	std	Y+63, r24	; 0x3f
    4830:	2c 97       	sbiw	r28, 0x0c	; 12
    4832:	2b 96       	adiw	r28, 0x0b	; 11
    4834:	9f ad       	ldd	r25, Y+63	; 0x3f
    4836:	2b 97       	sbiw	r28, 0x0b	; 11
    4838:	8f a9       	ldd	r24, Y+55	; 0x37
    483a:	98 17       	cp	r25, r24
    483c:	18 f0       	brcs	.+6      	; 0x4844 <APP_CreditDeposit_Service+0x348>
    483e:	2c 96       	adiw	r28, 0x0c	; 12
    4840:	1f ae       	std	Y+63, r1	; 0x3f
    4842:	2c 97       	sbiw	r28, 0x0c	; 12
    4844:	2a 96       	adiw	r28, 0x0a	; 10
    4846:	9f ad       	ldd	r25, Y+63	; 0x3f
    4848:	2a 97       	sbiw	r28, 0x0a	; 10
    484a:	2c 96       	adiw	r28, 0x0c	; 12
    484c:	8f ad       	ldd	r24, Y+63	; 0x3f
    484e:	2c 97       	sbiw	r28, 0x0c	; 12
    4850:	98 2b       	or	r25, r24
    4852:	2a 96       	adiw	r28, 0x0a	; 10
    4854:	9f af       	std	Y+63, r25	; 0x3f
    4856:	2a 97       	sbiw	r28, 0x0a	; 10
    4858:	2b 96       	adiw	r28, 0x0b	; 11
    485a:	9f ad       	ldd	r25, Y+63	; 0x3f
    485c:	2b 97       	sbiw	r28, 0x0b	; 11
    485e:	9f ab       	std	Y+55, r25	; 0x37
    4860:	88 a5       	ldd	r24, Y+40	; 0x28
    4862:	98 a1       	ldd	r25, Y+32	; 0x20
    4864:	89 0f       	add	r24, r25
    4866:	88 af       	std	Y+56, r24	; 0x38
    4868:	2a 96       	adiw	r28, 0x0a	; 10
    486a:	8f ad       	ldd	r24, Y+63	; 0x3f
    486c:	2a 97       	sbiw	r28, 0x0a	; 10
    486e:	98 ad       	ldd	r25, Y+56	; 0x38
    4870:	89 0f       	add	r24, r25
    4872:	88 af       	std	Y+56, r24	; 0x38
    4874:	89 a9       	ldd	r24, Y+49	; 0x31
    4876:	89 83       	std	Y+1, r24	; 0x01
    4878:	9a a9       	ldd	r25, Y+50	; 0x32
    487a:	9a 83       	std	Y+2, r25	; 0x02
    487c:	8b a9       	ldd	r24, Y+51	; 0x33
    487e:	8b 83       	std	Y+3, r24	; 0x03
    4880:	9c a9       	ldd	r25, Y+52	; 0x34
    4882:	9c 83       	std	Y+4, r25	; 0x04
    4884:	8d a9       	ldd	r24, Y+53	; 0x35
    4886:	8d 83       	std	Y+5, r24	; 0x05
    4888:	9e a9       	ldd	r25, Y+54	; 0x36
    488a:	9e 83       	std	Y+6, r25	; 0x06
    488c:	8f a9       	ldd	r24, Y+55	; 0x37
    488e:	8f 83       	std	Y+7, r24	; 0x07
    4890:	98 ad       	ldd	r25, Y+56	; 0x38
    4892:	98 87       	std	Y+8, r25	; 0x08
				NumberToString(NewCash, Cash);
    4894:	a9 80       	ldd	r10, Y+1	; 0x01
    4896:	ba 80       	ldd	r11, Y+2	; 0x02
    4898:	cb 80       	ldd	r12, Y+3	; 0x03
    489a:	dc 80       	ldd	r13, Y+4	; 0x04
    489c:	ed 80       	ldd	r14, Y+5	; 0x05
    489e:	fe 80       	ldd	r15, Y+6	; 0x06
    48a0:	0f 81       	ldd	r16, Y+7	; 0x07
    48a2:	18 85       	ldd	r17, Y+8	; 0x08
    48a4:	ed e8       	ldi	r30, 0x8D	; 141
    48a6:	f4 e0       	ldi	r31, 0x04	; 4
    48a8:	2a 2d       	mov	r18, r10
    48aa:	3b 2d       	mov	r19, r11
    48ac:	4c 2d       	mov	r20, r12
    48ae:	5d 2d       	mov	r21, r13
    48b0:	6e 2d       	mov	r22, r14
    48b2:	7f 2d       	mov	r23, r15
    48b4:	80 2f       	mov	r24, r16
    48b6:	91 2f       	mov	r25, r17
    48b8:	8f 01       	movw	r16, r30
    48ba:	0e 94 50 29 	call	0x52a0	; 0x52a0 <NumberToString>
				if(UpdateClient(&CurrentClient, UpdateCash, Cash) != E_OK)
    48be:	8d ea       	ldi	r24, 0xAD	; 173
    48c0:	94 e0       	ldi	r25, 0x04	; 4
    48c2:	2d e8       	ldi	r18, 0x8D	; 141
    48c4:	34 e0       	ldi	r19, 0x04	; 4
    48c6:	60 e0       	ldi	r22, 0x00	; 0
    48c8:	a9 01       	movw	r20, r18
    48ca:	0e 94 25 2a 	call	0x544a	; 0x544a <UpdateClient>
    48ce:	88 23       	and	r24, r24
    48d0:	59 f0       	breq	.+22     	; 0x48e8 <APP_CreditDeposit_Service+0x3ec>
				{
					SWC2_SystemTick = StandardDelay;
    48d2:	8e e1       	ldi	r24, 0x1E	; 30
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	90 93 9b 04 	sts	0x049B, r25
    48da:	80 93 9a 04 	sts	0x049A, r24
					HandleState(Error, UnsuccessfulTransaction);
    48de:	8f e0       	ldi	r24, 0x0F	; 15
    48e0:	65 e0       	ldi	r22, 0x05	; 5
    48e2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    48e6:	16 c2       	rjmp	.+1068   	; 0x4d14 <APP_CreditDeposit_Service+0x818>
				}
				else
				{
					SWC2_SystemTick = StandardDelay;
    48e8:	8e e1       	ldi	r24, 0x1E	; 30
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	90 93 9b 04 	sts	0x049B, r25
    48f0:	80 93 9a 04 	sts	0x049A, r24
					HandleState(CreditDeposit_Response, NoError);
    48f4:	8e e0       	ldi	r24, 0x0E	; 14
    48f6:	60 e0       	ldi	r22, 0x00	; 0
    48f8:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    48fc:	0b c2       	rjmp	.+1046   	; 0x4d14 <APP_CreditDeposit_Service+0x818>
				}
			}
		}else{}
	}
	else if(KeypadChar == 'C'){
    48fe:	80 91 a5 04 	lds	r24, 0x04A5
    4902:	83 34       	cpi	r24, 0x43	; 67
    4904:	09 f0       	breq	.+2      	; 0x4908 <APP_CreditDeposit_Service+0x40c>
    4906:	06 c2       	rjmp	.+1036   	; 0x4d14 <APP_CreditDeposit_Service+0x818>
		if(CashCounter != 0)
    4908:	80 91 99 04 	lds	r24, 0x0499
    490c:	88 23       	and	r24, r24
    490e:	09 f4       	brne	.+2      	; 0x4912 <APP_CreditDeposit_Service+0x416>
    4910:	01 c2       	rjmp	.+1026   	; 0x4d14 <APP_CreditDeposit_Service+0x818>
		{
			Cash[CashCounter] = '\0';
    4912:	80 91 99 04 	lds	r24, 0x0499
    4916:	88 2f       	mov	r24, r24
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	fc 01       	movw	r30, r24
    491c:	e3 57       	subi	r30, 0x73	; 115
    491e:	fb 4f       	sbci	r31, 0xFB	; 251
    4920:	10 82       	st	Z, r1
			CashCounter = 0;
    4922:	10 92 99 04 	sts	0x0499, r1
			NewCash = StringToNumber(CurrentClient.Cash) + StringToNumber(Cash);
    4926:	8d ea       	ldi	r24, 0xAD	; 173
    4928:	94 e0       	ldi	r25, 0x04	; 4
    492a:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    492e:	29 8b       	std	Y+17, r18	; 0x11
    4930:	3a 8b       	std	Y+18, r19	; 0x12
    4932:	4b 8b       	std	Y+19, r20	; 0x13
    4934:	5c 8b       	std	Y+20, r21	; 0x14
    4936:	6d 8b       	std	Y+21, r22	; 0x15
    4938:	7e 8b       	std	Y+22, r23	; 0x16
    493a:	8f 8b       	std	Y+23, r24	; 0x17
    493c:	98 8f       	std	Y+24, r25	; 0x18
    493e:	8d e8       	ldi	r24, 0x8D	; 141
    4940:	94 e0       	ldi	r25, 0x04	; 4
    4942:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    4946:	29 87       	std	Y+9, r18	; 0x09
    4948:	3a 87       	std	Y+10, r19	; 0x0a
    494a:	4b 87       	std	Y+11, r20	; 0x0b
    494c:	5c 87       	std	Y+12, r21	; 0x0c
    494e:	6d 87       	std	Y+13, r22	; 0x0d
    4950:	7e 87       	std	Y+14, r23	; 0x0e
    4952:	8f 87       	std	Y+15, r24	; 0x0f
    4954:	98 8b       	std	Y+16, r25	; 0x10
    4956:	89 89       	ldd	r24, Y+17	; 0x11
    4958:	99 85       	ldd	r25, Y+9	; 0x09
    495a:	89 0f       	add	r24, r25
    495c:	2d 96       	adiw	r28, 0x0d	; 13
    495e:	8f af       	std	Y+63, r24	; 0x3f
    4960:	2d 97       	sbiw	r28, 0x0d	; 13
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	65 96       	adiw	r28, 0x15	; 21
    4966:	8f af       	std	Y+63, r24	; 0x3f
    4968:	65 97       	sbiw	r28, 0x15	; 21
    496a:	2d 96       	adiw	r28, 0x0d	; 13
    496c:	9f ad       	ldd	r25, Y+63	; 0x3f
    496e:	2d 97       	sbiw	r28, 0x0d	; 13
    4970:	89 89       	ldd	r24, Y+17	; 0x11
    4972:	98 17       	cp	r25, r24
    4974:	18 f0       	brcs	.+6      	; 0x497c <APP_CreditDeposit_Service+0x480>
    4976:	65 96       	adiw	r28, 0x15	; 21
    4978:	1f ae       	std	Y+63, r1	; 0x3f
    497a:	65 97       	sbiw	r28, 0x15	; 21
    497c:	9a 89       	ldd	r25, Y+18	; 0x12
    497e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4980:	98 0f       	add	r25, r24
    4982:	2e 96       	adiw	r28, 0x0e	; 14
    4984:	9f af       	std	Y+63, r25	; 0x3f
    4986:	2e 97       	sbiw	r28, 0x0e	; 14
    4988:	91 e0       	ldi	r25, 0x01	; 1
    498a:	66 96       	adiw	r28, 0x16	; 22
    498c:	9f af       	std	Y+63, r25	; 0x3f
    498e:	66 97       	sbiw	r28, 0x16	; 22
    4990:	2e 96       	adiw	r28, 0x0e	; 14
    4992:	8f ad       	ldd	r24, Y+63	; 0x3f
    4994:	2e 97       	sbiw	r28, 0x0e	; 14
    4996:	9a 89       	ldd	r25, Y+18	; 0x12
    4998:	89 17       	cp	r24, r25
    499a:	18 f0       	brcs	.+6      	; 0x49a2 <APP_CreditDeposit_Service+0x4a6>
    499c:	66 96       	adiw	r28, 0x16	; 22
    499e:	1f ae       	std	Y+63, r1	; 0x3f
    49a0:	66 97       	sbiw	r28, 0x16	; 22
    49a2:	65 96       	adiw	r28, 0x15	; 21
    49a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    49a6:	65 97       	sbiw	r28, 0x15	; 21
    49a8:	2e 96       	adiw	r28, 0x0e	; 14
    49aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    49ac:	2e 97       	sbiw	r28, 0x0e	; 14
    49ae:	89 0f       	add	r24, r25
    49b0:	67 96       	adiw	r28, 0x17	; 23
    49b2:	8f af       	std	Y+63, r24	; 0x3f
    49b4:	67 97       	sbiw	r28, 0x17	; 23
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	68 96       	adiw	r28, 0x18	; 24
    49ba:	8f af       	std	Y+63, r24	; 0x3f
    49bc:	68 97       	sbiw	r28, 0x18	; 24
    49be:	67 96       	adiw	r28, 0x17	; 23
    49c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49c2:	67 97       	sbiw	r28, 0x17	; 23
    49c4:	2e 96       	adiw	r28, 0x0e	; 14
    49c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    49c8:	2e 97       	sbiw	r28, 0x0e	; 14
    49ca:	98 17       	cp	r25, r24
    49cc:	18 f0       	brcs	.+6      	; 0x49d4 <APP_CreditDeposit_Service+0x4d8>
    49ce:	68 96       	adiw	r28, 0x18	; 24
    49d0:	1f ae       	std	Y+63, r1	; 0x3f
    49d2:	68 97       	sbiw	r28, 0x18	; 24
    49d4:	66 96       	adiw	r28, 0x16	; 22
    49d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    49d8:	66 97       	sbiw	r28, 0x16	; 22
    49da:	68 96       	adiw	r28, 0x18	; 24
    49dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    49de:	68 97       	sbiw	r28, 0x18	; 24
    49e0:	98 2b       	or	r25, r24
    49e2:	66 96       	adiw	r28, 0x16	; 22
    49e4:	9f af       	std	Y+63, r25	; 0x3f
    49e6:	66 97       	sbiw	r28, 0x16	; 22
    49e8:	67 96       	adiw	r28, 0x17	; 23
    49ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    49ec:	67 97       	sbiw	r28, 0x17	; 23
    49ee:	2e 96       	adiw	r28, 0x0e	; 14
    49f0:	9f af       	std	Y+63, r25	; 0x3f
    49f2:	2e 97       	sbiw	r28, 0x0e	; 14
    49f4:	8b 89       	ldd	r24, Y+19	; 0x13
    49f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    49f8:	89 0f       	add	r24, r25
    49fa:	2f 96       	adiw	r28, 0x0f	; 15
    49fc:	8f af       	std	Y+63, r24	; 0x3f
    49fe:	2f 97       	sbiw	r28, 0x0f	; 15
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	69 96       	adiw	r28, 0x19	; 25
    4a04:	8f af       	std	Y+63, r24	; 0x3f
    4a06:	69 97       	sbiw	r28, 0x19	; 25
    4a08:	2f 96       	adiw	r28, 0x0f	; 15
    4a0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a0c:	2f 97       	sbiw	r28, 0x0f	; 15
    4a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a10:	98 17       	cp	r25, r24
    4a12:	18 f0       	brcs	.+6      	; 0x4a1a <APP_CreditDeposit_Service+0x51e>
    4a14:	69 96       	adiw	r28, 0x19	; 25
    4a16:	1f ae       	std	Y+63, r1	; 0x3f
    4a18:	69 97       	sbiw	r28, 0x19	; 25
    4a1a:	66 96       	adiw	r28, 0x16	; 22
    4a1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a1e:	66 97       	sbiw	r28, 0x16	; 22
    4a20:	2f 96       	adiw	r28, 0x0f	; 15
    4a22:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a24:	2f 97       	sbiw	r28, 0x0f	; 15
    4a26:	98 0f       	add	r25, r24
    4a28:	6a 96       	adiw	r28, 0x1a	; 26
    4a2a:	9f af       	std	Y+63, r25	; 0x3f
    4a2c:	6a 97       	sbiw	r28, 0x1a	; 26
    4a2e:	91 e0       	ldi	r25, 0x01	; 1
    4a30:	6b 96       	adiw	r28, 0x1b	; 27
    4a32:	9f af       	std	Y+63, r25	; 0x3f
    4a34:	6b 97       	sbiw	r28, 0x1b	; 27
    4a36:	6a 96       	adiw	r28, 0x1a	; 26
    4a38:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a3a:	6a 97       	sbiw	r28, 0x1a	; 26
    4a3c:	2f 96       	adiw	r28, 0x0f	; 15
    4a3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a40:	2f 97       	sbiw	r28, 0x0f	; 15
    4a42:	89 17       	cp	r24, r25
    4a44:	18 f0       	brcs	.+6      	; 0x4a4c <APP_CreditDeposit_Service+0x550>
    4a46:	6b 96       	adiw	r28, 0x1b	; 27
    4a48:	1f ae       	std	Y+63, r1	; 0x3f
    4a4a:	6b 97       	sbiw	r28, 0x1b	; 27
    4a4c:	69 96       	adiw	r28, 0x19	; 25
    4a4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a50:	69 97       	sbiw	r28, 0x19	; 25
    4a52:	6b 96       	adiw	r28, 0x1b	; 27
    4a54:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a56:	6b 97       	sbiw	r28, 0x1b	; 27
    4a58:	89 2b       	or	r24, r25
    4a5a:	69 96       	adiw	r28, 0x19	; 25
    4a5c:	8f af       	std	Y+63, r24	; 0x3f
    4a5e:	69 97       	sbiw	r28, 0x19	; 25
    4a60:	6a 96       	adiw	r28, 0x1a	; 26
    4a62:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a64:	6a 97       	sbiw	r28, 0x1a	; 26
    4a66:	2f 96       	adiw	r28, 0x0f	; 15
    4a68:	8f af       	std	Y+63, r24	; 0x3f
    4a6a:	2f 97       	sbiw	r28, 0x0f	; 15
    4a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a70:	98 0f       	add	r25, r24
    4a72:	60 96       	adiw	r28, 0x10	; 16
    4a74:	9f af       	std	Y+63, r25	; 0x3f
    4a76:	60 97       	sbiw	r28, 0x10	; 16
    4a78:	91 e0       	ldi	r25, 0x01	; 1
    4a7a:	6c 96       	adiw	r28, 0x1c	; 28
    4a7c:	9f af       	std	Y+63, r25	; 0x3f
    4a7e:	6c 97       	sbiw	r28, 0x1c	; 28
    4a80:	60 96       	adiw	r28, 0x10	; 16
    4a82:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a84:	60 97       	sbiw	r28, 0x10	; 16
    4a86:	9c 89       	ldd	r25, Y+20	; 0x14
    4a88:	89 17       	cp	r24, r25
    4a8a:	18 f0       	brcs	.+6      	; 0x4a92 <APP_CreditDeposit_Service+0x596>
    4a8c:	6c 96       	adiw	r28, 0x1c	; 28
    4a8e:	1f ae       	std	Y+63, r1	; 0x3f
    4a90:	6c 97       	sbiw	r28, 0x1c	; 28
    4a92:	69 96       	adiw	r28, 0x19	; 25
    4a94:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a96:	69 97       	sbiw	r28, 0x19	; 25
    4a98:	60 96       	adiw	r28, 0x10	; 16
    4a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a9c:	60 97       	sbiw	r28, 0x10	; 16
    4a9e:	89 0f       	add	r24, r25
    4aa0:	6d 96       	adiw	r28, 0x1d	; 29
    4aa2:	8f af       	std	Y+63, r24	; 0x3f
    4aa4:	6d 97       	sbiw	r28, 0x1d	; 29
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	6e 96       	adiw	r28, 0x1e	; 30
    4aaa:	8f af       	std	Y+63, r24	; 0x3f
    4aac:	6e 97       	sbiw	r28, 0x1e	; 30
    4aae:	6d 96       	adiw	r28, 0x1d	; 29
    4ab0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ab2:	6d 97       	sbiw	r28, 0x1d	; 29
    4ab4:	60 96       	adiw	r28, 0x10	; 16
    4ab6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ab8:	60 97       	sbiw	r28, 0x10	; 16
    4aba:	98 17       	cp	r25, r24
    4abc:	18 f0       	brcs	.+6      	; 0x4ac4 <APP_CreditDeposit_Service+0x5c8>
    4abe:	6e 96       	adiw	r28, 0x1e	; 30
    4ac0:	1f ae       	std	Y+63, r1	; 0x3f
    4ac2:	6e 97       	sbiw	r28, 0x1e	; 30
    4ac4:	6c 96       	adiw	r28, 0x1c	; 28
    4ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ac8:	6c 97       	sbiw	r28, 0x1c	; 28
    4aca:	6e 96       	adiw	r28, 0x1e	; 30
    4acc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ace:	6e 97       	sbiw	r28, 0x1e	; 30
    4ad0:	98 2b       	or	r25, r24
    4ad2:	6c 96       	adiw	r28, 0x1c	; 28
    4ad4:	9f af       	std	Y+63, r25	; 0x3f
    4ad6:	6c 97       	sbiw	r28, 0x1c	; 28
    4ad8:	6d 96       	adiw	r28, 0x1d	; 29
    4ada:	9f ad       	ldd	r25, Y+63	; 0x3f
    4adc:	6d 97       	sbiw	r28, 0x1d	; 29
    4ade:	60 96       	adiw	r28, 0x10	; 16
    4ae0:	9f af       	std	Y+63, r25	; 0x3f
    4ae2:	60 97       	sbiw	r28, 0x10	; 16
    4ae4:	8d 89       	ldd	r24, Y+21	; 0x15
    4ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ae8:	89 0f       	add	r24, r25
    4aea:	61 96       	adiw	r28, 0x11	; 17
    4aec:	8f af       	std	Y+63, r24	; 0x3f
    4aee:	61 97       	sbiw	r28, 0x11	; 17
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	6f 96       	adiw	r28, 0x1f	; 31
    4af4:	8f af       	std	Y+63, r24	; 0x3f
    4af6:	6f 97       	sbiw	r28, 0x1f	; 31
    4af8:	61 96       	adiw	r28, 0x11	; 17
    4afa:	9f ad       	ldd	r25, Y+63	; 0x3f
    4afc:	61 97       	sbiw	r28, 0x11	; 17
    4afe:	8d 89       	ldd	r24, Y+21	; 0x15
    4b00:	98 17       	cp	r25, r24
    4b02:	18 f0       	brcs	.+6      	; 0x4b0a <APP_CreditDeposit_Service+0x60e>
    4b04:	6f 96       	adiw	r28, 0x1f	; 31
    4b06:	1f ae       	std	Y+63, r1	; 0x3f
    4b08:	6f 97       	sbiw	r28, 0x1f	; 31
    4b0a:	6c 96       	adiw	r28, 0x1c	; 28
    4b0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b0e:	6c 97       	sbiw	r28, 0x1c	; 28
    4b10:	61 96       	adiw	r28, 0x11	; 17
    4b12:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b14:	61 97       	sbiw	r28, 0x11	; 17
    4b16:	98 0f       	add	r25, r24
    4b18:	a0 96       	adiw	r28, 0x20	; 32
    4b1a:	9f af       	std	Y+63, r25	; 0x3f
    4b1c:	a0 97       	sbiw	r28, 0x20	; 32
    4b1e:	91 e0       	ldi	r25, 0x01	; 1
    4b20:	a1 96       	adiw	r28, 0x21	; 33
    4b22:	9f af       	std	Y+63, r25	; 0x3f
    4b24:	a1 97       	sbiw	r28, 0x21	; 33
    4b26:	a0 96       	adiw	r28, 0x20	; 32
    4b28:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b2a:	a0 97       	sbiw	r28, 0x20	; 32
    4b2c:	61 96       	adiw	r28, 0x11	; 17
    4b2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b30:	61 97       	sbiw	r28, 0x11	; 17
    4b32:	89 17       	cp	r24, r25
    4b34:	18 f0       	brcs	.+6      	; 0x4b3c <APP_CreditDeposit_Service+0x640>
    4b36:	a1 96       	adiw	r28, 0x21	; 33
    4b38:	1f ae       	std	Y+63, r1	; 0x3f
    4b3a:	a1 97       	sbiw	r28, 0x21	; 33
    4b3c:	6f 96       	adiw	r28, 0x1f	; 31
    4b3e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b40:	6f 97       	sbiw	r28, 0x1f	; 31
    4b42:	a1 96       	adiw	r28, 0x21	; 33
    4b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b46:	a1 97       	sbiw	r28, 0x21	; 33
    4b48:	89 2b       	or	r24, r25
    4b4a:	6f 96       	adiw	r28, 0x1f	; 31
    4b4c:	8f af       	std	Y+63, r24	; 0x3f
    4b4e:	6f 97       	sbiw	r28, 0x1f	; 31
    4b50:	a0 96       	adiw	r28, 0x20	; 32
    4b52:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b54:	a0 97       	sbiw	r28, 0x20	; 32
    4b56:	61 96       	adiw	r28, 0x11	; 17
    4b58:	8f af       	std	Y+63, r24	; 0x3f
    4b5a:	61 97       	sbiw	r28, 0x11	; 17
    4b5c:	9e 89       	ldd	r25, Y+22	; 0x16
    4b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b60:	98 0f       	add	r25, r24
    4b62:	62 96       	adiw	r28, 0x12	; 18
    4b64:	9f af       	std	Y+63, r25	; 0x3f
    4b66:	62 97       	sbiw	r28, 0x12	; 18
    4b68:	91 e0       	ldi	r25, 0x01	; 1
    4b6a:	a2 96       	adiw	r28, 0x22	; 34
    4b6c:	9f af       	std	Y+63, r25	; 0x3f
    4b6e:	a2 97       	sbiw	r28, 0x22	; 34
    4b70:	62 96       	adiw	r28, 0x12	; 18
    4b72:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b74:	62 97       	sbiw	r28, 0x12	; 18
    4b76:	9e 89       	ldd	r25, Y+22	; 0x16
    4b78:	89 17       	cp	r24, r25
    4b7a:	18 f0       	brcs	.+6      	; 0x4b82 <APP_CreditDeposit_Service+0x686>
    4b7c:	a2 96       	adiw	r28, 0x22	; 34
    4b7e:	1f ae       	std	Y+63, r1	; 0x3f
    4b80:	a2 97       	sbiw	r28, 0x22	; 34
    4b82:	6f 96       	adiw	r28, 0x1f	; 31
    4b84:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b86:	6f 97       	sbiw	r28, 0x1f	; 31
    4b88:	62 96       	adiw	r28, 0x12	; 18
    4b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b8c:	62 97       	sbiw	r28, 0x12	; 18
    4b8e:	89 0f       	add	r24, r25
    4b90:	a3 96       	adiw	r28, 0x23	; 35
    4b92:	8f af       	std	Y+63, r24	; 0x3f
    4b94:	a3 97       	sbiw	r28, 0x23	; 35
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	a4 96       	adiw	r28, 0x24	; 36
    4b9a:	8f af       	std	Y+63, r24	; 0x3f
    4b9c:	a4 97       	sbiw	r28, 0x24	; 36
    4b9e:	a3 96       	adiw	r28, 0x23	; 35
    4ba0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ba2:	a3 97       	sbiw	r28, 0x23	; 35
    4ba4:	62 96       	adiw	r28, 0x12	; 18
    4ba6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ba8:	62 97       	sbiw	r28, 0x12	; 18
    4baa:	98 17       	cp	r25, r24
    4bac:	18 f0       	brcs	.+6      	; 0x4bb4 <APP_CreditDeposit_Service+0x6b8>
    4bae:	a4 96       	adiw	r28, 0x24	; 36
    4bb0:	1f ae       	std	Y+63, r1	; 0x3f
    4bb2:	a4 97       	sbiw	r28, 0x24	; 36
    4bb4:	a2 96       	adiw	r28, 0x22	; 34
    4bb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bb8:	a2 97       	sbiw	r28, 0x22	; 34
    4bba:	a4 96       	adiw	r28, 0x24	; 36
    4bbc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bbe:	a4 97       	sbiw	r28, 0x24	; 36
    4bc0:	98 2b       	or	r25, r24
    4bc2:	a2 96       	adiw	r28, 0x22	; 34
    4bc4:	9f af       	std	Y+63, r25	; 0x3f
    4bc6:	a2 97       	sbiw	r28, 0x22	; 34
    4bc8:	a3 96       	adiw	r28, 0x23	; 35
    4bca:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bcc:	a3 97       	sbiw	r28, 0x23	; 35
    4bce:	62 96       	adiw	r28, 0x12	; 18
    4bd0:	9f af       	std	Y+63, r25	; 0x3f
    4bd2:	62 97       	sbiw	r28, 0x12	; 18
    4bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bd8:	89 0f       	add	r24, r25
    4bda:	63 96       	adiw	r28, 0x13	; 19
    4bdc:	8f af       	std	Y+63, r24	; 0x3f
    4bde:	63 97       	sbiw	r28, 0x13	; 19
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	a5 96       	adiw	r28, 0x25	; 37
    4be4:	8f af       	std	Y+63, r24	; 0x3f
    4be6:	a5 97       	sbiw	r28, 0x25	; 37
    4be8:	63 96       	adiw	r28, 0x13	; 19
    4bea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bec:	63 97       	sbiw	r28, 0x13	; 19
    4bee:	8f 89       	ldd	r24, Y+23	; 0x17
    4bf0:	98 17       	cp	r25, r24
    4bf2:	18 f0       	brcs	.+6      	; 0x4bfa <APP_CreditDeposit_Service+0x6fe>
    4bf4:	a5 96       	adiw	r28, 0x25	; 37
    4bf6:	1f ae       	std	Y+63, r1	; 0x3f
    4bf8:	a5 97       	sbiw	r28, 0x25	; 37
    4bfa:	a2 96       	adiw	r28, 0x22	; 34
    4bfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bfe:	a2 97       	sbiw	r28, 0x22	; 34
    4c00:	63 96       	adiw	r28, 0x13	; 19
    4c02:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c04:	63 97       	sbiw	r28, 0x13	; 19
    4c06:	98 0f       	add	r25, r24
    4c08:	a6 96       	adiw	r28, 0x26	; 38
    4c0a:	9f af       	std	Y+63, r25	; 0x3f
    4c0c:	a6 97       	sbiw	r28, 0x26	; 38
    4c0e:	91 e0       	ldi	r25, 0x01	; 1
    4c10:	a7 96       	adiw	r28, 0x27	; 39
    4c12:	9f af       	std	Y+63, r25	; 0x3f
    4c14:	a7 97       	sbiw	r28, 0x27	; 39
    4c16:	a6 96       	adiw	r28, 0x26	; 38
    4c18:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c1a:	a6 97       	sbiw	r28, 0x26	; 38
    4c1c:	63 96       	adiw	r28, 0x13	; 19
    4c1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c20:	63 97       	sbiw	r28, 0x13	; 19
    4c22:	89 17       	cp	r24, r25
    4c24:	18 f0       	brcs	.+6      	; 0x4c2c <APP_CreditDeposit_Service+0x730>
    4c26:	a7 96       	adiw	r28, 0x27	; 39
    4c28:	1f ae       	std	Y+63, r1	; 0x3f
    4c2a:	a7 97       	sbiw	r28, 0x27	; 39
    4c2c:	a5 96       	adiw	r28, 0x25	; 37
    4c2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c30:	a5 97       	sbiw	r28, 0x25	; 37
    4c32:	a7 96       	adiw	r28, 0x27	; 39
    4c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c36:	a7 97       	sbiw	r28, 0x27	; 39
    4c38:	89 2b       	or	r24, r25
    4c3a:	a5 96       	adiw	r28, 0x25	; 37
    4c3c:	8f af       	std	Y+63, r24	; 0x3f
    4c3e:	a5 97       	sbiw	r28, 0x25	; 37
    4c40:	a6 96       	adiw	r28, 0x26	; 38
    4c42:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c44:	a6 97       	sbiw	r28, 0x26	; 38
    4c46:	63 96       	adiw	r28, 0x13	; 19
    4c48:	8f af       	std	Y+63, r24	; 0x3f
    4c4a:	63 97       	sbiw	r28, 0x13	; 19
    4c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c4e:	88 89       	ldd	r24, Y+16	; 0x10
    4c50:	98 0f       	add	r25, r24
    4c52:	64 96       	adiw	r28, 0x14	; 20
    4c54:	9f af       	std	Y+63, r25	; 0x3f
    4c56:	64 97       	sbiw	r28, 0x14	; 20
    4c58:	a5 96       	adiw	r28, 0x25	; 37
    4c5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c5c:	a5 97       	sbiw	r28, 0x25	; 37
    4c5e:	64 96       	adiw	r28, 0x14	; 20
    4c60:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c62:	64 97       	sbiw	r28, 0x14	; 20
    4c64:	89 0f       	add	r24, r25
    4c66:	64 96       	adiw	r28, 0x14	; 20
    4c68:	8f af       	std	Y+63, r24	; 0x3f
    4c6a:	64 97       	sbiw	r28, 0x14	; 20
    4c6c:	2d 96       	adiw	r28, 0x0d	; 13
    4c6e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c70:	2d 97       	sbiw	r28, 0x0d	; 13
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	2e 96       	adiw	r28, 0x0e	; 14
    4c76:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c78:	2e 97       	sbiw	r28, 0x0e	; 14
    4c7a:	9a 83       	std	Y+2, r25	; 0x02
    4c7c:	2f 96       	adiw	r28, 0x0f	; 15
    4c7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c80:	2f 97       	sbiw	r28, 0x0f	; 15
    4c82:	8b 83       	std	Y+3, r24	; 0x03
    4c84:	60 96       	adiw	r28, 0x10	; 16
    4c86:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c88:	60 97       	sbiw	r28, 0x10	; 16
    4c8a:	9c 83       	std	Y+4, r25	; 0x04
    4c8c:	61 96       	adiw	r28, 0x11	; 17
    4c8e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c90:	61 97       	sbiw	r28, 0x11	; 17
    4c92:	8d 83       	std	Y+5, r24	; 0x05
    4c94:	62 96       	adiw	r28, 0x12	; 18
    4c96:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c98:	62 97       	sbiw	r28, 0x12	; 18
    4c9a:	9e 83       	std	Y+6, r25	; 0x06
    4c9c:	63 96       	adiw	r28, 0x13	; 19
    4c9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ca0:	63 97       	sbiw	r28, 0x13	; 19
    4ca2:	8f 83       	std	Y+7, r24	; 0x07
    4ca4:	64 96       	adiw	r28, 0x14	; 20
    4ca6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ca8:	64 97       	sbiw	r28, 0x14	; 20
    4caa:	98 87       	std	Y+8, r25	; 0x08
			NumberToString(NewCash, Cash);
    4cac:	a9 80       	ldd	r10, Y+1	; 0x01
    4cae:	ba 80       	ldd	r11, Y+2	; 0x02
    4cb0:	cb 80       	ldd	r12, Y+3	; 0x03
    4cb2:	dc 80       	ldd	r13, Y+4	; 0x04
    4cb4:	ed 80       	ldd	r14, Y+5	; 0x05
    4cb6:	fe 80       	ldd	r15, Y+6	; 0x06
    4cb8:	0f 81       	ldd	r16, Y+7	; 0x07
    4cba:	18 85       	ldd	r17, Y+8	; 0x08
    4cbc:	ed e8       	ldi	r30, 0x8D	; 141
    4cbe:	f4 e0       	ldi	r31, 0x04	; 4
    4cc0:	2a 2d       	mov	r18, r10
    4cc2:	3b 2d       	mov	r19, r11
    4cc4:	4c 2d       	mov	r20, r12
    4cc6:	5d 2d       	mov	r21, r13
    4cc8:	6e 2d       	mov	r22, r14
    4cca:	7f 2d       	mov	r23, r15
    4ccc:	80 2f       	mov	r24, r16
    4cce:	91 2f       	mov	r25, r17
    4cd0:	8f 01       	movw	r16, r30
    4cd2:	0e 94 50 29 	call	0x52a0	; 0x52a0 <NumberToString>
			if(UpdateClient(&CurrentClient, UpdateCash, Cash) != E_OK)
    4cd6:	8d ea       	ldi	r24, 0xAD	; 173
    4cd8:	94 e0       	ldi	r25, 0x04	; 4
    4cda:	2d e8       	ldi	r18, 0x8D	; 141
    4cdc:	34 e0       	ldi	r19, 0x04	; 4
    4cde:	60 e0       	ldi	r22, 0x00	; 0
    4ce0:	a9 01       	movw	r20, r18
    4ce2:	0e 94 25 2a 	call	0x544a	; 0x544a <UpdateClient>
    4ce6:	88 23       	and	r24, r24
    4ce8:	59 f0       	breq	.+22     	; 0x4d00 <APP_CreditDeposit_Service+0x804>
			{
				SWC2_SystemTick = StandardDelay;
    4cea:	8e e1       	ldi	r24, 0x1E	; 30
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	90 93 9b 04 	sts	0x049B, r25
    4cf2:	80 93 9a 04 	sts	0x049A, r24
				HandleState(Error, UnsuccessfulTransaction);
    4cf6:	8f e0       	ldi	r24, 0x0F	; 15
    4cf8:	65 e0       	ldi	r22, 0x05	; 5
    4cfa:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    4cfe:	0a c0       	rjmp	.+20     	; 0x4d14 <APP_CreditDeposit_Service+0x818>
			}
			else
			{
				SWC2_SystemTick = StandardDelay;
    4d00:	8e e1       	ldi	r24, 0x1E	; 30
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	90 93 9b 04 	sts	0x049B, r25
    4d08:	80 93 9a 04 	sts	0x049A, r24
				HandleState(CreditDeposit_Response, NoError);
    4d0c:	8e e0       	ldi	r24, 0x0E	; 14
    4d0e:	60 e0       	ldi	r22, 0x00	; 0
    4d10:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
			}
		}else{}
	}else{}
}
    4d14:	ca 59       	subi	r28, 0x9A	; 154
    4d16:	df 4f       	sbci	r29, 0xFF	; 255
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	de bf       	out	0x3e, r29	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	cf 91       	pop	r28
    4d24:	df 91       	pop	r29
    4d26:	1f 91       	pop	r17
    4d28:	0f 91       	pop	r16
    4d2a:	ff 90       	pop	r15
    4d2c:	ef 90       	pop	r14
    4d2e:	df 90       	pop	r13
    4d30:	cf 90       	pop	r12
    4d32:	bf 90       	pop	r11
    4d34:	af 90       	pop	r10
    4d36:	08 95       	ret

00004d38 <Restart>:

Std_ReturnType Restart(void)
{
    4d38:	df 93       	push	r29
    4d3a:	cf 93       	push	r28
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <Restart+0x6>
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ReturnValue = E_NOT_OK;
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	89 83       	std	Y+1, r24	; 0x01
	SendCommand(ATM_TriggerTransmission);
    4d46:	81 e4       	ldi	r24, 0x41	; 65
    4d48:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    4d4c:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    4d50:	8a 34       	cpi	r24, 0x4A	; 74
    4d52:	31 f0       	breq	.+12     	; 0x4d60 <Restart+0x28>
	{
		SendCommand(ATM_TriggerTransmission);
    4d54:	81 e4       	ldi	r24, 0x41	; 65
    4d56:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    4d5a:	89 81       	ldd	r24, Y+1	; 0x01
    4d5c:	8a 83       	std	Y+2, r24	; 0x02
    4d5e:	1d c0       	rjmp	.+58     	; 0x4d9a <Restart+0x62>
	}
	SendCommand(ATM_Restart);
    4d60:	88 e4       	ldi	r24, 0x48	; 72
    4d62:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    4d66:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    4d6a:	89 34       	cpi	r24, 0x49	; 73
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <Restart+0x42>
	{
		SendCommand(ATM_TriggerTransmission);
    4d6e:	81 e4       	ldi	r24, 0x41	; 65
    4d70:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	8a 83       	std	Y+2, r24	; 0x02
    4d78:	10 c0       	rjmp	.+32     	; 0x4d9a <Restart+0x62>
	}
	SendCommand(ATM_EndTransmission);
    4d7a:	82 e4       	ldi	r24, 0x42	; 66
    4d7c:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    4d80:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    4d84:	89 34       	cpi	r24, 0x49	; 73
    4d86:	31 f0       	breq	.+12     	; 0x4d94 <Restart+0x5c>
	{
		SendCommand(ATM_TriggerTransmission);
    4d88:	81 e4       	ldi	r24, 0x41	; 65
    4d8a:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	8a 83       	std	Y+2, r24	; 0x02
    4d92:	03 c0       	rjmp	.+6      	; 0x4d9a <Restart+0x62>
	}
	ReturnValue = E_OK;
    4d94:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	8a 83       	std	Y+2, r24	; 0x02
    4d9a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4d9c:	0f 90       	pop	r0
    4d9e:	0f 90       	pop	r0
    4da0:	cf 91       	pop	r28
    4da2:	df 91       	pop	r29
    4da4:	08 95       	ret

00004da6 <HandleState>:

void HandleState(ATM_State state, ATM_Error error)
{
    4da6:	df 93       	push	r29
    4da8:	cf 93       	push	r28
    4daa:	00 d0       	rcall	.+0      	; 0x4dac <HandleState+0x6>
    4dac:	cd b7       	in	r28, 0x3d	; 61
    4dae:	de b7       	in	r29, 0x3e	; 62
    4db0:	89 83       	std	Y+1, r24	; 0x01
    4db2:	6a 83       	std	Y+2, r22	; 0x02
	LCD_ModificationFlag = TRUE;
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	80 93 9d 04 	sts	0x049D, r24
	CurrentState = state;
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	80 93 ac 04 	sts	0x04AC, r24
	ERROR = error;
    4dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc2:	80 93 9c 04 	sts	0x049C, r24

}
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
    4dca:	cf 91       	pop	r28
    4dcc:	df 91       	pop	r29
    4dce:	08 95       	ret

00004dd0 <CashWithdrawHandle>:

static void CashWithdrawHandle(uint16 cash)
{
    4dd0:	af 92       	push	r10
    4dd2:	bf 92       	push	r11
    4dd4:	cf 92       	push	r12
    4dd6:	df 92       	push	r13
    4dd8:	ef 92       	push	r14
    4dda:	ff 92       	push	r15
    4ddc:	0f 93       	push	r16
    4dde:	1f 93       	push	r17
    4de0:	df 93       	push	r29
    4de2:	cf 93       	push	r28
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	ed 97       	sbiw	r28, 0x3d	; 61
    4dea:	0f b6       	in	r0, 0x3f	; 63
    4dec:	f8 94       	cli
    4dee:	de bf       	out	0x3e, r29	; 62
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	cd bf       	out	0x3d, r28	; 61
    4df4:	9a 87       	std	Y+10, r25	; 0x0a
    4df6:	89 87       	std	Y+9, r24	; 0x09
	uint64 NewCash = StringToNumber(CurrentClient.Cash);
    4df8:	8d ea       	ldi	r24, 0xAD	; 173
    4dfa:	94 e0       	ldi	r25, 0x04	; 4
    4dfc:	0e 94 a4 28 	call	0x5148	; 0x5148 <StringToNumber>
    4e00:	a2 2e       	mov	r10, r18
    4e02:	b3 2e       	mov	r11, r19
    4e04:	c4 2e       	mov	r12, r20
    4e06:	d5 2e       	mov	r13, r21
    4e08:	e6 2e       	mov	r14, r22
    4e0a:	f7 2e       	mov	r15, r23
    4e0c:	08 2f       	mov	r16, r24
    4e0e:	19 2f       	mov	r17, r25
    4e10:	a9 82       	std	Y+1, r10	; 0x01
    4e12:	ba 82       	std	Y+2, r11	; 0x02
    4e14:	cb 82       	std	Y+3, r12	; 0x03
    4e16:	dc 82       	std	Y+4, r13	; 0x04
    4e18:	ed 82       	std	Y+5, r14	; 0x05
    4e1a:	fe 82       	std	Y+6, r15	; 0x06
    4e1c:	0f 83       	std	Y+7, r16	; 0x07
    4e1e:	18 87       	std	Y+8, r17	; 0x08
	if(NewCash >= cash)
    4e20:	89 85       	ldd	r24, Y+9	; 0x09
    4e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e24:	8c 01       	movw	r16, r24
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e0       	ldi	r20, 0x00	; 0
    4e2c:	50 e0       	ldi	r21, 0x00	; 0
    4e2e:	60 e0       	ldi	r22, 0x00	; 0
    4e30:	70 e0       	ldi	r23, 0x00	; 0
    4e32:	0b 8b       	std	Y+19, r16	; 0x13
    4e34:	1c 8b       	std	Y+20, r17	; 0x14
    4e36:	2d 8b       	std	Y+21, r18	; 0x15
    4e38:	3e 8b       	std	Y+22, r19	; 0x16
    4e3a:	4f 8b       	std	Y+23, r20	; 0x17
    4e3c:	58 8f       	std	Y+24, r21	; 0x18
    4e3e:	69 8f       	std	Y+25, r22	; 0x19
    4e40:	7a 8f       	std	Y+26, r23	; 0x1a
    4e42:	88 85       	ldd	r24, Y+8	; 0x08
    4e44:	1a 8d       	ldd	r17, Y+26	; 0x1a
    4e46:	81 17       	cp	r24, r17
    4e48:	08 f4       	brcc	.+2      	; 0x4e4c <CashWithdrawHandle+0x7c>
    4e4a:	63 c1       	rjmp	.+710    	; 0x5112 <CashWithdrawHandle+0x342>
    4e4c:	88 85       	ldd	r24, Y+8	; 0x08
    4e4e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4e50:	82 17       	cp	r24, r18
    4e52:	d9 f5       	brne	.+118    	; 0x4eca <CashWithdrawHandle+0xfa>
    4e54:	8f 81       	ldd	r24, Y+7	; 0x07
    4e56:	39 8d       	ldd	r19, Y+25	; 0x19
    4e58:	83 17       	cp	r24, r19
    4e5a:	08 f4       	brcc	.+2      	; 0x4e5e <CashWithdrawHandle+0x8e>
    4e5c:	5a c1       	rjmp	.+692    	; 0x5112 <CashWithdrawHandle+0x342>
    4e5e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e60:	49 8d       	ldd	r20, Y+25	; 0x19
    4e62:	84 17       	cp	r24, r20
    4e64:	91 f5       	brne	.+100    	; 0x4eca <CashWithdrawHandle+0xfa>
    4e66:	8e 81       	ldd	r24, Y+6	; 0x06
    4e68:	58 8d       	ldd	r21, Y+24	; 0x18
    4e6a:	85 17       	cp	r24, r21
    4e6c:	08 f4       	brcc	.+2      	; 0x4e70 <CashWithdrawHandle+0xa0>
    4e6e:	51 c1       	rjmp	.+674    	; 0x5112 <CashWithdrawHandle+0x342>
    4e70:	8e 81       	ldd	r24, Y+6	; 0x06
    4e72:	68 8d       	ldd	r22, Y+24	; 0x18
    4e74:	86 17       	cp	r24, r22
    4e76:	49 f5       	brne	.+82     	; 0x4eca <CashWithdrawHandle+0xfa>
    4e78:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7a:	7f 89       	ldd	r23, Y+23	; 0x17
    4e7c:	87 17       	cp	r24, r23
    4e7e:	08 f4       	brcc	.+2      	; 0x4e82 <CashWithdrawHandle+0xb2>
    4e80:	48 c1       	rjmp	.+656    	; 0x5112 <CashWithdrawHandle+0x342>
    4e82:	8d 81       	ldd	r24, Y+5	; 0x05
    4e84:	9f 89       	ldd	r25, Y+23	; 0x17
    4e86:	89 17       	cp	r24, r25
    4e88:	01 f5       	brne	.+64     	; 0x4eca <CashWithdrawHandle+0xfa>
    4e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e8c:	0e 89       	ldd	r16, Y+22	; 0x16
    4e8e:	80 17       	cp	r24, r16
    4e90:	08 f4       	brcc	.+2      	; 0x4e94 <CashWithdrawHandle+0xc4>
    4e92:	3f c1       	rjmp	.+638    	; 0x5112 <CashWithdrawHandle+0x342>
    4e94:	8c 81       	ldd	r24, Y+4	; 0x04
    4e96:	1e 89       	ldd	r17, Y+22	; 0x16
    4e98:	81 17       	cp	r24, r17
    4e9a:	b9 f4       	brne	.+46     	; 0x4eca <CashWithdrawHandle+0xfa>
    4e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e9e:	2d 89       	ldd	r18, Y+21	; 0x15
    4ea0:	82 17       	cp	r24, r18
    4ea2:	08 f4       	brcc	.+2      	; 0x4ea6 <CashWithdrawHandle+0xd6>
    4ea4:	36 c1       	rjmp	.+620    	; 0x5112 <CashWithdrawHandle+0x342>
    4ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea8:	3d 89       	ldd	r19, Y+21	; 0x15
    4eaa:	83 17       	cp	r24, r19
    4eac:	71 f4       	brne	.+28     	; 0x4eca <CashWithdrawHandle+0xfa>
    4eae:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb0:	4c 89       	ldd	r20, Y+20	; 0x14
    4eb2:	84 17       	cp	r24, r20
    4eb4:	08 f4       	brcc	.+2      	; 0x4eb8 <CashWithdrawHandle+0xe8>
    4eb6:	2d c1       	rjmp	.+602    	; 0x5112 <CashWithdrawHandle+0x342>
    4eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eba:	5c 89       	ldd	r21, Y+20	; 0x14
    4ebc:	85 17       	cp	r24, r21
    4ebe:	29 f4       	brne	.+10     	; 0x4eca <CashWithdrawHandle+0xfa>
    4ec0:	89 81       	ldd	r24, Y+1	; 0x01
    4ec2:	6b 89       	ldd	r22, Y+19	; 0x13
    4ec4:	86 17       	cp	r24, r22
    4ec6:	08 f4       	brcc	.+2      	; 0x4eca <CashWithdrawHandle+0xfa>
    4ec8:	24 c1       	rjmp	.+584    	; 0x5112 <CashWithdrawHandle+0x342>
	{
		NewCash -= cash;
    4eca:	89 85       	ldd	r24, Y+9	; 0x09
    4ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ece:	8c 01       	movw	r16, r24
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	40 e0       	ldi	r20, 0x00	; 0
    4ed6:	50 e0       	ldi	r21, 0x00	; 0
    4ed8:	60 e0       	ldi	r22, 0x00	; 0
    4eda:	70 e0       	ldi	r23, 0x00	; 0
    4edc:	0b 87       	std	Y+11, r16	; 0x0b
    4ede:	1c 87       	std	Y+12, r17	; 0x0c
    4ee0:	2d 87       	std	Y+13, r18	; 0x0d
    4ee2:	3e 87       	std	Y+14, r19	; 0x0e
    4ee4:	4f 87       	std	Y+15, r20	; 0x0f
    4ee6:	58 8b       	std	Y+16, r21	; 0x10
    4ee8:	69 8b       	std	Y+17, r22	; 0x11
    4eea:	7a 8b       	std	Y+18, r23	; 0x12
    4eec:	19 81       	ldd	r17, Y+1	; 0x01
    4eee:	1b 8f       	std	Y+27, r17	; 0x1b
    4ef0:	2a 81       	ldd	r18, Y+2	; 0x02
    4ef2:	2c 8f       	std	Y+28, r18	; 0x1c
    4ef4:	3b 81       	ldd	r19, Y+3	; 0x03
    4ef6:	3d 8f       	std	Y+29, r19	; 0x1d
    4ef8:	4c 81       	ldd	r20, Y+4	; 0x04
    4efa:	4e 8f       	std	Y+30, r20	; 0x1e
    4efc:	5d 81       	ldd	r21, Y+5	; 0x05
    4efe:	5f 8f       	std	Y+31, r21	; 0x1f
    4f00:	6e 81       	ldd	r22, Y+6	; 0x06
    4f02:	68 a3       	std	Y+32, r22	; 0x20
    4f04:	7f 81       	ldd	r23, Y+7	; 0x07
    4f06:	79 a3       	std	Y+33, r23	; 0x21
    4f08:	88 85       	ldd	r24, Y+8	; 0x08
    4f0a:	8a a3       	std	Y+34, r24	; 0x22
    4f0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f0e:	0b 85       	ldd	r16, Y+11	; 0x0b
    4f10:	90 1b       	sub	r25, r16
    4f12:	9b a3       	std	Y+35, r25	; 0x23
    4f14:	11 e0       	ldi	r17, 0x01	; 1
    4f16:	1b a7       	std	Y+43, r17	; 0x2b
    4f18:	2b a1       	ldd	r18, Y+35	; 0x23
    4f1a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4f1c:	32 17       	cp	r19, r18
    4f1e:	08 f0       	brcs	.+2      	; 0x4f22 <CashWithdrawHandle+0x152>
    4f20:	1b a6       	std	Y+43, r1	; 0x2b
    4f22:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4f24:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f26:	45 1b       	sub	r20, r21
    4f28:	4c a3       	std	Y+36, r20	; 0x24
    4f2a:	61 e0       	ldi	r22, 0x01	; 1
    4f2c:	6c a7       	std	Y+44, r22	; 0x2c
    4f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    4f30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4f32:	87 17       	cp	r24, r23
    4f34:	08 f0       	brcs	.+2      	; 0x4f38 <CashWithdrawHandle+0x168>
    4f36:	1c a6       	std	Y+44, r1	; 0x2c
    4f38:	9c a1       	ldd	r25, Y+36	; 0x24
    4f3a:	0b a5       	ldd	r16, Y+43	; 0x2b
    4f3c:	90 1b       	sub	r25, r16
    4f3e:	9d a7       	std	Y+45, r25	; 0x2d
    4f40:	11 e0       	ldi	r17, 0x01	; 1
    4f42:	1e a7       	std	Y+46, r17	; 0x2e
    4f44:	2d a5       	ldd	r18, Y+45	; 0x2d
    4f46:	3c a1       	ldd	r19, Y+36	; 0x24
    4f48:	32 17       	cp	r19, r18
    4f4a:	08 f0       	brcs	.+2      	; 0x4f4e <CashWithdrawHandle+0x17e>
    4f4c:	1e a6       	std	Y+46, r1	; 0x2e
    4f4e:	4c a5       	ldd	r20, Y+44	; 0x2c
    4f50:	5e a5       	ldd	r21, Y+46	; 0x2e
    4f52:	45 2b       	or	r20, r21
    4f54:	4c a7       	std	Y+44, r20	; 0x2c
    4f56:	6d a5       	ldd	r22, Y+45	; 0x2d
    4f58:	6c a3       	std	Y+36, r22	; 0x24
    4f5a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f5e:	78 1b       	sub	r23, r24
    4f60:	7d a3       	std	Y+37, r23	; 0x25
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	9f a7       	std	Y+47, r25	; 0x2f
    4f66:	0d a1       	ldd	r16, Y+37	; 0x25
    4f68:	1d 8d       	ldd	r17, Y+29	; 0x1d
    4f6a:	10 17       	cp	r17, r16
    4f6c:	08 f0       	brcs	.+2      	; 0x4f70 <CashWithdrawHandle+0x1a0>
    4f6e:	1f a6       	std	Y+47, r1	; 0x2f
    4f70:	2d a1       	ldd	r18, Y+37	; 0x25
    4f72:	3c a5       	ldd	r19, Y+44	; 0x2c
    4f74:	23 1b       	sub	r18, r19
    4f76:	28 ab       	std	Y+48, r18	; 0x30
    4f78:	41 e0       	ldi	r20, 0x01	; 1
    4f7a:	49 ab       	std	Y+49, r20	; 0x31
    4f7c:	58 a9       	ldd	r21, Y+48	; 0x30
    4f7e:	6d a1       	ldd	r22, Y+37	; 0x25
    4f80:	65 17       	cp	r22, r21
    4f82:	08 f0       	brcs	.+2      	; 0x4f86 <CashWithdrawHandle+0x1b6>
    4f84:	19 aa       	std	Y+49, r1	; 0x31
    4f86:	7f a5       	ldd	r23, Y+47	; 0x2f
    4f88:	89 a9       	ldd	r24, Y+49	; 0x31
    4f8a:	78 2b       	or	r23, r24
    4f8c:	7f a7       	std	Y+47, r23	; 0x2f
    4f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    4f90:	9d a3       	std	Y+37, r25	; 0x25
    4f92:	0e 8d       	ldd	r16, Y+30	; 0x1e
    4f94:	1e 85       	ldd	r17, Y+14	; 0x0e
    4f96:	01 1b       	sub	r16, r17
    4f98:	0e a3       	std	Y+38, r16	; 0x26
    4f9a:	21 e0       	ldi	r18, 0x01	; 1
    4f9c:	2a ab       	std	Y+50, r18	; 0x32
    4f9e:	3e a1       	ldd	r19, Y+38	; 0x26
    4fa0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4fa2:	43 17       	cp	r20, r19
    4fa4:	08 f0       	brcs	.+2      	; 0x4fa8 <CashWithdrawHandle+0x1d8>
    4fa6:	1a aa       	std	Y+50, r1	; 0x32
    4fa8:	5e a1       	ldd	r21, Y+38	; 0x26
    4faa:	6f a5       	ldd	r22, Y+47	; 0x2f
    4fac:	56 1b       	sub	r21, r22
    4fae:	5b ab       	std	Y+51, r21	; 0x33
    4fb0:	71 e0       	ldi	r23, 0x01	; 1
    4fb2:	7c ab       	std	Y+52, r23	; 0x34
    4fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    4fb6:	9e a1       	ldd	r25, Y+38	; 0x26
    4fb8:	98 17       	cp	r25, r24
    4fba:	08 f0       	brcs	.+2      	; 0x4fbe <CashWithdrawHandle+0x1ee>
    4fbc:	1c aa       	std	Y+52, r1	; 0x34
    4fbe:	0a a9       	ldd	r16, Y+50	; 0x32
    4fc0:	1c a9       	ldd	r17, Y+52	; 0x34
    4fc2:	01 2b       	or	r16, r17
    4fc4:	0a ab       	std	Y+50, r16	; 0x32
    4fc6:	2b a9       	ldd	r18, Y+51	; 0x33
    4fc8:	2e a3       	std	Y+38, r18	; 0x26
    4fca:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4fcc:	4f 85       	ldd	r20, Y+15	; 0x0f
    4fce:	34 1b       	sub	r19, r20
    4fd0:	3f a3       	std	Y+39, r19	; 0x27
    4fd2:	51 e0       	ldi	r21, 0x01	; 1
    4fd4:	5d ab       	std	Y+53, r21	; 0x35
    4fd6:	6f a1       	ldd	r22, Y+39	; 0x27
    4fd8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4fda:	76 17       	cp	r23, r22
    4fdc:	08 f0       	brcs	.+2      	; 0x4fe0 <CashWithdrawHandle+0x210>
    4fde:	1d aa       	std	Y+53, r1	; 0x35
    4fe0:	8f a1       	ldd	r24, Y+39	; 0x27
    4fe2:	9a a9       	ldd	r25, Y+50	; 0x32
    4fe4:	89 1b       	sub	r24, r25
    4fe6:	8e ab       	std	Y+54, r24	; 0x36
    4fe8:	01 e0       	ldi	r16, 0x01	; 1
    4fea:	0f ab       	std	Y+55, r16	; 0x37
    4fec:	1e a9       	ldd	r17, Y+54	; 0x36
    4fee:	2f a1       	ldd	r18, Y+39	; 0x27
    4ff0:	21 17       	cp	r18, r17
    4ff2:	08 f0       	brcs	.+2      	; 0x4ff6 <CashWithdrawHandle+0x226>
    4ff4:	1f aa       	std	Y+55, r1	; 0x37
    4ff6:	3d a9       	ldd	r19, Y+53	; 0x35
    4ff8:	4f a9       	ldd	r20, Y+55	; 0x37
    4ffa:	34 2b       	or	r19, r20
    4ffc:	3d ab       	std	Y+53, r19	; 0x35
    4ffe:	5e a9       	ldd	r21, Y+54	; 0x36
    5000:	5f a3       	std	Y+39, r21	; 0x27
    5002:	68 a1       	ldd	r22, Y+32	; 0x20
    5004:	78 89       	ldd	r23, Y+16	; 0x10
    5006:	67 1b       	sub	r22, r23
    5008:	68 a7       	std	Y+40, r22	; 0x28
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	88 af       	std	Y+56, r24	; 0x38
    500e:	98 a5       	ldd	r25, Y+40	; 0x28
    5010:	08 a1       	ldd	r16, Y+32	; 0x20
    5012:	09 17       	cp	r16, r25
    5014:	08 f0       	brcs	.+2      	; 0x5018 <CashWithdrawHandle+0x248>
    5016:	18 ae       	std	Y+56, r1	; 0x38
    5018:	18 a5       	ldd	r17, Y+40	; 0x28
    501a:	2d a9       	ldd	r18, Y+53	; 0x35
    501c:	12 1b       	sub	r17, r18
    501e:	19 af       	std	Y+57, r17	; 0x39
    5020:	31 e0       	ldi	r19, 0x01	; 1
    5022:	3a af       	std	Y+58, r19	; 0x3a
    5024:	49 ad       	ldd	r20, Y+57	; 0x39
    5026:	58 a5       	ldd	r21, Y+40	; 0x28
    5028:	54 17       	cp	r21, r20
    502a:	08 f0       	brcs	.+2      	; 0x502e <CashWithdrawHandle+0x25e>
    502c:	1a ae       	std	Y+58, r1	; 0x3a
    502e:	68 ad       	ldd	r22, Y+56	; 0x38
    5030:	7a ad       	ldd	r23, Y+58	; 0x3a
    5032:	67 2b       	or	r22, r23
    5034:	68 af       	std	Y+56, r22	; 0x38
    5036:	89 ad       	ldd	r24, Y+57	; 0x39
    5038:	88 a7       	std	Y+40, r24	; 0x28
    503a:	99 a1       	ldd	r25, Y+33	; 0x21
    503c:	09 89       	ldd	r16, Y+17	; 0x11
    503e:	90 1b       	sub	r25, r16
    5040:	99 a7       	std	Y+41, r25	; 0x29
    5042:	11 e0       	ldi	r17, 0x01	; 1
    5044:	1b af       	std	Y+59, r17	; 0x3b
    5046:	29 a5       	ldd	r18, Y+41	; 0x29
    5048:	39 a1       	ldd	r19, Y+33	; 0x21
    504a:	32 17       	cp	r19, r18
    504c:	08 f0       	brcs	.+2      	; 0x5050 <CashWithdrawHandle+0x280>
    504e:	1b ae       	std	Y+59, r1	; 0x3b
    5050:	49 a5       	ldd	r20, Y+41	; 0x29
    5052:	58 ad       	ldd	r21, Y+56	; 0x38
    5054:	45 1b       	sub	r20, r21
    5056:	4c af       	std	Y+60, r20	; 0x3c
    5058:	61 e0       	ldi	r22, 0x01	; 1
    505a:	6d af       	std	Y+61, r22	; 0x3d
    505c:	7c ad       	ldd	r23, Y+60	; 0x3c
    505e:	89 a5       	ldd	r24, Y+41	; 0x29
    5060:	87 17       	cp	r24, r23
    5062:	08 f0       	brcs	.+2      	; 0x5066 <CashWithdrawHandle+0x296>
    5064:	1d ae       	std	Y+61, r1	; 0x3d
    5066:	9b ad       	ldd	r25, Y+59	; 0x3b
    5068:	0d ad       	ldd	r16, Y+61	; 0x3d
    506a:	90 2b       	or	r25, r16
    506c:	9b af       	std	Y+59, r25	; 0x3b
    506e:	1c ad       	ldd	r17, Y+60	; 0x3c
    5070:	19 a7       	std	Y+41, r17	; 0x29
    5072:	2a a1       	ldd	r18, Y+34	; 0x22
    5074:	3a 89       	ldd	r19, Y+18	; 0x12
    5076:	23 1b       	sub	r18, r19
    5078:	2a a7       	std	Y+42, r18	; 0x2a
    507a:	8a a5       	ldd	r24, Y+42	; 0x2a
    507c:	4b ad       	ldd	r20, Y+59	; 0x3b
    507e:	84 1b       	sub	r24, r20
    5080:	8a a7       	std	Y+42, r24	; 0x2a
    5082:	5b a1       	ldd	r21, Y+35	; 0x23
    5084:	59 83       	std	Y+1, r21	; 0x01
    5086:	6c a1       	ldd	r22, Y+36	; 0x24
    5088:	6a 83       	std	Y+2, r22	; 0x02
    508a:	7d a1       	ldd	r23, Y+37	; 0x25
    508c:	7b 83       	std	Y+3, r23	; 0x03
    508e:	8e a1       	ldd	r24, Y+38	; 0x26
    5090:	8c 83       	std	Y+4, r24	; 0x04
    5092:	9f a1       	ldd	r25, Y+39	; 0x27
    5094:	9d 83       	std	Y+5, r25	; 0x05
    5096:	08 a5       	ldd	r16, Y+40	; 0x28
    5098:	0e 83       	std	Y+6, r16	; 0x06
    509a:	19 a5       	ldd	r17, Y+41	; 0x29
    509c:	1f 83       	std	Y+7, r17	; 0x07
    509e:	2a a5       	ldd	r18, Y+42	; 0x2a
    50a0:	28 87       	std	Y+8, r18	; 0x08
		NumberToString(NewCash, Cash);
    50a2:	a9 80       	ldd	r10, Y+1	; 0x01
    50a4:	ba 80       	ldd	r11, Y+2	; 0x02
    50a6:	cb 80       	ldd	r12, Y+3	; 0x03
    50a8:	dc 80       	ldd	r13, Y+4	; 0x04
    50aa:	ed 80       	ldd	r14, Y+5	; 0x05
    50ac:	fe 80       	ldd	r15, Y+6	; 0x06
    50ae:	0f 81       	ldd	r16, Y+7	; 0x07
    50b0:	18 85       	ldd	r17, Y+8	; 0x08
    50b2:	ed e8       	ldi	r30, 0x8D	; 141
    50b4:	f4 e0       	ldi	r31, 0x04	; 4
    50b6:	2a 2d       	mov	r18, r10
    50b8:	3b 2d       	mov	r19, r11
    50ba:	4c 2d       	mov	r20, r12
    50bc:	5d 2d       	mov	r21, r13
    50be:	6e 2d       	mov	r22, r14
    50c0:	7f 2d       	mov	r23, r15
    50c2:	80 2f       	mov	r24, r16
    50c4:	91 2f       	mov	r25, r17
    50c6:	8f 01       	movw	r16, r30
    50c8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <NumberToString>
		if(UpdateClient(&CurrentClient, UpdateCash, Cash) != E_OK)
    50cc:	8d ea       	ldi	r24, 0xAD	; 173
    50ce:	94 e0       	ldi	r25, 0x04	; 4
    50d0:	2d e8       	ldi	r18, 0x8D	; 141
    50d2:	34 e0       	ldi	r19, 0x04	; 4
    50d4:	60 e0       	ldi	r22, 0x00	; 0
    50d6:	a9 01       	movw	r20, r18
    50d8:	0e 94 25 2a 	call	0x544a	; 0x544a <UpdateClient>
    50dc:	88 23       	and	r24, r24
    50de:	59 f0       	breq	.+22     	; 0x50f6 <CashWithdrawHandle+0x326>
		{
			SWC2_SystemTick = StandardDelay;
    50e0:	8e e1       	ldi	r24, 0x1E	; 30
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	90 93 9b 04 	sts	0x049B, r25
    50e8:	80 93 9a 04 	sts	0x049A, r24
			HandleState(Error, UnsuccessfulTransaction);
    50ec:	8f e0       	ldi	r24, 0x0F	; 15
    50ee:	65 e0       	ldi	r22, 0x05	; 5
    50f0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    50f4:	18 c0       	rjmp	.+48     	; 0x5126 <CashWithdrawHandle+0x356>
		}
		else
		{
			SWC2_SystemTick = CashGateDelay;
    50f6:	82 e3       	ldi	r24, 0x32	; 50
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	90 93 9b 04 	sts	0x049B, r25
    50fe:	80 93 9a 04 	sts	0x049A, r24
			GateState = OPEN;
    5102:	81 e0       	ldi	r24, 0x01	; 1
    5104:	80 93 9e 04 	sts	0x049E, r24
			HandleState(CashWithdraw_Response, NoError);
    5108:	8c e0       	ldi	r24, 0x0C	; 12
    510a:	60 e0       	ldi	r22, 0x00	; 0
    510c:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
    5110:	0a c0       	rjmp	.+20     	; 0x5126 <CashWithdrawHandle+0x356>
		}
	}
	else
	{
		SWC2_SystemTick = StandardDelay;
    5112:	8e e1       	ldi	r24, 0x1E	; 30
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	90 93 9b 04 	sts	0x049B, r25
    511a:	80 93 9a 04 	sts	0x049A, r24
		HandleState(Error, NoCash);
    511e:	8f e0       	ldi	r24, 0x0F	; 15
    5120:	66 e0       	ldi	r22, 0x06	; 6
    5122:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <HandleState>
	}
}
    5126:	ed 96       	adiw	r28, 0x3d	; 61
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	f8 94       	cli
    512c:	de bf       	out	0x3e, r29	; 62
    512e:	0f be       	out	0x3f, r0	; 63
    5130:	cd bf       	out	0x3d, r28	; 61
    5132:	cf 91       	pop	r28
    5134:	df 91       	pop	r29
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	bf 90       	pop	r11
    5144:	af 90       	pop	r10
    5146:	08 95       	ret

00005148 <StringToNumber>:

static uint64 StringToNumber(sint8* str)
{
    5148:	af 92       	push	r10
    514a:	bf 92       	push	r11
    514c:	cf 92       	push	r12
    514e:	df 92       	push	r13
    5150:	ef 92       	push	r14
    5152:	ff 92       	push	r15
    5154:	0f 93       	push	r16
    5156:	1f 93       	push	r17
    5158:	df 93       	push	r29
    515a:	cf 93       	push	r28
    515c:	cd b7       	in	r28, 0x3d	; 61
    515e:	de b7       	in	r29, 0x3e	; 62
    5160:	2d 97       	sbiw	r28, 0x0d	; 13
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	9d 87       	std	Y+13, r25	; 0x0d
    516e:	8c 87       	std	Y+12, r24	; 0x0c
	uint32 multiply, output = 0;
    5170:	1c 82       	std	Y+4, r1	; 0x04
    5172:	1d 82       	std	Y+5, r1	; 0x05
    5174:	1e 82       	std	Y+6, r1	; 0x06
    5176:	1f 82       	std	Y+7, r1	; 0x07
	uint8 length = string_length(str);
    5178:	8c 85       	ldd	r24, Y+12	; 0x0c
    517a:	9d 85       	ldd	r25, Y+13	; 0x0d
    517c:	0e 94 1a 2c 	call	0x5834	; 0x5834 <string_length>
    5180:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 count1 = 0; count1 < length; count1++)
    5182:	1a 82       	std	Y+2, r1	; 0x02
    5184:	5d c0       	rjmp	.+186    	; 0x5240 <StringToNumber+0xf8>
	{
		if(str[count1] == '\0')
    5186:	8a 81       	ldd	r24, Y+2	; 0x02
    5188:	28 2f       	mov	r18, r24
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	8c 85       	ldd	r24, Y+12	; 0x0c
    518e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5190:	fc 01       	movw	r30, r24
    5192:	e2 0f       	add	r30, r18
    5194:	f3 1f       	adc	r31, r19
    5196:	80 81       	ld	r24, Z
    5198:	88 23       	and	r24, r24
    519a:	09 f4       	brne	.+2      	; 0x519e <StringToNumber+0x56>
    519c:	56 c0       	rjmp	.+172    	; 0x524a <StringToNumber+0x102>
			break;

		multiply = str[count1] - '0';
    519e:	8a 81       	ldd	r24, Y+2	; 0x02
    51a0:	28 2f       	mov	r18, r24
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    51a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    51a8:	fc 01       	movw	r30, r24
    51aa:	e2 0f       	add	r30, r18
    51ac:	f3 1f       	adc	r31, r19
    51ae:	80 81       	ld	r24, Z
    51b0:	88 2f       	mov	r24, r24
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	c0 97       	sbiw	r24, 0x30	; 48
    51b6:	aa 27       	eor	r26, r26
    51b8:	97 fd       	sbrc	r25, 7
    51ba:	a0 95       	com	r26
    51bc:	ba 2f       	mov	r27, r26
    51be:	88 87       	std	Y+8, r24	; 0x08
    51c0:	99 87       	std	Y+9, r25	; 0x09
    51c2:	aa 87       	std	Y+10, r26	; 0x0a
    51c4:	bb 87       	std	Y+11, r27	; 0x0b
		if(multiply != 0)
    51c6:	88 85       	ldd	r24, Y+8	; 0x08
    51c8:	99 85       	ldd	r25, Y+9	; 0x09
    51ca:	aa 85       	ldd	r26, Y+10	; 0x0a
    51cc:	bb 85       	ldd	r27, Y+11	; 0x0b
    51ce:	00 97       	sbiw	r24, 0x00	; 0
    51d0:	a1 05       	cpc	r26, r1
    51d2:	b1 05       	cpc	r27, r1
    51d4:	11 f1       	breq	.+68     	; 0x521a <StringToNumber+0xd2>
		{
			for(uint8 count2 = count1; count2 < (length - 1); count2++)
    51d6:	8a 81       	ldd	r24, Y+2	; 0x02
    51d8:	89 83       	std	Y+1, r24	; 0x01
    51da:	15 c0       	rjmp	.+42     	; 0x5206 <StringToNumber+0xbe>
			{
				multiply *= 10;
    51dc:	88 85       	ldd	r24, Y+8	; 0x08
    51de:	99 85       	ldd	r25, Y+9	; 0x09
    51e0:	aa 85       	ldd	r26, Y+10	; 0x0a
    51e2:	bb 85       	ldd	r27, Y+11	; 0x0b
    51e4:	2a e0       	ldi	r18, 0x0A	; 10
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	40 e0       	ldi	r20, 0x00	; 0
    51ea:	50 e0       	ldi	r21, 0x00	; 0
    51ec:	bc 01       	movw	r22, r24
    51ee:	cd 01       	movw	r24, r26
    51f0:	0e 94 33 3a 	call	0x7466	; 0x7466 <__mulsi3>
    51f4:	dc 01       	movw	r26, r24
    51f6:	cb 01       	movw	r24, r22
    51f8:	88 87       	std	Y+8, r24	; 0x08
    51fa:	99 87       	std	Y+9, r25	; 0x09
    51fc:	aa 87       	std	Y+10, r26	; 0x0a
    51fe:	bb 87       	std	Y+11, r27	; 0x0b
			break;

		multiply = str[count1] - '0';
		if(multiply != 0)
		{
			for(uint8 count2 = count1; count2 < (length - 1); count2++)
    5200:	89 81       	ldd	r24, Y+1	; 0x01
    5202:	8f 5f       	subi	r24, 0xFF	; 255
    5204:	89 83       	std	Y+1, r24	; 0x01
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	28 2f       	mov	r18, r24
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	8b 81       	ldd	r24, Y+3	; 0x03
    520e:	88 2f       	mov	r24, r24
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	01 97       	sbiw	r24, 0x01	; 1
    5214:	28 17       	cp	r18, r24
    5216:	39 07       	cpc	r19, r25
    5218:	0c f3       	brlt	.-62     	; 0x51dc <StringToNumber+0x94>
			{
				multiply *= 10;
			}
		}
		output += multiply;
    521a:	2c 81       	ldd	r18, Y+4	; 0x04
    521c:	3d 81       	ldd	r19, Y+5	; 0x05
    521e:	4e 81       	ldd	r20, Y+6	; 0x06
    5220:	5f 81       	ldd	r21, Y+7	; 0x07
    5222:	88 85       	ldd	r24, Y+8	; 0x08
    5224:	99 85       	ldd	r25, Y+9	; 0x09
    5226:	aa 85       	ldd	r26, Y+10	; 0x0a
    5228:	bb 85       	ldd	r27, Y+11	; 0x0b
    522a:	82 0f       	add	r24, r18
    522c:	93 1f       	adc	r25, r19
    522e:	a4 1f       	adc	r26, r20
    5230:	b5 1f       	adc	r27, r21
    5232:	8c 83       	std	Y+4, r24	; 0x04
    5234:	9d 83       	std	Y+5, r25	; 0x05
    5236:	ae 83       	std	Y+6, r26	; 0x06
    5238:	bf 83       	std	Y+7, r27	; 0x07

static uint64 StringToNumber(sint8* str)
{
	uint32 multiply, output = 0;
	uint8 length = string_length(str);
	for(uint8 count1 = 0; count1 < length; count1++)
    523a:	8a 81       	ldd	r24, Y+2	; 0x02
    523c:	8f 5f       	subi	r24, 0xFF	; 255
    523e:	8a 83       	std	Y+2, r24	; 0x02
    5240:	9a 81       	ldd	r25, Y+2	; 0x02
    5242:	8b 81       	ldd	r24, Y+3	; 0x03
    5244:	98 17       	cp	r25, r24
    5246:	08 f4       	brcc	.+2      	; 0x524a <StringToNumber+0x102>
    5248:	9e cf       	rjmp	.-196    	; 0x5186 <StringToNumber+0x3e>
				multiply *= 10;
			}
		}
		output += multiply;
	}
	return output;
    524a:	8c 81       	ldd	r24, Y+4	; 0x04
    524c:	9d 81       	ldd	r25, Y+5	; 0x05
    524e:	ae 81       	ldd	r26, Y+6	; 0x06
    5250:	bf 81       	ldd	r27, Y+7	; 0x07
    5252:	9c 01       	movw	r18, r24
    5254:	ad 01       	movw	r20, r26
    5256:	60 e0       	ldi	r22, 0x00	; 0
    5258:	70 e0       	ldi	r23, 0x00	; 0
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	a2 2e       	mov	r10, r18
    5260:	b3 2e       	mov	r11, r19
    5262:	c4 2e       	mov	r12, r20
    5264:	d5 2e       	mov	r13, r21
    5266:	e6 2e       	mov	r14, r22
    5268:	f7 2e       	mov	r15, r23
    526a:	08 2f       	mov	r16, r24
    526c:	19 2f       	mov	r17, r25
}
    526e:	2a 2d       	mov	r18, r10
    5270:	3b 2d       	mov	r19, r11
    5272:	4c 2d       	mov	r20, r12
    5274:	5d 2d       	mov	r21, r13
    5276:	6e 2d       	mov	r22, r14
    5278:	7f 2d       	mov	r23, r15
    527a:	80 2f       	mov	r24, r16
    527c:	91 2f       	mov	r25, r17
    527e:	2d 96       	adiw	r28, 0x0d	; 13
    5280:	0f b6       	in	r0, 0x3f	; 63
    5282:	f8 94       	cli
    5284:	de bf       	out	0x3e, r29	; 62
    5286:	0f be       	out	0x3f, r0	; 63
    5288:	cd bf       	out	0x3d, r28	; 61
    528a:	cf 91       	pop	r28
    528c:	df 91       	pop	r29
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	ff 90       	pop	r15
    5294:	ef 90       	pop	r14
    5296:	df 90       	pop	r13
    5298:	cf 90       	pop	r12
    529a:	bf 90       	pop	r11
    529c:	af 90       	pop	r10
    529e:	08 95       	ret

000052a0 <NumberToString>:

static void NumberToString(uint64 num, sint8* str)
{
    52a0:	af 92       	push	r10
    52a2:	bf 92       	push	r11
    52a4:	cf 92       	push	r12
    52a6:	df 92       	push	r13
    52a8:	ef 92       	push	r14
    52aa:	ff 92       	push	r15
    52ac:	0f 93       	push	r16
    52ae:	1f 93       	push	r17
    52b0:	df 93       	push	r29
    52b2:	cf 93       	push	r28
    52b4:	cd b7       	in	r28, 0x3d	; 61
    52b6:	de b7       	in	r29, 0x3e	; 62
    52b8:	61 97       	sbiw	r28, 0x11	; 17
    52ba:	0f b6       	in	r0, 0x3f	; 63
    52bc:	f8 94       	cli
    52be:	de bf       	out	0x3e, r29	; 62
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	cd bf       	out	0x3d, r28	; 61
    52c4:	28 87       	std	Y+8, r18	; 0x08
    52c6:	39 87       	std	Y+9, r19	; 0x09
    52c8:	4a 87       	std	Y+10, r20	; 0x0a
    52ca:	5b 87       	std	Y+11, r21	; 0x0b
    52cc:	6c 87       	std	Y+12, r22	; 0x0c
    52ce:	7d 87       	std	Y+13, r23	; 0x0d
    52d0:	8e 87       	std	Y+14, r24	; 0x0e
    52d2:	9f 87       	std	Y+15, r25	; 0x0f
    52d4:	19 8b       	std	Y+17, r17	; 0x11
    52d6:	08 8b       	std	Y+16, r16	; 0x10
    uint8 count, rem, length = 0;
    52d8:	1d 82       	std	Y+5, r1	; 0x05
    uint32 value = num;
    52da:	88 85       	ldd	r24, Y+8	; 0x08
    52dc:	99 85       	ldd	r25, Y+9	; 0x09
    52de:	aa 85       	ldd	r26, Y+10	; 0x0a
    52e0:	bb 85       	ldd	r27, Y+11	; 0x0b
    52e2:	89 83       	std	Y+1, r24	; 0x01
    52e4:	9a 83       	std	Y+2, r25	; 0x02
    52e6:	ab 83       	std	Y+3, r26	; 0x03
    52e8:	bc 83       	std	Y+4, r27	; 0x04
    52ea:	15 c0       	rjmp	.+42     	; 0x5316 <NumberToString+0x76>

    while (value != 0)
    {
    	length++;
    52ec:	8d 81       	ldd	r24, Y+5	; 0x05
    52ee:	8f 5f       	subi	r24, 0xFF	; 255
    52f0:	8d 83       	std	Y+5, r24	; 0x05
    	value /= 10;
    52f2:	89 81       	ldd	r24, Y+1	; 0x01
    52f4:	9a 81       	ldd	r25, Y+2	; 0x02
    52f6:	ab 81       	ldd	r26, Y+3	; 0x03
    52f8:	bc 81       	ldd	r27, Y+4	; 0x04
    52fa:	2a e0       	ldi	r18, 0x0A	; 10
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	bc 01       	movw	r22, r24
    5304:	cd 01       	movw	r24, r26
    5306:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__udivmodsi4>
    530a:	da 01       	movw	r26, r20
    530c:	c9 01       	movw	r24, r18
    530e:	89 83       	std	Y+1, r24	; 0x01
    5310:	9a 83       	std	Y+2, r25	; 0x02
    5312:	ab 83       	std	Y+3, r26	; 0x03
    5314:	bc 83       	std	Y+4, r27	; 0x04
static void NumberToString(uint64 num, sint8* str)
{
    uint8 count, rem, length = 0;
    uint32 value = num;

    while (value != 0)
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	9a 81       	ldd	r25, Y+2	; 0x02
    531a:	ab 81       	ldd	r26, Y+3	; 0x03
    531c:	bc 81       	ldd	r27, Y+4	; 0x04
    531e:	00 97       	sbiw	r24, 0x00	; 0
    5320:	a1 05       	cpc	r26, r1
    5322:	b1 05       	cpc	r27, r1
    5324:	19 f7       	brne	.-58     	; 0x52ec <NumberToString+0x4c>
    {
    	length++;
    	value /= 10;
    }
    for (count = 0; count < length; count++)
    5326:	1f 82       	std	Y+7, r1	; 0x07
    5328:	71 c0       	rjmp	.+226    	; 0x540c <NumberToString+0x16c>
    {
        rem = num % 10;
    532a:	a8 84       	ldd	r10, Y+8	; 0x08
    532c:	b9 84       	ldd	r11, Y+9	; 0x09
    532e:	ca 84       	ldd	r12, Y+10	; 0x0a
    5330:	db 84       	ldd	r13, Y+11	; 0x0b
    5332:	ec 84       	ldd	r14, Y+12	; 0x0c
    5334:	fd 84       	ldd	r15, Y+13	; 0x0d
    5336:	0e 85       	ldd	r16, Y+14	; 0x0e
    5338:	1f 85       	ldd	r17, Y+15	; 0x0f
    533a:	2a 2d       	mov	r18, r10
    533c:	3b 2d       	mov	r19, r11
    533e:	4c 2d       	mov	r20, r12
    5340:	5d 2d       	mov	r21, r13
    5342:	6e 2d       	mov	r22, r14
    5344:	7f 2d       	mov	r23, r15
    5346:	80 2f       	mov	r24, r16
    5348:	91 2f       	mov	r25, r17
    534a:	0f 2e       	mov	r0, r31
    534c:	fa e0       	ldi	r31, 0x0A	; 10
    534e:	af 2e       	mov	r10, r31
    5350:	f0 2d       	mov	r31, r0
    5352:	bb 24       	eor	r11, r11
    5354:	cc 24       	eor	r12, r12
    5356:	dd 24       	eor	r13, r13
    5358:	ee 24       	eor	r14, r14
    535a:	ff 24       	eor	r15, r15
    535c:	00 e0       	ldi	r16, 0x00	; 0
    535e:	10 e0       	ldi	r17, 0x00	; 0
    5360:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    5364:	a2 2e       	mov	r10, r18
    5366:	b3 2e       	mov	r11, r19
    5368:	c4 2e       	mov	r12, r20
    536a:	d5 2e       	mov	r13, r21
    536c:	e6 2e       	mov	r14, r22
    536e:	f7 2e       	mov	r15, r23
    5370:	08 2f       	mov	r16, r24
    5372:	19 2f       	mov	r17, r25
    5374:	2a 2d       	mov	r18, r10
    5376:	3b 2d       	mov	r19, r11
    5378:	4c 2d       	mov	r20, r12
    537a:	5d 2d       	mov	r21, r13
    537c:	6e 2d       	mov	r22, r14
    537e:	7f 2d       	mov	r23, r15
    5380:	80 2f       	mov	r24, r16
    5382:	91 2f       	mov	r25, r17
    5384:	2e 83       	std	Y+6, r18	; 0x06
        num = num / 10;
    5386:	a8 84       	ldd	r10, Y+8	; 0x08
    5388:	b9 84       	ldd	r11, Y+9	; 0x09
    538a:	ca 84       	ldd	r12, Y+10	; 0x0a
    538c:	db 84       	ldd	r13, Y+11	; 0x0b
    538e:	ec 84       	ldd	r14, Y+12	; 0x0c
    5390:	fd 84       	ldd	r15, Y+13	; 0x0d
    5392:	0e 85       	ldd	r16, Y+14	; 0x0e
    5394:	1f 85       	ldd	r17, Y+15	; 0x0f
    5396:	2a 2d       	mov	r18, r10
    5398:	3b 2d       	mov	r19, r11
    539a:	4c 2d       	mov	r20, r12
    539c:	5d 2d       	mov	r21, r13
    539e:	6e 2d       	mov	r22, r14
    53a0:	7f 2d       	mov	r23, r15
    53a2:	80 2f       	mov	r24, r16
    53a4:	91 2f       	mov	r25, r17
    53a6:	0f 2e       	mov	r0, r31
    53a8:	fa e0       	ldi	r31, 0x0A	; 10
    53aa:	af 2e       	mov	r10, r31
    53ac:	f0 2d       	mov	r31, r0
    53ae:	bb 24       	eor	r11, r11
    53b0:	cc 24       	eor	r12, r12
    53b2:	dd 24       	eor	r13, r13
    53b4:	ee 24       	eor	r14, r14
    53b6:	ff 24       	eor	r15, r15
    53b8:	00 e0       	ldi	r16, 0x00	; 0
    53ba:	10 e0       	ldi	r17, 0x00	; 0
    53bc:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    53c0:	a2 2e       	mov	r10, r18
    53c2:	b3 2e       	mov	r11, r19
    53c4:	c4 2e       	mov	r12, r20
    53c6:	d5 2e       	mov	r13, r21
    53c8:	e6 2e       	mov	r14, r22
    53ca:	f7 2e       	mov	r15, r23
    53cc:	08 2f       	mov	r16, r24
    53ce:	19 2f       	mov	r17, r25
    53d0:	a8 86       	std	Y+8, r10	; 0x08
    53d2:	b9 86       	std	Y+9, r11	; 0x09
    53d4:	ca 86       	std	Y+10, r12	; 0x0a
    53d6:	db 86       	std	Y+11, r13	; 0x0b
    53d8:	ec 86       	std	Y+12, r14	; 0x0c
    53da:	fd 86       	std	Y+13, r15	; 0x0d
    53dc:	0e 87       	std	Y+14, r16	; 0x0e
    53de:	1f 87       	std	Y+15, r17	; 0x0f
        str[length - (count + 1)] = rem + '0';
    53e0:	8d 81       	ldd	r24, Y+5	; 0x05
    53e2:	28 2f       	mov	r18, r24
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	8f 81       	ldd	r24, Y+7	; 0x07
    53e8:	88 2f       	mov	r24, r24
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	80 95       	com	r24
    53ee:	90 95       	com	r25
    53f0:	82 0f       	add	r24, r18
    53f2:	93 1f       	adc	r25, r19
    53f4:	9c 01       	movw	r18, r24
    53f6:	88 89       	ldd	r24, Y+16	; 0x10
    53f8:	99 89       	ldd	r25, Y+17	; 0x11
    53fa:	fc 01       	movw	r30, r24
    53fc:	e2 0f       	add	r30, r18
    53fe:	f3 1f       	adc	r31, r19
    5400:	8e 81       	ldd	r24, Y+6	; 0x06
    5402:	80 5d       	subi	r24, 0xD0	; 208
    5404:	80 83       	st	Z, r24
    while (value != 0)
    {
    	length++;
    	value /= 10;
    }
    for (count = 0; count < length; count++)
    5406:	8f 81       	ldd	r24, Y+7	; 0x07
    5408:	8f 5f       	subi	r24, 0xFF	; 255
    540a:	8f 83       	std	Y+7, r24	; 0x07
    540c:	9f 81       	ldd	r25, Y+7	; 0x07
    540e:	8d 81       	ldd	r24, Y+5	; 0x05
    5410:	98 17       	cp	r25, r24
    5412:	08 f4       	brcc	.+2      	; 0x5416 <NumberToString+0x176>
    5414:	8a cf       	rjmp	.-236    	; 0x532a <NumberToString+0x8a>
    {
        rem = num % 10;
        num = num / 10;
        str[length - (count + 1)] = rem + '0';
    }
    str[length] = '\0';
    5416:	8d 81       	ldd	r24, Y+5	; 0x05
    5418:	28 2f       	mov	r18, r24
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	88 89       	ldd	r24, Y+16	; 0x10
    541e:	99 89       	ldd	r25, Y+17	; 0x11
    5420:	fc 01       	movw	r30, r24
    5422:	e2 0f       	add	r30, r18
    5424:	f3 1f       	adc	r31, r19
    5426:	10 82       	st	Z, r1
}
    5428:	61 96       	adiw	r28, 0x11	; 17
    542a:	0f b6       	in	r0, 0x3f	; 63
    542c:	f8 94       	cli
    542e:	de bf       	out	0x3e, r29	; 62
    5430:	0f be       	out	0x3f, r0	; 63
    5432:	cd bf       	out	0x3d, r28	; 61
    5434:	cf 91       	pop	r28
    5436:	df 91       	pop	r29
    5438:	1f 91       	pop	r17
    543a:	0f 91       	pop	r16
    543c:	ff 90       	pop	r15
    543e:	ef 90       	pop	r14
    5440:	df 90       	pop	r13
    5442:	cf 90       	pop	r12
    5444:	bf 90       	pop	r11
    5446:	af 90       	pop	r10
    5448:	08 95       	ret

0000544a <UpdateClient>:

static Std_ReturnType UpdateClient(CLIENT_PROFILE* client, uint8 Item, sint8* NewVlue)
{
    544a:	df 93       	push	r29
    544c:	cf 93       	push	r28
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	2c 97       	sbiw	r28, 0x0c	; 12
    5454:	0f b6       	in	r0, 0x3f	; 63
    5456:	f8 94       	cli
    5458:	de bf       	out	0x3e, r29	; 62
    545a:	0f be       	out	0x3f, r0	; 63
    545c:	cd bf       	out	0x3d, r28	; 61
    545e:	98 87       	std	Y+8, r25	; 0x08
    5460:	8f 83       	std	Y+7, r24	; 0x07
    5462:	69 87       	std	Y+9, r22	; 0x09
    5464:	5b 87       	std	Y+11, r21	; 0x0b
    5466:	4a 87       	std	Y+10, r20	; 0x0a
	Std_ReturnType ReturnValue = E_NOT_OK;
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	8e 83       	std	Y+6, r24	; 0x06
	uint8* PTR = (uint8*)client;
    546c:	8f 81       	ldd	r24, Y+7	; 0x07
    546e:	98 85       	ldd	r25, Y+8	; 0x08
    5470:	9d 83       	std	Y+5, r25	; 0x05
    5472:	8c 83       	std	Y+4, r24	; 0x04
	if(Item == UpdateCash)
    5474:	89 85       	ldd	r24, Y+9	; 0x09
    5476:	88 23       	and	r24, r24
    5478:	f9 f4       	brne	.+62     	; 0x54b8 <UpdateClient+0x6e>
	{
		PTR = (uint8*)(client -> Cash);
    547a:	8f 81       	ldd	r24, Y+7	; 0x07
    547c:	98 85       	ldd	r25, Y+8	; 0x08
    547e:	9d 83       	std	Y+5, r25	; 0x05
    5480:	8c 83       	std	Y+4, r24	; 0x04
		for(uint8 count = 0; count < CashSize; count++)
    5482:	1b 82       	std	Y+3, r1	; 0x03
    5484:	15 c0       	rjmp	.+42     	; 0x54b0 <UpdateClient+0x66>
		{
			PTR[count] = NewVlue[count];
    5486:	8b 81       	ldd	r24, Y+3	; 0x03
    5488:	28 2f       	mov	r18, r24
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	8c 81       	ldd	r24, Y+4	; 0x04
    548e:	9d 81       	ldd	r25, Y+5	; 0x05
    5490:	dc 01       	movw	r26, r24
    5492:	a2 0f       	add	r26, r18
    5494:	b3 1f       	adc	r27, r19
    5496:	8b 81       	ldd	r24, Y+3	; 0x03
    5498:	28 2f       	mov	r18, r24
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	8a 85       	ldd	r24, Y+10	; 0x0a
    549e:	9b 85       	ldd	r25, Y+11	; 0x0b
    54a0:	fc 01       	movw	r30, r24
    54a2:	e2 0f       	add	r30, r18
    54a4:	f3 1f       	adc	r31, r19
    54a6:	80 81       	ld	r24, Z
    54a8:	8c 93       	st	X, r24
	Std_ReturnType ReturnValue = E_NOT_OK;
	uint8* PTR = (uint8*)client;
	if(Item == UpdateCash)
	{
		PTR = (uint8*)(client -> Cash);
		for(uint8 count = 0; count < CashSize; count++)
    54aa:	8b 81       	ldd	r24, Y+3	; 0x03
    54ac:	8f 5f       	subi	r24, 0xFF	; 255
    54ae:	8b 83       	std	Y+3, r24	; 0x03
    54b0:	8b 81       	ldd	r24, Y+3	; 0x03
    54b2:	88 30       	cpi	r24, 0x08	; 8
    54b4:	40 f3       	brcs	.-48     	; 0x5486 <UpdateClient+0x3c>
    54b6:	26 c0       	rjmp	.+76     	; 0x5504 <UpdateClient+0xba>
		{
			PTR[count] = NewVlue[count];
		}
	}
	else if(Item == UpdatePass)
    54b8:	89 85       	ldd	r24, Y+9	; 0x09
    54ba:	81 30       	cpi	r24, 0x01	; 1
    54bc:	01 f5       	brne	.+64     	; 0x54fe <UpdateClient+0xb4>
	{
		PTR = (uint8*)(client -> Pass);
    54be:	8f 81       	ldd	r24, Y+7	; 0x07
    54c0:	98 85       	ldd	r25, Y+8	; 0x08
    54c2:	08 96       	adiw	r24, 0x08	; 8
    54c4:	9d 83       	std	Y+5, r25	; 0x05
    54c6:	8c 83       	std	Y+4, r24	; 0x04
		for(uint8 count = 0; count < PassSize; count++)
    54c8:	1a 82       	std	Y+2, r1	; 0x02
    54ca:	15 c0       	rjmp	.+42     	; 0x54f6 <UpdateClient+0xac>
		{
			PTR[count] = NewVlue[count];
    54cc:	8a 81       	ldd	r24, Y+2	; 0x02
    54ce:	28 2f       	mov	r18, r24
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	8c 81       	ldd	r24, Y+4	; 0x04
    54d4:	9d 81       	ldd	r25, Y+5	; 0x05
    54d6:	dc 01       	movw	r26, r24
    54d8:	a2 0f       	add	r26, r18
    54da:	b3 1f       	adc	r27, r19
    54dc:	8a 81       	ldd	r24, Y+2	; 0x02
    54de:	28 2f       	mov	r18, r24
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    54e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    54e6:	fc 01       	movw	r30, r24
    54e8:	e2 0f       	add	r30, r18
    54ea:	f3 1f       	adc	r31, r19
    54ec:	80 81       	ld	r24, Z
    54ee:	8c 93       	st	X, r24
		}
	}
	else if(Item == UpdatePass)
	{
		PTR = (uint8*)(client -> Pass);
		for(uint8 count = 0; count < PassSize; count++)
    54f0:	8a 81       	ldd	r24, Y+2	; 0x02
    54f2:	8f 5f       	subi	r24, 0xFF	; 255
    54f4:	8a 83       	std	Y+2, r24	; 0x02
    54f6:	8a 81       	ldd	r24, Y+2	; 0x02
    54f8:	85 30       	cpi	r24, 0x05	; 5
    54fa:	40 f3       	brcs	.-48     	; 0x54cc <UpdateClient+0x82>
    54fc:	03 c0       	rjmp	.+6      	; 0x5504 <UpdateClient+0xba>
			PTR[count] = NewVlue[count];
		}
	}
	else
	{
		return ReturnValue;
    54fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5500:	8c 87       	std	Y+12, r24	; 0x0c
    5502:	4e c0       	rjmp	.+156    	; 0x55a0 <UpdateClient+0x156>
	}
	PTR = (uint8*)client;
    5504:	8f 81       	ldd	r24, Y+7	; 0x07
    5506:	98 85       	ldd	r25, Y+8	; 0x08
    5508:	9d 83       	std	Y+5, r25	; 0x05
    550a:	8c 83       	std	Y+4, r24	; 0x04
	SendCommand(ATM_TriggerTransmission);
    550c:	81 e4       	ldi	r24, 0x41	; 65
    550e:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    5512:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5516:	8a 34       	cpi	r24, 0x4A	; 74
    5518:	31 f0       	breq	.+12     	; 0x5526 <UpdateClient+0xdc>
	{
		SendCommand(ATM_EndTransmission);
    551a:	82 e4       	ldi	r24, 0x42	; 66
    551c:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    5520:	8e 81       	ldd	r24, Y+6	; 0x06
    5522:	8c 87       	std	Y+12, r24	; 0x0c
    5524:	3d c0       	rjmp	.+122    	; 0x55a0 <UpdateClient+0x156>
	}
	SendCommand(ATM_UpdateClient);
    5526:	84 e4       	ldi	r24, 0x44	; 68
    5528:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    552c:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5530:	8a 34       	cpi	r24, 0x4A	; 74
    5532:	31 f0       	breq	.+12     	; 0x5540 <UpdateClient+0xf6>
	{
		SendCommand(ATM_EndTransmission);
    5534:	82 e4       	ldi	r24, 0x42	; 66
    5536:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    553a:	8e 81       	ldd	r24, Y+6	; 0x06
    553c:	8c 87       	std	Y+12, r24	; 0x0c
    553e:	30 c0       	rjmp	.+96     	; 0x55a0 <UpdateClient+0x156>
	}
	for(uint8 count = 0; count < ClientSize; count++)
    5540:	19 82       	std	Y+1, r1	; 0x01
    5542:	0e c0       	rjmp	.+28     	; 0x5560 <UpdateClient+0x116>
	{
		SendByte(PTR[count]);
    5544:	89 81       	ldd	r24, Y+1	; 0x01
    5546:	28 2f       	mov	r18, r24
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	8c 81       	ldd	r24, Y+4	; 0x04
    554c:	9d 81       	ldd	r25, Y+5	; 0x05
    554e:	fc 01       	movw	r30, r24
    5550:	e2 0f       	add	r30, r18
    5552:	f3 1f       	adc	r31, r19
    5554:	80 81       	ld	r24, Z
    5556:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
	{
		SendCommand(ATM_EndTransmission);
		return ReturnValue;
	}
	for(uint8 count = 0; count < ClientSize; count++)
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	8f 5f       	subi	r24, 0xFF	; 255
    555e:	89 83       	std	Y+1, r24	; 0x01
    5560:	89 81       	ldd	r24, Y+1	; 0x01
    5562:	80 31       	cpi	r24, 0x10	; 16
    5564:	78 f3       	brcs	.-34     	; 0x5544 <UpdateClient+0xfa>
	{
		SendByte(PTR[count]);
	}
	SendCommand(ATM_FrameEnd);
    5566:	87 e4       	ldi	r24, 0x47	; 71
    5568:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    556c:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5570:	89 34       	cpi	r24, 0x49	; 73
    5572:	31 f0       	breq	.+12     	; 0x5580 <UpdateClient+0x136>
	{
		SendCommand(ATM_EndTransmission);
    5574:	82 e4       	ldi	r24, 0x42	; 66
    5576:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    557a:	8e 81       	ldd	r24, Y+6	; 0x06
    557c:	8c 87       	std	Y+12, r24	; 0x0c
    557e:	10 c0       	rjmp	.+32     	; 0x55a0 <UpdateClient+0x156>
	}
	SendCommand(ATM_EndTransmission);
    5580:	82 e4       	ldi	r24, 0x42	; 66
    5582:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    5586:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    558a:	89 34       	cpi	r24, 0x49	; 73
    558c:	31 f0       	breq	.+12     	; 0x559a <UpdateClient+0x150>
	{
		SendCommand(ATM_EndTransmission);
    558e:	82 e4       	ldi	r24, 0x42	; 66
    5590:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    5594:	8e 81       	ldd	r24, Y+6	; 0x06
    5596:	8c 87       	std	Y+12, r24	; 0x0c
    5598:	03 c0       	rjmp	.+6      	; 0x55a0 <UpdateClient+0x156>
	}
	ReturnValue = E_OK;
    559a:	1e 82       	std	Y+6, r1	; 0x06
	return ReturnValue;
    559c:	8e 81       	ldd	r24, Y+6	; 0x06
    559e:	8c 87       	std	Y+12, r24	; 0x0c
    55a0:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    55a2:	2c 96       	adiw	r28, 0x0c	; 12
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	cf 91       	pop	r28
    55b0:	df 91       	pop	r29
    55b2:	08 95       	ret

000055b4 <GetClient>:

static Std_ReturnType GetClient(CLIENT_PROFILE* client, uint8 id)
{
    55b4:	0f 93       	push	r16
    55b6:	1f 93       	push	r17
    55b8:	df 93       	push	r29
    55ba:	cf 93       	push	r28
    55bc:	cd b7       	in	r28, 0x3d	; 61
    55be:	de b7       	in	r29, 0x3e	; 62
    55c0:	29 97       	sbiw	r28, 0x09	; 9
    55c2:	0f b6       	in	r0, 0x3f	; 63
    55c4:	f8 94       	cli
    55c6:	de bf       	out	0x3e, r29	; 62
    55c8:	0f be       	out	0x3f, r0	; 63
    55ca:	cd bf       	out	0x3d, r28	; 61
    55cc:	9f 83       	std	Y+7, r25	; 0x07
    55ce:	8e 83       	std	Y+6, r24	; 0x06
    55d0:	68 87       	std	Y+8, r22	; 0x08
	Std_ReturnType ReturnValue = E_NOT_OK;
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	8d 83       	std	Y+5, r24	; 0x05
	uint8* PTR = (uint8*)(client -> Cash);
    55d6:	8e 81       	ldd	r24, Y+6	; 0x06
    55d8:	9f 81       	ldd	r25, Y+7	; 0x07
    55da:	9c 83       	std	Y+4, r25	; 0x04
    55dc:	8b 83       	std	Y+3, r24	; 0x03
	SendCommand(ATM_TriggerTransmission);
    55de:	81 e4       	ldi	r24, 0x41	; 65
    55e0:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    55e4:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    55e8:	8a 34       	cpi	r24, 0x4A	; 74
    55ea:	31 f0       	breq	.+12     	; 0x55f8 <GetClient+0x44>
	{
		SendCommand(ATM_EndTransmission);
    55ec:	82 e4       	ldi	r24, 0x42	; 66
    55ee:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    55f2:	8d 81       	ldd	r24, Y+5	; 0x05
    55f4:	89 87       	std	Y+9, r24	; 0x09
    55f6:	af c0       	rjmp	.+350    	; 0x5756 <GetClient+0x1a2>
	}
	SendCommand(ATM_GetClientCash);
    55f8:	86 e4       	ldi	r24, 0x46	; 70
    55fa:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    55fe:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5602:	8a 34       	cpi	r24, 0x4A	; 74
    5604:	31 f0       	breq	.+12     	; 0x5612 <GetClient+0x5e>
	{
		SendCommand(ATM_EndTransmission);
    5606:	82 e4       	ldi	r24, 0x42	; 66
    5608:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    560c:	ed 81       	ldd	r30, Y+5	; 0x05
    560e:	e9 87       	std	Y+9, r30	; 0x09
    5610:	a2 c0       	rjmp	.+324    	; 0x5756 <GetClient+0x1a2>
	}
	SendByte(id);
    5612:	88 85       	ldd	r24, Y+8	; 0x08
    5614:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    5618:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    561c:	89 34       	cpi	r24, 0x49	; 73
    561e:	31 f0       	breq	.+12     	; 0x562c <GetClient+0x78>
	{
		SendCommand(ATM_EndTransmission);
    5620:	82 e4       	ldi	r24, 0x42	; 66
    5622:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    5626:	fd 81       	ldd	r31, Y+5	; 0x05
    5628:	f9 87       	std	Y+9, r31	; 0x09
    562a:	95 c0       	rjmp	.+298    	; 0x5756 <GetClient+0x1a2>
	}
	for(uint8 count = 0; count < CashSize; count++)
    562c:	1a 82       	std	Y+2, r1	; 0x02
    562e:	0f c0       	rjmp	.+30     	; 0x564e <GetClient+0x9a>
	{
		PTR[count] = GetByte();
    5630:	8a 81       	ldd	r24, Y+2	; 0x02
    5632:	28 2f       	mov	r18, r24
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	8b 81       	ldd	r24, Y+3	; 0x03
    5638:	9c 81       	ldd	r25, Y+4	; 0x04
    563a:	8c 01       	movw	r16, r24
    563c:	02 0f       	add	r16, r18
    563e:	13 1f       	adc	r17, r19
    5640:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5644:	f8 01       	movw	r30, r16
    5646:	80 83       	st	Z, r24
	if(GetCommand() != Server_Success)
	{
		SendCommand(ATM_EndTransmission);
		return ReturnValue;
	}
	for(uint8 count = 0; count < CashSize; count++)
    5648:	8a 81       	ldd	r24, Y+2	; 0x02
    564a:	8f 5f       	subi	r24, 0xFF	; 255
    564c:	8a 83       	std	Y+2, r24	; 0x02
    564e:	8a 81       	ldd	r24, Y+2	; 0x02
    5650:	88 30       	cpi	r24, 0x08	; 8
    5652:	70 f3       	brcs	.-36     	; 0x5630 <GetClient+0x7c>
	{
		PTR[count] = GetByte();
	}
	if(GetCommand() != Server_FrameEnd)
    5654:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5658:	8b 34       	cpi	r24, 0x4B	; 75
    565a:	31 f0       	breq	.+12     	; 0x5668 <GetClient+0xb4>
	{
		SendCommand(ATM_EndTransmission);
    565c:	82 e4       	ldi	r24, 0x42	; 66
    565e:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    5662:	fd 81       	ldd	r31, Y+5	; 0x05
    5664:	f9 87       	std	Y+9, r31	; 0x09
    5666:	77 c0       	rjmp	.+238    	; 0x5756 <GetClient+0x1a2>
	}
	SendCommand(ATM_EndTransmission);
    5668:	82 e4       	ldi	r24, 0x42	; 66
    566a:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    566e:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5672:	89 34       	cpi	r24, 0x49	; 73
    5674:	31 f0       	breq	.+12     	; 0x5682 <GetClient+0xce>
	{
		SendCommand(ATM_EndTransmission);
    5676:	82 e4       	ldi	r24, 0x42	; 66
    5678:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    567c:	8d 81       	ldd	r24, Y+5	; 0x05
    567e:	89 87       	std	Y+9, r24	; 0x09
    5680:	6a c0       	rjmp	.+212    	; 0x5756 <GetClient+0x1a2>
	}
	PTR = (uint8*)(client -> Pass);
    5682:	8e 81       	ldd	r24, Y+6	; 0x06
    5684:	9f 81       	ldd	r25, Y+7	; 0x07
    5686:	08 96       	adiw	r24, 0x08	; 8
    5688:	9c 83       	std	Y+4, r25	; 0x04
    568a:	8b 83       	std	Y+3, r24	; 0x03
	SendCommand(ATM_TriggerTransmission);
    568c:	81 e4       	ldi	r24, 0x41	; 65
    568e:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    5692:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5696:	8a 34       	cpi	r24, 0x4A	; 74
    5698:	31 f0       	breq	.+12     	; 0x56a6 <GetClient+0xf2>
	{
		SendCommand(ATM_EndTransmission);
    569a:	82 e4       	ldi	r24, 0x42	; 66
    569c:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    56a0:	ed 81       	ldd	r30, Y+5	; 0x05
    56a2:	e9 87       	std	Y+9, r30	; 0x09
    56a4:	58 c0       	rjmp	.+176    	; 0x5756 <GetClient+0x1a2>
	}
	SendCommand(ATM_GetClientPass);
    56a6:	85 e4       	ldi	r24, 0x45	; 69
    56a8:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    56ac:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    56b0:	8a 34       	cpi	r24, 0x4A	; 74
    56b2:	31 f0       	breq	.+12     	; 0x56c0 <GetClient+0x10c>
	{
		SendCommand(ATM_EndTransmission);
    56b4:	82 e4       	ldi	r24, 0x42	; 66
    56b6:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    56ba:	fd 81       	ldd	r31, Y+5	; 0x05
    56bc:	f9 87       	std	Y+9, r31	; 0x09
    56be:	4b c0       	rjmp	.+150    	; 0x5756 <GetClient+0x1a2>
	}
	SendByte(id);
    56c0:	88 85       	ldd	r24, Y+8	; 0x08
    56c2:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    56c6:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    56ca:	89 34       	cpi	r24, 0x49	; 73
    56cc:	31 f0       	breq	.+12     	; 0x56da <GetClient+0x126>
	{
		SendCommand(ATM_EndTransmission);
    56ce:	82 e4       	ldi	r24, 0x42	; 66
    56d0:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    56d4:	8d 81       	ldd	r24, Y+5	; 0x05
    56d6:	89 87       	std	Y+9, r24	; 0x09
    56d8:	3e c0       	rjmp	.+124    	; 0x5756 <GetClient+0x1a2>
	}
	for(uint8 count = 0; count < PassSize; count++)
    56da:	19 82       	std	Y+1, r1	; 0x01
    56dc:	0f c0       	rjmp	.+30     	; 0x56fc <GetClient+0x148>
	{
		PTR[count] = GetByte();
    56de:	89 81       	ldd	r24, Y+1	; 0x01
    56e0:	28 2f       	mov	r18, r24
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	8b 81       	ldd	r24, Y+3	; 0x03
    56e6:	9c 81       	ldd	r25, Y+4	; 0x04
    56e8:	8c 01       	movw	r16, r24
    56ea:	02 0f       	add	r16, r18
    56ec:	13 1f       	adc	r17, r19
    56ee:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    56f2:	f8 01       	movw	r30, r16
    56f4:	80 83       	st	Z, r24
	if(GetCommand() != Server_Success)
	{
		SendCommand(ATM_EndTransmission);
		return ReturnValue;
	}
	for(uint8 count = 0; count < PassSize; count++)
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	8f 5f       	subi	r24, 0xFF	; 255
    56fa:	89 83       	std	Y+1, r24	; 0x01
    56fc:	89 81       	ldd	r24, Y+1	; 0x01
    56fe:	85 30       	cpi	r24, 0x05	; 5
    5700:	70 f3       	brcs	.-36     	; 0x56de <GetClient+0x12a>
	{
		PTR[count] = GetByte();
	}
	if(GetCommand() != Server_FrameEnd)
    5702:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5706:	8b 34       	cpi	r24, 0x4B	; 75
    5708:	31 f0       	breq	.+12     	; 0x5716 <GetClient+0x162>
	{
		SendCommand(ATM_EndTransmission);
    570a:	82 e4       	ldi	r24, 0x42	; 66
    570c:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    5710:	fd 81       	ldd	r31, Y+5	; 0x05
    5712:	f9 87       	std	Y+9, r31	; 0x09
    5714:	20 c0       	rjmp	.+64     	; 0x5756 <GetClient+0x1a2>
	}
	SendCommand(ATM_EndTransmission);
    5716:	82 e4       	ldi	r24, 0x42	; 66
    5718:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    571c:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5720:	89 34       	cpi	r24, 0x49	; 73
    5722:	19 f0       	breq	.+6      	; 0x572a <GetClient+0x176>
	{
		return ReturnValue;
    5724:	8d 81       	ldd	r24, Y+5	; 0x05
    5726:	89 87       	std	Y+9, r24	; 0x09
    5728:	16 c0       	rjmp	.+44     	; 0x5756 <GetClient+0x1a2>
	}
	client -> ID[0] = (id/10) + '0';
    572a:	88 85       	ldd	r24, Y+8	; 0x08
    572c:	9a e0       	ldi	r25, 0x0A	; 10
    572e:	69 2f       	mov	r22, r25
    5730:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__udivmodqi4>
    5734:	80 5d       	subi	r24, 0xD0	; 208
    5736:	ee 81       	ldd	r30, Y+6	; 0x06
    5738:	ff 81       	ldd	r31, Y+7	; 0x07
    573a:	85 87       	std	Z+13, r24	; 0x0d
	client -> ID[1] = (id%10) + '0';
    573c:	88 85       	ldd	r24, Y+8	; 0x08
    573e:	9a e0       	ldi	r25, 0x0A	; 10
    5740:	69 2f       	mov	r22, r25
    5742:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__udivmodqi4>
    5746:	89 2f       	mov	r24, r25
    5748:	80 5d       	subi	r24, 0xD0	; 208
    574a:	ee 81       	ldd	r30, Y+6	; 0x06
    574c:	ff 81       	ldd	r31, Y+7	; 0x07
    574e:	86 87       	std	Z+14, r24	; 0x0e
	ReturnValue = E_OK;
    5750:	1d 82       	std	Y+5, r1	; 0x05
	return ReturnValue;
    5752:	ed 81       	ldd	r30, Y+5	; 0x05
    5754:	e9 87       	std	Y+9, r30	; 0x09
    5756:	89 85       	ldd	r24, Y+9	; 0x09
}
    5758:	29 96       	adiw	r28, 0x09	; 9
    575a:	0f b6       	in	r0, 0x3f	; 63
    575c:	f8 94       	cli
    575e:	de bf       	out	0x3e, r29	; 62
    5760:	0f be       	out	0x3f, r0	; 63
    5762:	cd bf       	out	0x3d, r28	; 61
    5764:	cf 91       	pop	r28
    5766:	df 91       	pop	r29
    5768:	1f 91       	pop	r17
    576a:	0f 91       	pop	r16
    576c:	08 95       	ret

0000576e <SendClient>:

static Std_ReturnType SendClient(CLIENT_PROFILE* client)
{
    576e:	df 93       	push	r29
    5770:	cf 93       	push	r28
    5772:	cd b7       	in	r28, 0x3d	; 61
    5774:	de b7       	in	r29, 0x3e	; 62
    5776:	27 97       	sbiw	r28, 0x07	; 7
    5778:	0f b6       	in	r0, 0x3f	; 63
    577a:	f8 94       	cli
    577c:	de bf       	out	0x3e, r29	; 62
    577e:	0f be       	out	0x3f, r0	; 63
    5780:	cd bf       	out	0x3d, r28	; 61
    5782:	9e 83       	std	Y+6, r25	; 0x06
    5784:	8d 83       	std	Y+5, r24	; 0x05
	Std_ReturnType ReturnValue = E_NOT_OK;
    5786:	81 e0       	ldi	r24, 0x01	; 1
    5788:	8c 83       	std	Y+4, r24	; 0x04
	uint8* PTR = (uint8*)client;
    578a:	8d 81       	ldd	r24, Y+5	; 0x05
    578c:	9e 81       	ldd	r25, Y+6	; 0x06
    578e:	9b 83       	std	Y+3, r25	; 0x03
    5790:	8a 83       	std	Y+2, r24	; 0x02
	SendCommand(ATM_TriggerTransmission);
    5792:	81 e4       	ldi	r24, 0x41	; 65
    5794:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    5798:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    579c:	8a 34       	cpi	r24, 0x4A	; 74
    579e:	31 f0       	breq	.+12     	; 0x57ac <SendClient+0x3e>
	{
		SendCommand(ATM_EndTransmission);
    57a0:	82 e4       	ldi	r24, 0x42	; 66
    57a2:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    57a6:	8c 81       	ldd	r24, Y+4	; 0x04
    57a8:	8f 83       	std	Y+7, r24	; 0x07
    57aa:	3a c0       	rjmp	.+116    	; 0x5820 <SendClient+0xb2>
	}
	SendCommand(ATM_WriteClient);
    57ac:	83 e4       	ldi	r24, 0x43	; 67
    57ae:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
    57b2:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    57b6:	8a 34       	cpi	r24, 0x4A	; 74
    57b8:	31 f0       	breq	.+12     	; 0x57c6 <SendClient+0x58>
	{
		SendCommand(ATM_EndTransmission);
    57ba:	82 e4       	ldi	r24, 0x42	; 66
    57bc:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    57c0:	8c 81       	ldd	r24, Y+4	; 0x04
    57c2:	8f 83       	std	Y+7, r24	; 0x07
    57c4:	2d c0       	rjmp	.+90     	; 0x5820 <SendClient+0xb2>
	}
	for(uint8 count = 0; count < ClientSize; count++)
    57c6:	19 82       	std	Y+1, r1	; 0x01
    57c8:	0e c0       	rjmp	.+28     	; 0x57e6 <SendClient+0x78>
	{
		SendByte(PTR[count]);
    57ca:	89 81       	ldd	r24, Y+1	; 0x01
    57cc:	28 2f       	mov	r18, r24
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	8a 81       	ldd	r24, Y+2	; 0x02
    57d2:	9b 81       	ldd	r25, Y+3	; 0x03
    57d4:	fc 01       	movw	r30, r24
    57d6:	e2 0f       	add	r30, r18
    57d8:	f3 1f       	adc	r31, r19
    57da:	80 81       	ld	r24, Z
    57dc:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Ready)
	{
		SendCommand(ATM_EndTransmission);
		return ReturnValue;
	}
	for(uint8 count = 0; count < ClientSize; count++)
    57e0:	89 81       	ldd	r24, Y+1	; 0x01
    57e2:	8f 5f       	subi	r24, 0xFF	; 255
    57e4:	89 83       	std	Y+1, r24	; 0x01
    57e6:	89 81       	ldd	r24, Y+1	; 0x01
    57e8:	80 31       	cpi	r24, 0x10	; 16
    57ea:	78 f3       	brcs	.-34     	; 0x57ca <SendClient+0x5c>
	{
		SendByte(PTR[count]);
	}
	SendCommand(ATM_FrameEnd);
    57ec:	87 e4       	ldi	r24, 0x47	; 71
    57ee:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    57f2:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    57f6:	89 34       	cpi	r24, 0x49	; 73
    57f8:	31 f0       	breq	.+12     	; 0x5806 <SendClient+0x98>
	{
		SendCommand(ATM_EndTransmission);
    57fa:	82 e4       	ldi	r24, 0x42	; 66
    57fc:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
		return ReturnValue;
    5800:	8c 81       	ldd	r24, Y+4	; 0x04
    5802:	8f 83       	std	Y+7, r24	; 0x07
    5804:	0d c0       	rjmp	.+26     	; 0x5820 <SendClient+0xb2>
	}
	SendCommand(ATM_EndTransmission);
    5806:	82 e4       	ldi	r24, 0x42	; 66
    5808:	0e 94 06 3a 	call	0x740c	; 0x740c <UART_sendByte>
	if(GetCommand() != Server_Success)
    580c:	0e 94 1d 3a 	call	0x743a	; 0x743a <UART_recieveByte>
    5810:	89 34       	cpi	r24, 0x49	; 73
    5812:	19 f0       	breq	.+6      	; 0x581a <SendClient+0xac>
	{
		return ReturnValue;
    5814:	8c 81       	ldd	r24, Y+4	; 0x04
    5816:	8f 83       	std	Y+7, r24	; 0x07
    5818:	03 c0       	rjmp	.+6      	; 0x5820 <SendClient+0xb2>
	}
	ReturnValue = E_OK;
    581a:	1c 82       	std	Y+4, r1	; 0x04
	return ReturnValue;
    581c:	8c 81       	ldd	r24, Y+4	; 0x04
    581e:	8f 83       	std	Y+7, r24	; 0x07
    5820:	8f 81       	ldd	r24, Y+7	; 0x07
}
    5822:	27 96       	adiw	r28, 0x07	; 7
    5824:	0f b6       	in	r0, 0x3f	; 63
    5826:	f8 94       	cli
    5828:	de bf       	out	0x3e, r29	; 62
    582a:	0f be       	out	0x3f, r0	; 63
    582c:	cd bf       	out	0x3d, r28	; 61
    582e:	cf 91       	pop	r28
    5830:	df 91       	pop	r29
    5832:	08 95       	ret

00005834 <string_length>:

static uint8 string_length(sint8 str[])
{
    5834:	df 93       	push	r29
    5836:	cf 93       	push	r28
    5838:	00 d0       	rcall	.+0      	; 0x583a <string_length+0x6>
    583a:	0f 92       	push	r0
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
    5840:	9b 83       	std	Y+3, r25	; 0x03
    5842:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;
	/* count the string start from element 0 until the element before the NULL terminator */
	for(count = 0; str[count] != '\0'; ++count);
    5844:	19 82       	std	Y+1, r1	; 0x01
    5846:	03 c0       	rjmp	.+6      	; 0x584e <string_length+0x1a>
    5848:	89 81       	ldd	r24, Y+1	; 0x01
    584a:	8f 5f       	subi	r24, 0xFF	; 255
    584c:	89 83       	std	Y+1, r24	; 0x01
    584e:	89 81       	ldd	r24, Y+1	; 0x01
    5850:	28 2f       	mov	r18, r24
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	8a 81       	ldd	r24, Y+2	; 0x02
    5856:	9b 81       	ldd	r25, Y+3	; 0x03
    5858:	fc 01       	movw	r30, r24
    585a:	e2 0f       	add	r30, r18
    585c:	f3 1f       	adc	r31, r19
    585e:	80 81       	ld	r24, Z
    5860:	88 23       	and	r24, r24
    5862:	91 f7       	brne	.-28     	; 0x5848 <string_length+0x14>
	return count;
    5864:	89 81       	ldd	r24, Y+1	; 0x01
}
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	cf 91       	pop	r28
    586e:	df 91       	pop	r29
    5870:	08 95       	ret

00005872 <Strings_Is_Equal>:

static uint8 Strings_Is_Equal(sint8 Str1[], sint8 Str2[]){
    5872:	df 93       	push	r29
    5874:	cf 93       	push	r28
    5876:	cd b7       	in	r28, 0x3d	; 61
    5878:	de b7       	in	r29, 0x3e	; 62
    587a:	28 97       	sbiw	r28, 0x08	; 8
    587c:	0f b6       	in	r0, 0x3f	; 63
    587e:	f8 94       	cli
    5880:	de bf       	out	0x3e, r29	; 62
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	9d 83       	std	Y+5, r25	; 0x05
    5888:	8c 83       	std	Y+4, r24	; 0x04
    588a:	7f 83       	std	Y+7, r23	; 0x07
    588c:	6e 83       	std	Y+6, r22	; 0x06
	uint8 count = 0;
    588e:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Str1_length = string_length(Str1);
    5890:	8c 81       	ldd	r24, Y+4	; 0x04
    5892:	9d 81       	ldd	r25, Y+5	; 0x05
    5894:	0e 94 1a 2c 	call	0x5834	; 0x5834 <string_length>
    5898:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Str2_length = string_length(Str2);
    589a:	8e 81       	ldd	r24, Y+6	; 0x06
    589c:	9f 81       	ldd	r25, Y+7	; 0x07
    589e:	0e 94 1a 2c 	call	0x5834	; 0x5834 <string_length>
    58a2:	89 83       	std	Y+1, r24	; 0x01
	if(Str1_length == Str2_length){
    58a4:	9a 81       	ldd	r25, Y+2	; 0x02
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	98 17       	cp	r25, r24
    58aa:	09 f5       	brne	.+66     	; 0x58ee <Strings_Is_Equal+0x7c>
    58ac:	19 c0       	rjmp	.+50     	; 0x58e0 <Strings_Is_Equal+0x6e>
		while(count < Str1_length){
			if(Str1[count] != Str2[count]){
    58ae:	8b 81       	ldd	r24, Y+3	; 0x03
    58b0:	28 2f       	mov	r18, r24
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	8c 81       	ldd	r24, Y+4	; 0x04
    58b6:	9d 81       	ldd	r25, Y+5	; 0x05
    58b8:	fc 01       	movw	r30, r24
    58ba:	e2 0f       	add	r30, r18
    58bc:	f3 1f       	adc	r31, r19
    58be:	40 81       	ld	r20, Z
    58c0:	8b 81       	ldd	r24, Y+3	; 0x03
    58c2:	28 2f       	mov	r18, r24
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	8e 81       	ldd	r24, Y+6	; 0x06
    58c8:	9f 81       	ldd	r25, Y+7	; 0x07
    58ca:	fc 01       	movw	r30, r24
    58cc:	e2 0f       	add	r30, r18
    58ce:	f3 1f       	adc	r31, r19
    58d0:	80 81       	ld	r24, Z
    58d2:	48 17       	cp	r20, r24
    58d4:	11 f0       	breq	.+4      	; 0x58da <Strings_Is_Equal+0x68>
				return FALSE;
    58d6:	18 86       	std	Y+8, r1	; 0x08
    58d8:	0b c0       	rjmp	.+22     	; 0x58f0 <Strings_Is_Equal+0x7e>
			}
			count++;
    58da:	8b 81       	ldd	r24, Y+3	; 0x03
    58dc:	8f 5f       	subi	r24, 0xFF	; 255
    58de:	8b 83       	std	Y+3, r24	; 0x03
static uint8 Strings_Is_Equal(sint8 Str1[], sint8 Str2[]){
	uint8 count = 0;
	uint8 Str1_length = string_length(Str1);
	uint8 Str2_length = string_length(Str2);
	if(Str1_length == Str2_length){
		while(count < Str1_length){
    58e0:	9b 81       	ldd	r25, Y+3	; 0x03
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	98 17       	cp	r25, r24
    58e6:	18 f3       	brcs	.-58     	; 0x58ae <Strings_Is_Equal+0x3c>
			if(Str1[count] != Str2[count]){
				return FALSE;
			}
			count++;
		}
		return TRUE;
    58e8:	81 e0       	ldi	r24, 0x01	; 1
    58ea:	88 87       	std	Y+8, r24	; 0x08
    58ec:	01 c0       	rjmp	.+2      	; 0x58f0 <Strings_Is_Equal+0x7e>
	}
	else{
		return FALSE;
    58ee:	18 86       	std	Y+8, r1	; 0x08
    58f0:	88 85       	ldd	r24, Y+8	; 0x08
	}
}
    58f2:	28 96       	adiw	r28, 0x08	; 8
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	f8 94       	cli
    58f8:	de bf       	out	0x3e, r29	; 62
    58fa:	0f be       	out	0x3f, r0	; 63
    58fc:	cd bf       	out	0x3d, r28	; 61
    58fe:	cf 91       	pop	r28
    5900:	df 91       	pop	r29
    5902:	08 95       	ret

00005904 <DIO_DefinePinsDirections>:

#include"DIO.h"


void DIO_DefinePinsDirections(void)
{
    5904:	df 93       	push	r29
    5906:	cf 93       	push	r28
    5908:	cd b7       	in	r28, 0x3d	; 61
    590a:	de b7       	in	r29, 0x3e	; 62
	PORTA_direction = CONC(PA0_Direction, PA1_Direction, PA2_Direction, PA3_Direction, PA4_Direction, PA5_Direction, PA6_Direction, PA7_Direction);
    590c:	ea e3       	ldi	r30, 0x3A	; 58
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	8f ef       	ldi	r24, 0xFF	; 255
    5912:	80 83       	st	Z, r24
	PORTB_direction = CONC(PB0_Direction, PB1_Direction, PB2_Direction, PB3_Direction, PB4_Direction, PB5_Direction, PB6_Direction, PB7_Direction);
    5914:	e7 e3       	ldi	r30, 0x37	; 55
    5916:	f0 e0       	ldi	r31, 0x00	; 0
    5918:	10 82       	st	Z, r1
	PORTC_direction = CONC(PC0_Direction, PC1_Direction, PC2_Direction, PC3_Direction, PC4_Direction, PC5_Direction, PC6_Direction, PC7_Direction);
    591a:	e4 e3       	ldi	r30, 0x34	; 52
    591c:	f0 e0       	ldi	r31, 0x00	; 0
    591e:	8f ef       	ldi	r24, 0xFF	; 255
    5920:	80 83       	st	Z, r24
	PORTD_direction = CONC(PD0_Direction, PD1_Direction, PD2_Direction, PD3_Direction, PD4_Direction, PD5_Direction, PD6_Direction, PD7_Direction);
    5922:	e1 e3       	ldi	r30, 0x31	; 49
    5924:	f0 e0       	ldi	r31, 0x00	; 0
    5926:	8f ef       	ldi	r24, 0xFF	; 255
    5928:	80 83       	st	Z, r24
}
    592a:	cf 91       	pop	r28
    592c:	df 91       	pop	r29
    592e:	08 95       	ret

00005930 <DIO_ReadChannel>:

uint8 DIO_ReadChannel(volatile const uint8 a_PIN){
    5930:	df 93       	push	r29
    5932:	cf 93       	push	r28
    5934:	00 d0       	rcall	.+0      	; 0x5936 <DIO_ReadChannel+0x6>
    5936:	cd b7       	in	r28, 0x3d	; 61
    5938:	de b7       	in	r29, 0x3e	; 62
    593a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_Data = 0;
    593c:	19 82       	std	Y+1, r1	; 0x01
	if(a_PIN/8 == 0){
    593e:	8a 81       	ldd	r24, Y+2	; 0x02
    5940:	88 30       	cpi	r24, 0x08	; 8
    5942:	f8 f4       	brcc	.+62     	; 0x5982 <DIO_ReadChannel+0x52>
		a_Data = (PORTA_input & (1 << a_PIN));
    5944:	e9 e3       	ldi	r30, 0x39	; 57
    5946:	f0 e0       	ldi	r31, 0x00	; 0
    5948:	80 81       	ld	r24, Z
    594a:	48 2f       	mov	r20, r24
    594c:	8a 81       	ldd	r24, Y+2	; 0x02
    594e:	28 2f       	mov	r18, r24
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	02 c0       	rjmp	.+4      	; 0x595c <DIO_ReadChannel+0x2c>
    5958:	88 0f       	add	r24, r24
    595a:	99 1f       	adc	r25, r25
    595c:	2a 95       	dec	r18
    595e:	e2 f7       	brpl	.-8      	; 0x5958 <DIO_ReadChannel+0x28>
    5960:	84 23       	and	r24, r20
    5962:	89 83       	std	Y+1, r24	; 0x01
		a_Data = a_Data >> a_PIN;
    5964:	89 81       	ldd	r24, Y+1	; 0x01
    5966:	28 2f       	mov	r18, r24
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	8a 81       	ldd	r24, Y+2	; 0x02
    596c:	88 2f       	mov	r24, r24
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	a9 01       	movw	r20, r18
    5972:	02 c0       	rjmp	.+4      	; 0x5978 <DIO_ReadChannel+0x48>
    5974:	55 95       	asr	r21
    5976:	47 95       	ror	r20
    5978:	8a 95       	dec	r24
    597a:	e2 f7       	brpl	.-8      	; 0x5974 <DIO_ReadChannel+0x44>
    597c:	ca 01       	movw	r24, r20
    597e:	89 83       	std	Y+1, r24	; 0x01
    5980:	6d c0       	rjmp	.+218    	; 0x5a5c <DIO_ReadChannel+0x12c>
	}
	else if(a_PIN/8 == 1)
    5982:	8a 81       	ldd	r24, Y+2	; 0x02
    5984:	88 50       	subi	r24, 0x08	; 8
    5986:	88 30       	cpi	r24, 0x08	; 8
    5988:	10 f5       	brcc	.+68     	; 0x59ce <DIO_ReadChannel+0x9e>
		a_Data = ((PORTB_input&(1 << (a_PIN-8))) >> (a_PIN-8));
    598a:	e6 e3       	ldi	r30, 0x36	; 54
    598c:	f0 e0       	ldi	r31, 0x00	; 0
    598e:	80 81       	ld	r24, Z
    5990:	48 2f       	mov	r20, r24
    5992:	50 e0       	ldi	r21, 0x00	; 0
    5994:	8a 81       	ldd	r24, Y+2	; 0x02
    5996:	88 2f       	mov	r24, r24
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	9c 01       	movw	r18, r24
    599c:	28 50       	subi	r18, 0x08	; 8
    599e:	30 40       	sbci	r19, 0x00	; 0
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	02 c0       	rjmp	.+4      	; 0x59aa <DIO_ReadChannel+0x7a>
    59a6:	88 0f       	add	r24, r24
    59a8:	99 1f       	adc	r25, r25
    59aa:	2a 95       	dec	r18
    59ac:	e2 f7       	brpl	.-8      	; 0x59a6 <DIO_ReadChannel+0x76>
    59ae:	9a 01       	movw	r18, r20
    59b0:	28 23       	and	r18, r24
    59b2:	39 23       	and	r19, r25
    59b4:	8a 81       	ldd	r24, Y+2	; 0x02
    59b6:	88 2f       	mov	r24, r24
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	08 97       	sbiw	r24, 0x08	; 8
    59bc:	a9 01       	movw	r20, r18
    59be:	02 c0       	rjmp	.+4      	; 0x59c4 <DIO_ReadChannel+0x94>
    59c0:	55 95       	asr	r21
    59c2:	47 95       	ror	r20
    59c4:	8a 95       	dec	r24
    59c6:	e2 f7       	brpl	.-8      	; 0x59c0 <DIO_ReadChannel+0x90>
    59c8:	ca 01       	movw	r24, r20
    59ca:	89 83       	std	Y+1, r24	; 0x01
    59cc:	47 c0       	rjmp	.+142    	; 0x5a5c <DIO_ReadChannel+0x12c>
	else if(a_PIN/8 == 2)
    59ce:	8a 81       	ldd	r24, Y+2	; 0x02
    59d0:	80 51       	subi	r24, 0x10	; 16
    59d2:	88 30       	cpi	r24, 0x08	; 8
    59d4:	10 f5       	brcc	.+68     	; 0x5a1a <DIO_ReadChannel+0xea>
		a_Data = ((PORTC_input&(1 << (a_PIN-16))) >> (a_PIN-16));
    59d6:	e3 e3       	ldi	r30, 0x33	; 51
    59d8:	f0 e0       	ldi	r31, 0x00	; 0
    59da:	80 81       	ld	r24, Z
    59dc:	48 2f       	mov	r20, r24
    59de:	50 e0       	ldi	r21, 0x00	; 0
    59e0:	8a 81       	ldd	r24, Y+2	; 0x02
    59e2:	88 2f       	mov	r24, r24
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	9c 01       	movw	r18, r24
    59e8:	20 51       	subi	r18, 0x10	; 16
    59ea:	30 40       	sbci	r19, 0x00	; 0
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	02 c0       	rjmp	.+4      	; 0x59f6 <DIO_ReadChannel+0xc6>
    59f2:	88 0f       	add	r24, r24
    59f4:	99 1f       	adc	r25, r25
    59f6:	2a 95       	dec	r18
    59f8:	e2 f7       	brpl	.-8      	; 0x59f2 <DIO_ReadChannel+0xc2>
    59fa:	9a 01       	movw	r18, r20
    59fc:	28 23       	and	r18, r24
    59fe:	39 23       	and	r19, r25
    5a00:	8a 81       	ldd	r24, Y+2	; 0x02
    5a02:	88 2f       	mov	r24, r24
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	40 97       	sbiw	r24, 0x10	; 16
    5a08:	a9 01       	movw	r20, r18
    5a0a:	02 c0       	rjmp	.+4      	; 0x5a10 <DIO_ReadChannel+0xe0>
    5a0c:	55 95       	asr	r21
    5a0e:	47 95       	ror	r20
    5a10:	8a 95       	dec	r24
    5a12:	e2 f7       	brpl	.-8      	; 0x5a0c <DIO_ReadChannel+0xdc>
    5a14:	ca 01       	movw	r24, r20
    5a16:	89 83       	std	Y+1, r24	; 0x01
    5a18:	21 c0       	rjmp	.+66     	; 0x5a5c <DIO_ReadChannel+0x12c>
	else
		a_Data = ((PORTD_input&(1 << (a_PIN-24))) >> (a_PIN-24));
    5a1a:	e0 e3       	ldi	r30, 0x30	; 48
    5a1c:	f0 e0       	ldi	r31, 0x00	; 0
    5a1e:	80 81       	ld	r24, Z
    5a20:	48 2f       	mov	r20, r24
    5a22:	50 e0       	ldi	r21, 0x00	; 0
    5a24:	8a 81       	ldd	r24, Y+2	; 0x02
    5a26:	88 2f       	mov	r24, r24
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	9c 01       	movw	r18, r24
    5a2c:	28 51       	subi	r18, 0x18	; 24
    5a2e:	30 40       	sbci	r19, 0x00	; 0
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	02 c0       	rjmp	.+4      	; 0x5a3a <DIO_ReadChannel+0x10a>
    5a36:	88 0f       	add	r24, r24
    5a38:	99 1f       	adc	r25, r25
    5a3a:	2a 95       	dec	r18
    5a3c:	e2 f7       	brpl	.-8      	; 0x5a36 <DIO_ReadChannel+0x106>
    5a3e:	9a 01       	movw	r18, r20
    5a40:	28 23       	and	r18, r24
    5a42:	39 23       	and	r19, r25
    5a44:	8a 81       	ldd	r24, Y+2	; 0x02
    5a46:	88 2f       	mov	r24, r24
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	48 97       	sbiw	r24, 0x18	; 24
    5a4c:	a9 01       	movw	r20, r18
    5a4e:	02 c0       	rjmp	.+4      	; 0x5a54 <DIO_ReadChannel+0x124>
    5a50:	55 95       	asr	r21
    5a52:	47 95       	ror	r20
    5a54:	8a 95       	dec	r24
    5a56:	e2 f7       	brpl	.-8      	; 0x5a50 <DIO_ReadChannel+0x120>
    5a58:	ca 01       	movw	r24, r20
    5a5a:	89 83       	std	Y+1, r24	; 0x01

	return a_Data;
    5a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a5e:	0f 90       	pop	r0
    5a60:	0f 90       	pop	r0
    5a62:	cf 91       	pop	r28
    5a64:	df 91       	pop	r29
    5a66:	08 95       	ret

00005a68 <DIO_WriteChannel>:

void DIO_WriteChannel(volatile const uint8 a_PIN){
    5a68:	df 93       	push	r29
    5a6a:	cf 93       	push	r28
    5a6c:	0f 92       	push	r0
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0){
    5a74:	89 81       	ldd	r24, Y+1	; 0x01
    5a76:	88 30       	cpi	r24, 0x08	; 8
    5a78:	a0 f4       	brcc	.+40     	; 0x5aa2 <DIO_WriteChannel+0x3a>
		PORTA_output |= (1<<a_PIN);
    5a7a:	ab e3       	ldi	r26, 0x3B	; 59
    5a7c:	b0 e0       	ldi	r27, 0x00	; 0
    5a7e:	eb e3       	ldi	r30, 0x3B	; 59
    5a80:	f0 e0       	ldi	r31, 0x00	; 0
    5a82:	80 81       	ld	r24, Z
    5a84:	48 2f       	mov	r20, r24
    5a86:	89 81       	ldd	r24, Y+1	; 0x01
    5a88:	28 2f       	mov	r18, r24
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	02 2e       	mov	r0, r18
    5a92:	02 c0       	rjmp	.+4      	; 0x5a98 <DIO_WriteChannel+0x30>
    5a94:	88 0f       	add	r24, r24
    5a96:	99 1f       	adc	r25, r25
    5a98:	0a 94       	dec	r0
    5a9a:	e2 f7       	brpl	.-8      	; 0x5a94 <DIO_WriteChannel+0x2c>
    5a9c:	84 2b       	or	r24, r20
    5a9e:	8c 93       	st	X, r24
    5aa0:	4c c0       	rjmp	.+152    	; 0x5b3a <DIO_WriteChannel+0xd2>
	}
	else if(a_PIN/8 == 1){
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	88 50       	subi	r24, 0x08	; 8
    5aa6:	88 30       	cpi	r24, 0x08	; 8
    5aa8:	b8 f4       	brcc	.+46     	; 0x5ad8 <DIO_WriteChannel+0x70>
		PORTB_output |= (1<<(a_PIN-8));
    5aaa:	a8 e3       	ldi	r26, 0x38	; 56
    5aac:	b0 e0       	ldi	r27, 0x00	; 0
    5aae:	e8 e3       	ldi	r30, 0x38	; 56
    5ab0:	f0 e0       	ldi	r31, 0x00	; 0
    5ab2:	80 81       	ld	r24, Z
    5ab4:	48 2f       	mov	r20, r24
    5ab6:	89 81       	ldd	r24, Y+1	; 0x01
    5ab8:	88 2f       	mov	r24, r24
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	9c 01       	movw	r18, r24
    5abe:	28 50       	subi	r18, 0x08	; 8
    5ac0:	30 40       	sbci	r19, 0x00	; 0
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	02 2e       	mov	r0, r18
    5ac8:	02 c0       	rjmp	.+4      	; 0x5ace <DIO_WriteChannel+0x66>
    5aca:	88 0f       	add	r24, r24
    5acc:	99 1f       	adc	r25, r25
    5ace:	0a 94       	dec	r0
    5ad0:	e2 f7       	brpl	.-8      	; 0x5aca <DIO_WriteChannel+0x62>
    5ad2:	84 2b       	or	r24, r20
    5ad4:	8c 93       	st	X, r24
    5ad6:	31 c0       	rjmp	.+98     	; 0x5b3a <DIO_WriteChannel+0xd2>
	}
	else if(a_PIN/8 == 2){
    5ad8:	89 81       	ldd	r24, Y+1	; 0x01
    5ada:	80 51       	subi	r24, 0x10	; 16
    5adc:	88 30       	cpi	r24, 0x08	; 8
    5ade:	b8 f4       	brcc	.+46     	; 0x5b0e <DIO_WriteChannel+0xa6>
		PORTC_output |= (1<<(a_PIN-16));
    5ae0:	a5 e3       	ldi	r26, 0x35	; 53
    5ae2:	b0 e0       	ldi	r27, 0x00	; 0
    5ae4:	e5 e3       	ldi	r30, 0x35	; 53
    5ae6:	f0 e0       	ldi	r31, 0x00	; 0
    5ae8:	80 81       	ld	r24, Z
    5aea:	48 2f       	mov	r20, r24
    5aec:	89 81       	ldd	r24, Y+1	; 0x01
    5aee:	88 2f       	mov	r24, r24
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	9c 01       	movw	r18, r24
    5af4:	20 51       	subi	r18, 0x10	; 16
    5af6:	30 40       	sbci	r19, 0x00	; 0
    5af8:	81 e0       	ldi	r24, 0x01	; 1
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	02 2e       	mov	r0, r18
    5afe:	02 c0       	rjmp	.+4      	; 0x5b04 <DIO_WriteChannel+0x9c>
    5b00:	88 0f       	add	r24, r24
    5b02:	99 1f       	adc	r25, r25
    5b04:	0a 94       	dec	r0
    5b06:	e2 f7       	brpl	.-8      	; 0x5b00 <DIO_WriteChannel+0x98>
    5b08:	84 2b       	or	r24, r20
    5b0a:	8c 93       	st	X, r24
    5b0c:	16 c0       	rjmp	.+44     	; 0x5b3a <DIO_WriteChannel+0xd2>
	}
	else{
		PORTD_output |= (1<<(a_PIN-24));
    5b0e:	a2 e3       	ldi	r26, 0x32	; 50
    5b10:	b0 e0       	ldi	r27, 0x00	; 0
    5b12:	e2 e3       	ldi	r30, 0x32	; 50
    5b14:	f0 e0       	ldi	r31, 0x00	; 0
    5b16:	80 81       	ld	r24, Z
    5b18:	48 2f       	mov	r20, r24
    5b1a:	89 81       	ldd	r24, Y+1	; 0x01
    5b1c:	88 2f       	mov	r24, r24
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	9c 01       	movw	r18, r24
    5b22:	28 51       	subi	r18, 0x18	; 24
    5b24:	30 40       	sbci	r19, 0x00	; 0
    5b26:	81 e0       	ldi	r24, 0x01	; 1
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	02 2e       	mov	r0, r18
    5b2c:	02 c0       	rjmp	.+4      	; 0x5b32 <DIO_WriteChannel+0xca>
    5b2e:	88 0f       	add	r24, r24
    5b30:	99 1f       	adc	r25, r25
    5b32:	0a 94       	dec	r0
    5b34:	e2 f7       	brpl	.-8      	; 0x5b2e <DIO_WriteChannel+0xc6>
    5b36:	84 2b       	or	r24, r20
    5b38:	8c 93       	st	X, r24
	}
}
    5b3a:	0f 90       	pop	r0
    5b3c:	cf 91       	pop	r28
    5b3e:	df 91       	pop	r29
    5b40:	08 95       	ret

00005b42 <DIO_ClearChannel>:

void DIO_ClearChannel(volatile const uint8 a_PIN){
    5b42:	df 93       	push	r29
    5b44:	cf 93       	push	r28
    5b46:	0f 92       	push	r0
    5b48:	cd b7       	in	r28, 0x3d	; 61
    5b4a:	de b7       	in	r29, 0x3e	; 62
    5b4c:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    5b4e:	89 81       	ldd	r24, Y+1	; 0x01
    5b50:	88 30       	cpi	r24, 0x08	; 8
    5b52:	a8 f4       	brcc	.+42     	; 0x5b7e <DIO_ClearChannel+0x3c>
		PORTA_output &= ~(1 << a_PIN);
    5b54:	ab e3       	ldi	r26, 0x3B	; 59
    5b56:	b0 e0       	ldi	r27, 0x00	; 0
    5b58:	eb e3       	ldi	r30, 0x3B	; 59
    5b5a:	f0 e0       	ldi	r31, 0x00	; 0
    5b5c:	80 81       	ld	r24, Z
    5b5e:	48 2f       	mov	r20, r24
    5b60:	89 81       	ldd	r24, Y+1	; 0x01
    5b62:	28 2f       	mov	r18, r24
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	81 e0       	ldi	r24, 0x01	; 1
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	02 2e       	mov	r0, r18
    5b6c:	02 c0       	rjmp	.+4      	; 0x5b72 <DIO_ClearChannel+0x30>
    5b6e:	88 0f       	add	r24, r24
    5b70:	99 1f       	adc	r25, r25
    5b72:	0a 94       	dec	r0
    5b74:	e2 f7       	brpl	.-8      	; 0x5b6e <DIO_ClearChannel+0x2c>
    5b76:	80 95       	com	r24
    5b78:	84 23       	and	r24, r20
    5b7a:	8c 93       	st	X, r24
    5b7c:	4f c0       	rjmp	.+158    	; 0x5c1c <DIO_ClearChannel+0xda>
	else if(a_PIN/8 == 1)
    5b7e:	89 81       	ldd	r24, Y+1	; 0x01
    5b80:	88 50       	subi	r24, 0x08	; 8
    5b82:	88 30       	cpi	r24, 0x08	; 8
    5b84:	c0 f4       	brcc	.+48     	; 0x5bb6 <DIO_ClearChannel+0x74>
		PORTB_output &= ~(1 << (a_PIN - 8));
    5b86:	a8 e3       	ldi	r26, 0x38	; 56
    5b88:	b0 e0       	ldi	r27, 0x00	; 0
    5b8a:	e8 e3       	ldi	r30, 0x38	; 56
    5b8c:	f0 e0       	ldi	r31, 0x00	; 0
    5b8e:	80 81       	ld	r24, Z
    5b90:	48 2f       	mov	r20, r24
    5b92:	89 81       	ldd	r24, Y+1	; 0x01
    5b94:	88 2f       	mov	r24, r24
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	9c 01       	movw	r18, r24
    5b9a:	28 50       	subi	r18, 0x08	; 8
    5b9c:	30 40       	sbci	r19, 0x00	; 0
    5b9e:	81 e0       	ldi	r24, 0x01	; 1
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	02 2e       	mov	r0, r18
    5ba4:	02 c0       	rjmp	.+4      	; 0x5baa <DIO_ClearChannel+0x68>
    5ba6:	88 0f       	add	r24, r24
    5ba8:	99 1f       	adc	r25, r25
    5baa:	0a 94       	dec	r0
    5bac:	e2 f7       	brpl	.-8      	; 0x5ba6 <DIO_ClearChannel+0x64>
    5bae:	80 95       	com	r24
    5bb0:	84 23       	and	r24, r20
    5bb2:	8c 93       	st	X, r24
    5bb4:	33 c0       	rjmp	.+102    	; 0x5c1c <DIO_ClearChannel+0xda>
	else if(a_PIN/8 == 2)
    5bb6:	89 81       	ldd	r24, Y+1	; 0x01
    5bb8:	80 51       	subi	r24, 0x10	; 16
    5bba:	88 30       	cpi	r24, 0x08	; 8
    5bbc:	c0 f4       	brcc	.+48     	; 0x5bee <DIO_ClearChannel+0xac>
		PORTC_output &= ~(1 << (a_PIN - 16));
    5bbe:	a5 e3       	ldi	r26, 0x35	; 53
    5bc0:	b0 e0       	ldi	r27, 0x00	; 0
    5bc2:	e5 e3       	ldi	r30, 0x35	; 53
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	80 81       	ld	r24, Z
    5bc8:	48 2f       	mov	r20, r24
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	88 2f       	mov	r24, r24
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	9c 01       	movw	r18, r24
    5bd2:	20 51       	subi	r18, 0x10	; 16
    5bd4:	30 40       	sbci	r19, 0x00	; 0
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	02 2e       	mov	r0, r18
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <DIO_ClearChannel+0xa0>
    5bde:	88 0f       	add	r24, r24
    5be0:	99 1f       	adc	r25, r25
    5be2:	0a 94       	dec	r0
    5be4:	e2 f7       	brpl	.-8      	; 0x5bde <DIO_ClearChannel+0x9c>
    5be6:	80 95       	com	r24
    5be8:	84 23       	and	r24, r20
    5bea:	8c 93       	st	X, r24
    5bec:	17 c0       	rjmp	.+46     	; 0x5c1c <DIO_ClearChannel+0xda>
	else
		PORTD_output &= ~(1 << (a_PIN - 24));
    5bee:	a2 e3       	ldi	r26, 0x32	; 50
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	e2 e3       	ldi	r30, 0x32	; 50
    5bf4:	f0 e0       	ldi	r31, 0x00	; 0
    5bf6:	80 81       	ld	r24, Z
    5bf8:	48 2f       	mov	r20, r24
    5bfa:	89 81       	ldd	r24, Y+1	; 0x01
    5bfc:	88 2f       	mov	r24, r24
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	9c 01       	movw	r18, r24
    5c02:	28 51       	subi	r18, 0x18	; 24
    5c04:	30 40       	sbci	r19, 0x00	; 0
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	02 2e       	mov	r0, r18
    5c0c:	02 c0       	rjmp	.+4      	; 0x5c12 <DIO_ClearChannel+0xd0>
    5c0e:	88 0f       	add	r24, r24
    5c10:	99 1f       	adc	r25, r25
    5c12:	0a 94       	dec	r0
    5c14:	e2 f7       	brpl	.-8      	; 0x5c0e <DIO_ClearChannel+0xcc>
    5c16:	80 95       	com	r24
    5c18:	84 23       	and	r24, r20
    5c1a:	8c 93       	st	X, r24
}
    5c1c:	0f 90       	pop	r0
    5c1e:	cf 91       	pop	r28
    5c20:	df 91       	pop	r29
    5c22:	08 95       	ret

00005c24 <DIO_MakeInput>:

void DIO_MakeInput(volatile const uint8 a_PIN){
    5c24:	df 93       	push	r29
    5c26:	cf 93       	push	r28
    5c28:	0f 92       	push	r0
    5c2a:	cd b7       	in	r28, 0x3d	; 61
    5c2c:	de b7       	in	r29, 0x3e	; 62
    5c2e:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    5c30:	89 81       	ldd	r24, Y+1	; 0x01
    5c32:	88 30       	cpi	r24, 0x08	; 8
    5c34:	a8 f4       	brcc	.+42     	; 0x5c60 <DIO_MakeInput+0x3c>
		PORTA_direction &= ~(1 << a_PIN);
    5c36:	aa e3       	ldi	r26, 0x3A	; 58
    5c38:	b0 e0       	ldi	r27, 0x00	; 0
    5c3a:	ea e3       	ldi	r30, 0x3A	; 58
    5c3c:	f0 e0       	ldi	r31, 0x00	; 0
    5c3e:	80 81       	ld	r24, Z
    5c40:	48 2f       	mov	r20, r24
    5c42:	89 81       	ldd	r24, Y+1	; 0x01
    5c44:	28 2f       	mov	r18, r24
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	02 2e       	mov	r0, r18
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <DIO_MakeInput+0x30>
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	0a 94       	dec	r0
    5c56:	e2 f7       	brpl	.-8      	; 0x5c50 <DIO_MakeInput+0x2c>
    5c58:	80 95       	com	r24
    5c5a:	84 23       	and	r24, r20
    5c5c:	8c 93       	st	X, r24
    5c5e:	4f c0       	rjmp	.+158    	; 0x5cfe <DIO_MakeInput+0xda>
	else if(a_PIN/8 == 1)
    5c60:	89 81       	ldd	r24, Y+1	; 0x01
    5c62:	88 50       	subi	r24, 0x08	; 8
    5c64:	88 30       	cpi	r24, 0x08	; 8
    5c66:	c0 f4       	brcc	.+48     	; 0x5c98 <DIO_MakeInput+0x74>
		PORTB_direction &= ~(1 << (a_PIN - 8));
    5c68:	a7 e3       	ldi	r26, 0x37	; 55
    5c6a:	b0 e0       	ldi	r27, 0x00	; 0
    5c6c:	e7 e3       	ldi	r30, 0x37	; 55
    5c6e:	f0 e0       	ldi	r31, 0x00	; 0
    5c70:	80 81       	ld	r24, Z
    5c72:	48 2f       	mov	r20, r24
    5c74:	89 81       	ldd	r24, Y+1	; 0x01
    5c76:	88 2f       	mov	r24, r24
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	9c 01       	movw	r18, r24
    5c7c:	28 50       	subi	r18, 0x08	; 8
    5c7e:	30 40       	sbci	r19, 0x00	; 0
    5c80:	81 e0       	ldi	r24, 0x01	; 1
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	02 2e       	mov	r0, r18
    5c86:	02 c0       	rjmp	.+4      	; 0x5c8c <DIO_MakeInput+0x68>
    5c88:	88 0f       	add	r24, r24
    5c8a:	99 1f       	adc	r25, r25
    5c8c:	0a 94       	dec	r0
    5c8e:	e2 f7       	brpl	.-8      	; 0x5c88 <DIO_MakeInput+0x64>
    5c90:	80 95       	com	r24
    5c92:	84 23       	and	r24, r20
    5c94:	8c 93       	st	X, r24
    5c96:	33 c0       	rjmp	.+102    	; 0x5cfe <DIO_MakeInput+0xda>
	else if(a_PIN/8 == 2)
    5c98:	89 81       	ldd	r24, Y+1	; 0x01
    5c9a:	80 51       	subi	r24, 0x10	; 16
    5c9c:	88 30       	cpi	r24, 0x08	; 8
    5c9e:	c0 f4       	brcc	.+48     	; 0x5cd0 <DIO_MakeInput+0xac>
		PORTC_direction &= ~(1 << (a_PIN - 16));
    5ca0:	a4 e3       	ldi	r26, 0x34	; 52
    5ca2:	b0 e0       	ldi	r27, 0x00	; 0
    5ca4:	e4 e3       	ldi	r30, 0x34	; 52
    5ca6:	f0 e0       	ldi	r31, 0x00	; 0
    5ca8:	80 81       	ld	r24, Z
    5caa:	48 2f       	mov	r20, r24
    5cac:	89 81       	ldd	r24, Y+1	; 0x01
    5cae:	88 2f       	mov	r24, r24
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	9c 01       	movw	r18, r24
    5cb4:	20 51       	subi	r18, 0x10	; 16
    5cb6:	30 40       	sbci	r19, 0x00	; 0
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	02 2e       	mov	r0, r18
    5cbe:	02 c0       	rjmp	.+4      	; 0x5cc4 <DIO_MakeInput+0xa0>
    5cc0:	88 0f       	add	r24, r24
    5cc2:	99 1f       	adc	r25, r25
    5cc4:	0a 94       	dec	r0
    5cc6:	e2 f7       	brpl	.-8      	; 0x5cc0 <DIO_MakeInput+0x9c>
    5cc8:	80 95       	com	r24
    5cca:	84 23       	and	r24, r20
    5ccc:	8c 93       	st	X, r24
    5cce:	17 c0       	rjmp	.+46     	; 0x5cfe <DIO_MakeInput+0xda>
	else
		PORTD_direction &= ~(1 << (a_PIN - 24));
    5cd0:	a1 e3       	ldi	r26, 0x31	; 49
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	e1 e3       	ldi	r30, 0x31	; 49
    5cd6:	f0 e0       	ldi	r31, 0x00	; 0
    5cd8:	80 81       	ld	r24, Z
    5cda:	48 2f       	mov	r20, r24
    5cdc:	89 81       	ldd	r24, Y+1	; 0x01
    5cde:	88 2f       	mov	r24, r24
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	9c 01       	movw	r18, r24
    5ce4:	28 51       	subi	r18, 0x18	; 24
    5ce6:	30 40       	sbci	r19, 0x00	; 0
    5ce8:	81 e0       	ldi	r24, 0x01	; 1
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	02 2e       	mov	r0, r18
    5cee:	02 c0       	rjmp	.+4      	; 0x5cf4 <DIO_MakeInput+0xd0>
    5cf0:	88 0f       	add	r24, r24
    5cf2:	99 1f       	adc	r25, r25
    5cf4:	0a 94       	dec	r0
    5cf6:	e2 f7       	brpl	.-8      	; 0x5cf0 <DIO_MakeInput+0xcc>
    5cf8:	80 95       	com	r24
    5cfa:	84 23       	and	r24, r20
    5cfc:	8c 93       	st	X, r24
}
    5cfe:	0f 90       	pop	r0
    5d00:	cf 91       	pop	r28
    5d02:	df 91       	pop	r29
    5d04:	08 95       	ret

00005d06 <DIO_MakeOutput>:

void DIO_MakeOutput(volatile const uint8 a_PIN){
    5d06:	df 93       	push	r29
    5d08:	cf 93       	push	r28
    5d0a:	0f 92       	push	r0
    5d0c:	cd b7       	in	r28, 0x3d	; 61
    5d0e:	de b7       	in	r29, 0x3e	; 62
    5d10:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
    5d14:	88 30       	cpi	r24, 0x08	; 8
    5d16:	a0 f4       	brcc	.+40     	; 0x5d40 <DIO_MakeOutput+0x3a>
		PORTA_direction |= (1 << a_PIN);
    5d18:	aa e3       	ldi	r26, 0x3A	; 58
    5d1a:	b0 e0       	ldi	r27, 0x00	; 0
    5d1c:	ea e3       	ldi	r30, 0x3A	; 58
    5d1e:	f0 e0       	ldi	r31, 0x00	; 0
    5d20:	80 81       	ld	r24, Z
    5d22:	48 2f       	mov	r20, r24
    5d24:	89 81       	ldd	r24, Y+1	; 0x01
    5d26:	28 2f       	mov	r18, r24
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	81 e0       	ldi	r24, 0x01	; 1
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	02 2e       	mov	r0, r18
    5d30:	02 c0       	rjmp	.+4      	; 0x5d36 <DIO_MakeOutput+0x30>
    5d32:	88 0f       	add	r24, r24
    5d34:	99 1f       	adc	r25, r25
    5d36:	0a 94       	dec	r0
    5d38:	e2 f7       	brpl	.-8      	; 0x5d32 <DIO_MakeOutput+0x2c>
    5d3a:	84 2b       	or	r24, r20
    5d3c:	8c 93       	st	X, r24
    5d3e:	4c c0       	rjmp	.+152    	; 0x5dd8 <DIO_MakeOutput+0xd2>
	else if(a_PIN/8 == 1)
    5d40:	89 81       	ldd	r24, Y+1	; 0x01
    5d42:	88 50       	subi	r24, 0x08	; 8
    5d44:	88 30       	cpi	r24, 0x08	; 8
    5d46:	b8 f4       	brcc	.+46     	; 0x5d76 <DIO_MakeOutput+0x70>
		PORTB_direction |= (1 << (a_PIN - 8));
    5d48:	a7 e3       	ldi	r26, 0x37	; 55
    5d4a:	b0 e0       	ldi	r27, 0x00	; 0
    5d4c:	e7 e3       	ldi	r30, 0x37	; 55
    5d4e:	f0 e0       	ldi	r31, 0x00	; 0
    5d50:	80 81       	ld	r24, Z
    5d52:	48 2f       	mov	r20, r24
    5d54:	89 81       	ldd	r24, Y+1	; 0x01
    5d56:	88 2f       	mov	r24, r24
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	9c 01       	movw	r18, r24
    5d5c:	28 50       	subi	r18, 0x08	; 8
    5d5e:	30 40       	sbci	r19, 0x00	; 0
    5d60:	81 e0       	ldi	r24, 0x01	; 1
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	02 2e       	mov	r0, r18
    5d66:	02 c0       	rjmp	.+4      	; 0x5d6c <DIO_MakeOutput+0x66>
    5d68:	88 0f       	add	r24, r24
    5d6a:	99 1f       	adc	r25, r25
    5d6c:	0a 94       	dec	r0
    5d6e:	e2 f7       	brpl	.-8      	; 0x5d68 <DIO_MakeOutput+0x62>
    5d70:	84 2b       	or	r24, r20
    5d72:	8c 93       	st	X, r24
    5d74:	31 c0       	rjmp	.+98     	; 0x5dd8 <DIO_MakeOutput+0xd2>
	else if(a_PIN/8 == 2)
    5d76:	89 81       	ldd	r24, Y+1	; 0x01
    5d78:	80 51       	subi	r24, 0x10	; 16
    5d7a:	88 30       	cpi	r24, 0x08	; 8
    5d7c:	b8 f4       	brcc	.+46     	; 0x5dac <DIO_MakeOutput+0xa6>
		PORTC_direction |= (1 << (a_PIN - 16));
    5d7e:	a4 e3       	ldi	r26, 0x34	; 52
    5d80:	b0 e0       	ldi	r27, 0x00	; 0
    5d82:	e4 e3       	ldi	r30, 0x34	; 52
    5d84:	f0 e0       	ldi	r31, 0x00	; 0
    5d86:	80 81       	ld	r24, Z
    5d88:	48 2f       	mov	r20, r24
    5d8a:	89 81       	ldd	r24, Y+1	; 0x01
    5d8c:	88 2f       	mov	r24, r24
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	9c 01       	movw	r18, r24
    5d92:	20 51       	subi	r18, 0x10	; 16
    5d94:	30 40       	sbci	r19, 0x00	; 0
    5d96:	81 e0       	ldi	r24, 0x01	; 1
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	02 2e       	mov	r0, r18
    5d9c:	02 c0       	rjmp	.+4      	; 0x5da2 <DIO_MakeOutput+0x9c>
    5d9e:	88 0f       	add	r24, r24
    5da0:	99 1f       	adc	r25, r25
    5da2:	0a 94       	dec	r0
    5da4:	e2 f7       	brpl	.-8      	; 0x5d9e <DIO_MakeOutput+0x98>
    5da6:	84 2b       	or	r24, r20
    5da8:	8c 93       	st	X, r24
    5daa:	16 c0       	rjmp	.+44     	; 0x5dd8 <DIO_MakeOutput+0xd2>
	else
		PORTD_direction |= (1 << (a_PIN - 24));
    5dac:	a1 e3       	ldi	r26, 0x31	; 49
    5dae:	b0 e0       	ldi	r27, 0x00	; 0
    5db0:	e1 e3       	ldi	r30, 0x31	; 49
    5db2:	f0 e0       	ldi	r31, 0x00	; 0
    5db4:	80 81       	ld	r24, Z
    5db6:	48 2f       	mov	r20, r24
    5db8:	89 81       	ldd	r24, Y+1	; 0x01
    5dba:	88 2f       	mov	r24, r24
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	9c 01       	movw	r18, r24
    5dc0:	28 51       	subi	r18, 0x18	; 24
    5dc2:	30 40       	sbci	r19, 0x00	; 0
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	02 2e       	mov	r0, r18
    5dca:	02 c0       	rjmp	.+4      	; 0x5dd0 <DIO_MakeOutput+0xca>
    5dcc:	88 0f       	add	r24, r24
    5dce:	99 1f       	adc	r25, r25
    5dd0:	0a 94       	dec	r0
    5dd2:	e2 f7       	brpl	.-8      	; 0x5dcc <DIO_MakeOutput+0xc6>
    5dd4:	84 2b       	or	r24, r20
    5dd6:	8c 93       	st	X, r24
}
    5dd8:	0f 90       	pop	r0
    5dda:	cf 91       	pop	r28
    5ddc:	df 91       	pop	r29
    5dde:	08 95       	ret

00005de0 <DIO_ToggleChannel>:

void DIO_ToggleChannel(volatile const uint8 a_PIN){
    5de0:	df 93       	push	r29
    5de2:	cf 93       	push	r28
    5de4:	0f 92       	push	r0
    5de6:	cd b7       	in	r28, 0x3d	; 61
    5de8:	de b7       	in	r29, 0x3e	; 62
    5dea:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    5dec:	89 81       	ldd	r24, Y+1	; 0x01
    5dee:	88 30       	cpi	r24, 0x08	; 8
    5df0:	a0 f4       	brcc	.+40     	; 0x5e1a <DIO_ToggleChannel+0x3a>
		PORTA_output ^= (1 << a_PIN);
    5df2:	ab e3       	ldi	r26, 0x3B	; 59
    5df4:	b0 e0       	ldi	r27, 0x00	; 0
    5df6:	eb e3       	ldi	r30, 0x3B	; 59
    5df8:	f0 e0       	ldi	r31, 0x00	; 0
    5dfa:	80 81       	ld	r24, Z
    5dfc:	48 2f       	mov	r20, r24
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	28 2f       	mov	r18, r24
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	81 e0       	ldi	r24, 0x01	; 1
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	02 2e       	mov	r0, r18
    5e0a:	02 c0       	rjmp	.+4      	; 0x5e10 <DIO_ToggleChannel+0x30>
    5e0c:	88 0f       	add	r24, r24
    5e0e:	99 1f       	adc	r25, r25
    5e10:	0a 94       	dec	r0
    5e12:	e2 f7       	brpl	.-8      	; 0x5e0c <DIO_ToggleChannel+0x2c>
    5e14:	84 27       	eor	r24, r20
    5e16:	8c 93       	st	X, r24
    5e18:	4c c0       	rjmp	.+152    	; 0x5eb2 <DIO_ToggleChannel+0xd2>
	else if(a_PIN/8 == 1)
    5e1a:	89 81       	ldd	r24, Y+1	; 0x01
    5e1c:	88 50       	subi	r24, 0x08	; 8
    5e1e:	88 30       	cpi	r24, 0x08	; 8
    5e20:	b8 f4       	brcc	.+46     	; 0x5e50 <DIO_ToggleChannel+0x70>
		PORTB_output ^= (1 << (a_PIN - 8));
    5e22:	a8 e3       	ldi	r26, 0x38	; 56
    5e24:	b0 e0       	ldi	r27, 0x00	; 0
    5e26:	e8 e3       	ldi	r30, 0x38	; 56
    5e28:	f0 e0       	ldi	r31, 0x00	; 0
    5e2a:	80 81       	ld	r24, Z
    5e2c:	48 2f       	mov	r20, r24
    5e2e:	89 81       	ldd	r24, Y+1	; 0x01
    5e30:	88 2f       	mov	r24, r24
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	9c 01       	movw	r18, r24
    5e36:	28 50       	subi	r18, 0x08	; 8
    5e38:	30 40       	sbci	r19, 0x00	; 0
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	90 e0       	ldi	r25, 0x00	; 0
    5e3e:	02 2e       	mov	r0, r18
    5e40:	02 c0       	rjmp	.+4      	; 0x5e46 <DIO_ToggleChannel+0x66>
    5e42:	88 0f       	add	r24, r24
    5e44:	99 1f       	adc	r25, r25
    5e46:	0a 94       	dec	r0
    5e48:	e2 f7       	brpl	.-8      	; 0x5e42 <DIO_ToggleChannel+0x62>
    5e4a:	84 27       	eor	r24, r20
    5e4c:	8c 93       	st	X, r24
    5e4e:	31 c0       	rjmp	.+98     	; 0x5eb2 <DIO_ToggleChannel+0xd2>
	else if(a_PIN/8 == 2)
    5e50:	89 81       	ldd	r24, Y+1	; 0x01
    5e52:	80 51       	subi	r24, 0x10	; 16
    5e54:	88 30       	cpi	r24, 0x08	; 8
    5e56:	b8 f4       	brcc	.+46     	; 0x5e86 <DIO_ToggleChannel+0xa6>
		PORTC_output ^= (1 << (a_PIN - 16));
    5e58:	a5 e3       	ldi	r26, 0x35	; 53
    5e5a:	b0 e0       	ldi	r27, 0x00	; 0
    5e5c:	e5 e3       	ldi	r30, 0x35	; 53
    5e5e:	f0 e0       	ldi	r31, 0x00	; 0
    5e60:	80 81       	ld	r24, Z
    5e62:	48 2f       	mov	r20, r24
    5e64:	89 81       	ldd	r24, Y+1	; 0x01
    5e66:	88 2f       	mov	r24, r24
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	9c 01       	movw	r18, r24
    5e6c:	20 51       	subi	r18, 0x10	; 16
    5e6e:	30 40       	sbci	r19, 0x00	; 0
    5e70:	81 e0       	ldi	r24, 0x01	; 1
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	02 2e       	mov	r0, r18
    5e76:	02 c0       	rjmp	.+4      	; 0x5e7c <DIO_ToggleChannel+0x9c>
    5e78:	88 0f       	add	r24, r24
    5e7a:	99 1f       	adc	r25, r25
    5e7c:	0a 94       	dec	r0
    5e7e:	e2 f7       	brpl	.-8      	; 0x5e78 <DIO_ToggleChannel+0x98>
    5e80:	84 27       	eor	r24, r20
    5e82:	8c 93       	st	X, r24
    5e84:	16 c0       	rjmp	.+44     	; 0x5eb2 <DIO_ToggleChannel+0xd2>
	else
		PORTD_output ^= (1 << (a_PIN - 24));
    5e86:	a2 e3       	ldi	r26, 0x32	; 50
    5e88:	b0 e0       	ldi	r27, 0x00	; 0
    5e8a:	e2 e3       	ldi	r30, 0x32	; 50
    5e8c:	f0 e0       	ldi	r31, 0x00	; 0
    5e8e:	80 81       	ld	r24, Z
    5e90:	48 2f       	mov	r20, r24
    5e92:	89 81       	ldd	r24, Y+1	; 0x01
    5e94:	88 2f       	mov	r24, r24
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	9c 01       	movw	r18, r24
    5e9a:	28 51       	subi	r18, 0x18	; 24
    5e9c:	30 40       	sbci	r19, 0x00	; 0
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	02 2e       	mov	r0, r18
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <DIO_ToggleChannel+0xca>
    5ea6:	88 0f       	add	r24, r24
    5ea8:	99 1f       	adc	r25, r25
    5eaa:	0a 94       	dec	r0
    5eac:	e2 f7       	brpl	.-8      	; 0x5ea6 <DIO_ToggleChannel+0xc6>
    5eae:	84 27       	eor	r24, r20
    5eb0:	8c 93       	st	X, r24
}
    5eb2:	0f 90       	pop	r0
    5eb4:	cf 91       	pop	r28
    5eb6:	df 91       	pop	r29
    5eb8:	08 95       	ret

00005eba <DIO_PortOutput>:

void DIO_PortOutput(volatile const uint8 port)
{
    5eba:	df 93       	push	r29
    5ebc:	cf 93       	push	r28
    5ebe:	00 d0       	rcall	.+0      	; 0x5ec0 <DIO_PortOutput+0x6>
    5ec0:	0f 92       	push	r0
    5ec2:	cd b7       	in	r28, 0x3d	; 61
    5ec4:	de b7       	in	r29, 0x3e	; 62
    5ec6:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    5ec8:	89 81       	ldd	r24, Y+1	; 0x01
    5eca:	28 2f       	mov	r18, r24
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	3b 83       	std	Y+3, r19	; 0x03
    5ed0:	2a 83       	std	Y+2, r18	; 0x02
    5ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ed6:	81 30       	cpi	r24, 0x01	; 1
    5ed8:	91 05       	cpc	r25, r1
    5eda:	d1 f0       	breq	.+52     	; 0x5f10 <DIO_PortOutput+0x56>
    5edc:	2a 81       	ldd	r18, Y+2	; 0x02
    5ede:	3b 81       	ldd	r19, Y+3	; 0x03
    5ee0:	22 30       	cpi	r18, 0x02	; 2
    5ee2:	31 05       	cpc	r19, r1
    5ee4:	2c f4       	brge	.+10     	; 0x5ef0 <DIO_PortOutput+0x36>
    5ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    5eea:	00 97       	sbiw	r24, 0x00	; 0
    5eec:	61 f0       	breq	.+24     	; 0x5f06 <DIO_PortOutput+0x4c>
    5eee:	1e c0       	rjmp	.+60     	; 0x5f2c <DIO_PortOutput+0x72>
    5ef0:	2a 81       	ldd	r18, Y+2	; 0x02
    5ef2:	3b 81       	ldd	r19, Y+3	; 0x03
    5ef4:	22 30       	cpi	r18, 0x02	; 2
    5ef6:	31 05       	cpc	r19, r1
    5ef8:	81 f0       	breq	.+32     	; 0x5f1a <DIO_PortOutput+0x60>
    5efa:	8a 81       	ldd	r24, Y+2	; 0x02
    5efc:	9b 81       	ldd	r25, Y+3	; 0x03
    5efe:	83 30       	cpi	r24, 0x03	; 3
    5f00:	91 05       	cpc	r25, r1
    5f02:	81 f0       	breq	.+32     	; 0x5f24 <DIO_PortOutput+0x6a>
    5f04:	13 c0       	rjmp	.+38     	; 0x5f2c <DIO_PortOutput+0x72>
	{
	case DIO_PORTA:
		PORTA_direction = 0xFF;
    5f06:	ea e3       	ldi	r30, 0x3A	; 58
    5f08:	f0 e0       	ldi	r31, 0x00	; 0
    5f0a:	8f ef       	ldi	r24, 0xFF	; 255
    5f0c:	80 83       	st	Z, r24
    5f0e:	0e c0       	rjmp	.+28     	; 0x5f2c <DIO_PortOutput+0x72>
		break;
	case DIO_PORTB:
		PORTB_direction = 0xFF;
    5f10:	e7 e3       	ldi	r30, 0x37	; 55
    5f12:	f0 e0       	ldi	r31, 0x00	; 0
    5f14:	8f ef       	ldi	r24, 0xFF	; 255
    5f16:	80 83       	st	Z, r24
    5f18:	09 c0       	rjmp	.+18     	; 0x5f2c <DIO_PortOutput+0x72>
		break;
	case DIO_PORTC:
		PORTC_direction = 0xFF;
    5f1a:	e4 e3       	ldi	r30, 0x34	; 52
    5f1c:	f0 e0       	ldi	r31, 0x00	; 0
    5f1e:	8f ef       	ldi	r24, 0xFF	; 255
    5f20:	80 83       	st	Z, r24
    5f22:	04 c0       	rjmp	.+8      	; 0x5f2c <DIO_PortOutput+0x72>
		break;
	case DIO_PORTD:
		PORTD_direction = 0xFF;
    5f24:	e1 e3       	ldi	r30, 0x31	; 49
    5f26:	f0 e0       	ldi	r31, 0x00	; 0
    5f28:	8f ef       	ldi	r24, 0xFF	; 255
    5f2a:	80 83       	st	Z, r24
		break;
	default:
		//error
		break;
	}
}
    5f2c:	0f 90       	pop	r0
    5f2e:	0f 90       	pop	r0
    5f30:	0f 90       	pop	r0
    5f32:	cf 91       	pop	r28
    5f34:	df 91       	pop	r29
    5f36:	08 95       	ret

00005f38 <DIO_PortInput>:

void DIO_PortInput(volatile const uint8 port)
{
    5f38:	df 93       	push	r29
    5f3a:	cf 93       	push	r28
    5f3c:	00 d0       	rcall	.+0      	; 0x5f3e <DIO_PortInput+0x6>
    5f3e:	0f 92       	push	r0
    5f40:	cd b7       	in	r28, 0x3d	; 61
    5f42:	de b7       	in	r29, 0x3e	; 62
    5f44:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    5f46:	89 81       	ldd	r24, Y+1	; 0x01
    5f48:	28 2f       	mov	r18, r24
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	3b 83       	std	Y+3, r19	; 0x03
    5f4e:	2a 83       	std	Y+2, r18	; 0x02
    5f50:	8a 81       	ldd	r24, Y+2	; 0x02
    5f52:	9b 81       	ldd	r25, Y+3	; 0x03
    5f54:	81 30       	cpi	r24, 0x01	; 1
    5f56:	91 05       	cpc	r25, r1
    5f58:	c9 f0       	breq	.+50     	; 0x5f8c <DIO_PortInput+0x54>
    5f5a:	2a 81       	ldd	r18, Y+2	; 0x02
    5f5c:	3b 81       	ldd	r19, Y+3	; 0x03
    5f5e:	22 30       	cpi	r18, 0x02	; 2
    5f60:	31 05       	cpc	r19, r1
    5f62:	2c f4       	brge	.+10     	; 0x5f6e <DIO_PortInput+0x36>
    5f64:	8a 81       	ldd	r24, Y+2	; 0x02
    5f66:	9b 81       	ldd	r25, Y+3	; 0x03
    5f68:	00 97       	sbiw	r24, 0x00	; 0
    5f6a:	61 f0       	breq	.+24     	; 0x5f84 <DIO_PortInput+0x4c>
    5f6c:	1a c0       	rjmp	.+52     	; 0x5fa2 <DIO_PortInput+0x6a>
    5f6e:	2a 81       	ldd	r18, Y+2	; 0x02
    5f70:	3b 81       	ldd	r19, Y+3	; 0x03
    5f72:	22 30       	cpi	r18, 0x02	; 2
    5f74:	31 05       	cpc	r19, r1
    5f76:	71 f0       	breq	.+28     	; 0x5f94 <DIO_PortInput+0x5c>
    5f78:	8a 81       	ldd	r24, Y+2	; 0x02
    5f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f7c:	83 30       	cpi	r24, 0x03	; 3
    5f7e:	91 05       	cpc	r25, r1
    5f80:	69 f0       	breq	.+26     	; 0x5f9c <DIO_PortInput+0x64>
    5f82:	0f c0       	rjmp	.+30     	; 0x5fa2 <DIO_PortInput+0x6a>
	{
	case DIO_PORTA:
		PORTA_direction = 0;
    5f84:	ea e3       	ldi	r30, 0x3A	; 58
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	10 82       	st	Z, r1
    5f8a:	0b c0       	rjmp	.+22     	; 0x5fa2 <DIO_PortInput+0x6a>
		break;
	case DIO_PORTB:
		PORTB_direction = 0;
    5f8c:	e7 e3       	ldi	r30, 0x37	; 55
    5f8e:	f0 e0       	ldi	r31, 0x00	; 0
    5f90:	10 82       	st	Z, r1
    5f92:	07 c0       	rjmp	.+14     	; 0x5fa2 <DIO_PortInput+0x6a>
		break;
	case DIO_PORTC:
		PORTC_direction = 0;
    5f94:	e4 e3       	ldi	r30, 0x34	; 52
    5f96:	f0 e0       	ldi	r31, 0x00	; 0
    5f98:	10 82       	st	Z, r1
    5f9a:	03 c0       	rjmp	.+6      	; 0x5fa2 <DIO_PortInput+0x6a>
		break;
	case DIO_PORTD:
		PORTD_direction = 0;
    5f9c:	e1 e3       	ldi	r30, 0x31	; 49
    5f9e:	f0 e0       	ldi	r31, 0x00	; 0
    5fa0:	10 82       	st	Z, r1
		break;
	default:
		//error
		break;
	}
}
    5fa2:	0f 90       	pop	r0
    5fa4:	0f 90       	pop	r0
    5fa6:	0f 90       	pop	r0
    5fa8:	cf 91       	pop	r28
    5faa:	df 91       	pop	r29
    5fac:	08 95       	ret

00005fae <DIO_WritePort>:

void DIO_WritePort(volatile const uint8 port, volatile const uint8 value)
{
    5fae:	df 93       	push	r29
    5fb0:	cf 93       	push	r28
    5fb2:	00 d0       	rcall	.+0      	; 0x5fb4 <DIO_WritePort+0x6>
    5fb4:	00 d0       	rcall	.+0      	; 0x5fb6 <DIO_WritePort+0x8>
    5fb6:	cd b7       	in	r28, 0x3d	; 61
    5fb8:	de b7       	in	r29, 0x3e	; 62
    5fba:	89 83       	std	Y+1, r24	; 0x01
    5fbc:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    5fbe:	89 81       	ldd	r24, Y+1	; 0x01
    5fc0:	28 2f       	mov	r18, r24
    5fc2:	30 e0       	ldi	r19, 0x00	; 0
    5fc4:	3c 83       	std	Y+4, r19	; 0x04
    5fc6:	2b 83       	std	Y+3, r18	; 0x03
    5fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5fca:	9c 81       	ldd	r25, Y+4	; 0x04
    5fcc:	81 30       	cpi	r24, 0x01	; 1
    5fce:	91 05       	cpc	r25, r1
    5fd0:	d1 f0       	breq	.+52     	; 0x6006 <DIO_WritePort+0x58>
    5fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    5fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    5fd6:	22 30       	cpi	r18, 0x02	; 2
    5fd8:	31 05       	cpc	r19, r1
    5fda:	2c f4       	brge	.+10     	; 0x5fe6 <DIO_WritePort+0x38>
    5fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    5fde:	9c 81       	ldd	r25, Y+4	; 0x04
    5fe0:	00 97       	sbiw	r24, 0x00	; 0
    5fe2:	61 f0       	breq	.+24     	; 0x5ffc <DIO_WritePort+0x4e>
    5fe4:	1e c0       	rjmp	.+60     	; 0x6022 <DIO_WritePort+0x74>
    5fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    5fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    5fea:	22 30       	cpi	r18, 0x02	; 2
    5fec:	31 05       	cpc	r19, r1
    5fee:	81 f0       	breq	.+32     	; 0x6010 <DIO_WritePort+0x62>
    5ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    5ff4:	83 30       	cpi	r24, 0x03	; 3
    5ff6:	91 05       	cpc	r25, r1
    5ff8:	81 f0       	breq	.+32     	; 0x601a <DIO_WritePort+0x6c>
    5ffa:	13 c0       	rjmp	.+38     	; 0x6022 <DIO_WritePort+0x74>
	{
	case DIO_PORTA:
		PORTA_output = value;
    5ffc:	eb e3       	ldi	r30, 0x3B	; 59
    5ffe:	f0 e0       	ldi	r31, 0x00	; 0
    6000:	8a 81       	ldd	r24, Y+2	; 0x02
    6002:	80 83       	st	Z, r24
    6004:	0e c0       	rjmp	.+28     	; 0x6022 <DIO_WritePort+0x74>
		break;
	case DIO_PORTB:
		PORTB_output = value;
    6006:	e8 e3       	ldi	r30, 0x38	; 56
    6008:	f0 e0       	ldi	r31, 0x00	; 0
    600a:	8a 81       	ldd	r24, Y+2	; 0x02
    600c:	80 83       	st	Z, r24
    600e:	09 c0       	rjmp	.+18     	; 0x6022 <DIO_WritePort+0x74>
		break;
	case DIO_PORTC:
		PORTC_output = value;
    6010:	e5 e3       	ldi	r30, 0x35	; 53
    6012:	f0 e0       	ldi	r31, 0x00	; 0
    6014:	8a 81       	ldd	r24, Y+2	; 0x02
    6016:	80 83       	st	Z, r24
    6018:	04 c0       	rjmp	.+8      	; 0x6022 <DIO_WritePort+0x74>
		break;
	case DIO_PORTD:
		PORTD_output = value;
    601a:	e2 e3       	ldi	r30, 0x32	; 50
    601c:	f0 e0       	ldi	r31, 0x00	; 0
    601e:	8a 81       	ldd	r24, Y+2	; 0x02
    6020:	80 83       	st	Z, r24
		break;
	default:
		//error
		break;
	}
}
    6022:	0f 90       	pop	r0
    6024:	0f 90       	pop	r0
    6026:	0f 90       	pop	r0
    6028:	0f 90       	pop	r0
    602a:	cf 91       	pop	r28
    602c:	df 91       	pop	r29
    602e:	08 95       	ret

00006030 <KEYPAD_GetStatus>:
 */


#include"KEYPAD.h"

uint8 KEYPAD_GetStatus(void){
    6030:	df 93       	push	r29
    6032:	cf 93       	push	r28
    6034:	00 d0       	rcall	.+0      	; 0x6036 <KEYPAD_GetStatus+0x6>
    6036:	0f 92       	push	r0
    6038:	cd b7       	in	r28, 0x3d	; 61
    603a:	de b7       	in	r29, 0x3e	; 62
	uint8 Col, Rows;
	for(Col = 0; Col < Num_Columns; Col++){
    603c:	1a 82       	std	Y+2, r1	; 0x02
    603e:	49 c0       	rjmp	.+146    	; 0x60d2 <KEYPAD_GetStatus+0xa2>
#if(Num_Columns == 4)
		Keypad_PORT_Direction = (0b00010000<<Col);
    6040:	ea e3       	ldi	r30, 0x3A	; 58
    6042:	f0 e0       	ldi	r31, 0x00	; 0
    6044:	8a 81       	ldd	r24, Y+2	; 0x02
    6046:	28 2f       	mov	r18, r24
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	80 e1       	ldi	r24, 0x10	; 16
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	02 c0       	rjmp	.+4      	; 0x6054 <KEYPAD_GetStatus+0x24>
    6050:	88 0f       	add	r24, r24
    6052:	99 1f       	adc	r25, r25
    6054:	2a 95       	dec	r18
    6056:	e2 f7       	brpl	.-8      	; 0x6050 <KEYPAD_GetStatus+0x20>
    6058:	80 83       	st	Z, r24
		Keypad_PORT_Output = ~(0b00010000<<Col);
    605a:	eb e3       	ldi	r30, 0x3B	; 59
    605c:	f0 e0       	ldi	r31, 0x00	; 0
    605e:	8a 81       	ldd	r24, Y+2	; 0x02
    6060:	28 2f       	mov	r18, r24
    6062:	30 e0       	ldi	r19, 0x00	; 0
    6064:	80 e1       	ldi	r24, 0x10	; 16
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	02 2e       	mov	r0, r18
    606a:	02 c0       	rjmp	.+4      	; 0x6070 <KEYPAD_GetStatus+0x40>
    606c:	88 0f       	add	r24, r24
    606e:	99 1f       	adc	r25, r25
    6070:	0a 94       	dec	r0
    6072:	e2 f7       	brpl	.-8      	; 0x606c <KEYPAD_GetStatus+0x3c>
    6074:	80 95       	com	r24
    6076:	80 83       	st	Z, r24
#elif(Num_Columns == 3)
		Keypad_PORT_Direction = (Keypad_PORT_Direction & 0x80)|(0b00010000<<Col);
		Keypad_PORT_Output = (Keypad_PORT_Output & 0x80)|((~(0b00010000<<Col))&0x7F);
#endif
		for(Rows= 0; Rows < Num_Rows; Rows++){
    6078:	19 82       	std	Y+1, r1	; 0x01
    607a:	25 c0       	rjmp	.+74     	; 0x60c6 <KEYPAD_GetStatus+0x96>
			if(BIT_IS_CLEAR(Keypad_PORT_Input, Rows)){
    607c:	e9 e3       	ldi	r30, 0x39	; 57
    607e:	f0 e0       	ldi	r31, 0x00	; 0
    6080:	80 81       	ld	r24, Z
    6082:	28 2f       	mov	r18, r24
    6084:	30 e0       	ldi	r19, 0x00	; 0
    6086:	89 81       	ldd	r24, Y+1	; 0x01
    6088:	88 2f       	mov	r24, r24
    608a:	90 e0       	ldi	r25, 0x00	; 0
    608c:	a9 01       	movw	r20, r18
    608e:	02 c0       	rjmp	.+4      	; 0x6094 <KEYPAD_GetStatus+0x64>
    6090:	55 95       	asr	r21
    6092:	47 95       	ror	r20
    6094:	8a 95       	dec	r24
    6096:	e2 f7       	brpl	.-8      	; 0x6090 <KEYPAD_GetStatus+0x60>
    6098:	ca 01       	movw	r24, r20
    609a:	81 70       	andi	r24, 0x01	; 1
    609c:	90 70       	andi	r25, 0x00	; 0
    609e:	00 97       	sbiw	r24, 0x00	; 0
    60a0:	79 f4       	brne	.+30     	; 0x60c0 <KEYPAD_GetStatus+0x90>
#if (Num_Columns == 3)
				return KEYPAD_4x3_adjustKeyNumber((Rows*Num_Columns)+Col+1);
#elif (Num_Columns == 4)
				return KEYPAD_4x4_adjustKeyNumber((Rows*Num_Columns)+Col+1);
    60a2:	89 81       	ldd	r24, Y+1	; 0x01
    60a4:	88 2f       	mov	r24, r24
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	88 0f       	add	r24, r24
    60aa:	99 1f       	adc	r25, r25
    60ac:	88 0f       	add	r24, r24
    60ae:	99 1f       	adc	r25, r25
    60b0:	98 2f       	mov	r25, r24
    60b2:	8a 81       	ldd	r24, Y+2	; 0x02
    60b4:	89 0f       	add	r24, r25
    60b6:	8f 5f       	subi	r24, 0xFF	; 255
    60b8:	0e 94 76 30 	call	0x60ec	; 0x60ec <KEYPAD_4x4_adjustKeyNumber>
    60bc:	8b 83       	std	Y+3, r24	; 0x03
    60be:	0f c0       	rjmp	.+30     	; 0x60de <KEYPAD_GetStatus+0xae>
		Keypad_PORT_Output = ~(0b00010000<<Col);
#elif(Num_Columns == 3)
		Keypad_PORT_Direction = (Keypad_PORT_Direction & 0x80)|(0b00010000<<Col);
		Keypad_PORT_Output = (Keypad_PORT_Output & 0x80)|((~(0b00010000<<Col))&0x7F);
#endif
		for(Rows= 0; Rows < Num_Rows; Rows++){
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	8f 5f       	subi	r24, 0xFF	; 255
    60c4:	89 83       	std	Y+1, r24	; 0x01
    60c6:	89 81       	ldd	r24, Y+1	; 0x01
    60c8:	84 30       	cpi	r24, 0x04	; 4
    60ca:	c0 f2       	brcs	.-80     	; 0x607c <KEYPAD_GetStatus+0x4c>

#include"KEYPAD.h"

uint8 KEYPAD_GetStatus(void){
	uint8 Col, Rows;
	for(Col = 0; Col < Num_Columns; Col++){
    60cc:	8a 81       	ldd	r24, Y+2	; 0x02
    60ce:	8f 5f       	subi	r24, 0xFF	; 255
    60d0:	8a 83       	std	Y+2, r24	; 0x02
    60d2:	8a 81       	ldd	r24, Y+2	; 0x02
    60d4:	84 30       	cpi	r24, 0x04	; 4
    60d6:	08 f4       	brcc	.+2      	; 0x60da <KEYPAD_GetStatus+0xaa>
    60d8:	b3 cf       	rjmp	.-154    	; 0x6040 <KEYPAD_GetStatus+0x10>
				return KEYPAD_4x4_adjustKeyNumber((Rows*Num_Columns)+Col+1);
#endif
			}
		}
	}
	return 'A';
    60da:	51 e4       	ldi	r21, 0x41	; 65
    60dc:	5b 83       	std	Y+3, r21	; 0x03
    60de:	8b 81       	ldd	r24, Y+3	; 0x03
}
    60e0:	0f 90       	pop	r0
    60e2:	0f 90       	pop	r0
    60e4:	0f 90       	pop	r0
    60e6:	cf 91       	pop	r28
    60e8:	df 91       	pop	r29
    60ea:	08 95       	ret

000060ec <KEYPAD_4x4_adjustKeyNumber>:

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 a_NUM){
    60ec:	df 93       	push	r29
    60ee:	cf 93       	push	r28
    60f0:	00 d0       	rcall	.+0      	; 0x60f2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    60f2:	00 d0       	rcall	.+0      	; 0x60f4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    60f4:	cd b7       	in	r28, 0x3d	; 61
    60f6:	de b7       	in	r29, 0x3e	; 62
    60f8:	89 83       	std	Y+1, r24	; 0x01
	switch(a_NUM){
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	28 2f       	mov	r18, r24
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	3c 83       	std	Y+4, r19	; 0x04
    6102:	2b 83       	std	Y+3, r18	; 0x03
    6104:	8b 81       	ldd	r24, Y+3	; 0x03
    6106:	9c 81       	ldd	r25, Y+4	; 0x04
    6108:	88 30       	cpi	r24, 0x08	; 8
    610a:	91 05       	cpc	r25, r1
    610c:	09 f4       	brne	.+2      	; 0x6110 <KEYPAD_4x4_adjustKeyNumber+0x24>
    610e:	70 c0       	rjmp	.+224    	; 0x61f0 <KEYPAD_4x4_adjustKeyNumber+0x104>
    6110:	2b 81       	ldd	r18, Y+3	; 0x03
    6112:	3c 81       	ldd	r19, Y+4	; 0x04
    6114:	29 30       	cpi	r18, 0x09	; 9
    6116:	31 05       	cpc	r19, r1
    6118:	5c f5       	brge	.+86     	; 0x6170 <KEYPAD_4x4_adjustKeyNumber+0x84>
    611a:	8b 81       	ldd	r24, Y+3	; 0x03
    611c:	9c 81       	ldd	r25, Y+4	; 0x04
    611e:	84 30       	cpi	r24, 0x04	; 4
    6120:	91 05       	cpc	r25, r1
    6122:	09 f4       	brne	.+2      	; 0x6126 <KEYPAD_4x4_adjustKeyNumber+0x3a>
    6124:	59 c0       	rjmp	.+178    	; 0x61d8 <KEYPAD_4x4_adjustKeyNumber+0xec>
    6126:	2b 81       	ldd	r18, Y+3	; 0x03
    6128:	3c 81       	ldd	r19, Y+4	; 0x04
    612a:	25 30       	cpi	r18, 0x05	; 5
    612c:	31 05       	cpc	r19, r1
    612e:	9c f4       	brge	.+38     	; 0x6156 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    6130:	8b 81       	ldd	r24, Y+3	; 0x03
    6132:	9c 81       	ldd	r25, Y+4	; 0x04
    6134:	82 30       	cpi	r24, 0x02	; 2
    6136:	91 05       	cpc	r25, r1
    6138:	09 f4       	brne	.+2      	; 0x613c <KEYPAD_4x4_adjustKeyNumber+0x50>
    613a:	48 c0       	rjmp	.+144    	; 0x61cc <KEYPAD_4x4_adjustKeyNumber+0xe0>
    613c:	2b 81       	ldd	r18, Y+3	; 0x03
    613e:	3c 81       	ldd	r19, Y+4	; 0x04
    6140:	23 30       	cpi	r18, 0x03	; 3
    6142:	31 05       	cpc	r19, r1
    6144:	0c f0       	brlt	.+2      	; 0x6148 <KEYPAD_4x4_adjustKeyNumber+0x5c>
    6146:	45 c0       	rjmp	.+138    	; 0x61d2 <KEYPAD_4x4_adjustKeyNumber+0xe6>
    6148:	8b 81       	ldd	r24, Y+3	; 0x03
    614a:	9c 81       	ldd	r25, Y+4	; 0x04
    614c:	81 30       	cpi	r24, 0x01	; 1
    614e:	91 05       	cpc	r25, r1
    6150:	09 f4       	brne	.+2      	; 0x6154 <KEYPAD_4x4_adjustKeyNumber+0x68>
    6152:	39 c0       	rjmp	.+114    	; 0x61c6 <KEYPAD_4x4_adjustKeyNumber+0xda>
    6154:	68 c0       	rjmp	.+208    	; 0x6226 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    6156:	2b 81       	ldd	r18, Y+3	; 0x03
    6158:	3c 81       	ldd	r19, Y+4	; 0x04
    615a:	26 30       	cpi	r18, 0x06	; 6
    615c:	31 05       	cpc	r19, r1
    615e:	09 f4       	brne	.+2      	; 0x6162 <KEYPAD_4x4_adjustKeyNumber+0x76>
    6160:	41 c0       	rjmp	.+130    	; 0x61e4 <KEYPAD_4x4_adjustKeyNumber+0xf8>
    6162:	8b 81       	ldd	r24, Y+3	; 0x03
    6164:	9c 81       	ldd	r25, Y+4	; 0x04
    6166:	87 30       	cpi	r24, 0x07	; 7
    6168:	91 05       	cpc	r25, r1
    616a:	0c f0       	brlt	.+2      	; 0x616e <KEYPAD_4x4_adjustKeyNumber+0x82>
    616c:	3e c0       	rjmp	.+124    	; 0x61ea <KEYPAD_4x4_adjustKeyNumber+0xfe>
    616e:	37 c0       	rjmp	.+110    	; 0x61de <KEYPAD_4x4_adjustKeyNumber+0xf2>
    6170:	2b 81       	ldd	r18, Y+3	; 0x03
    6172:	3c 81       	ldd	r19, Y+4	; 0x04
    6174:	2c 30       	cpi	r18, 0x0C	; 12
    6176:	31 05       	cpc	r19, r1
    6178:	09 f4       	brne	.+2      	; 0x617c <KEYPAD_4x4_adjustKeyNumber+0x90>
    617a:	46 c0       	rjmp	.+140    	; 0x6208 <KEYPAD_4x4_adjustKeyNumber+0x11c>
    617c:	8b 81       	ldd	r24, Y+3	; 0x03
    617e:	9c 81       	ldd	r25, Y+4	; 0x04
    6180:	8d 30       	cpi	r24, 0x0D	; 13
    6182:	91 05       	cpc	r25, r1
    6184:	5c f4       	brge	.+22     	; 0x619c <KEYPAD_4x4_adjustKeyNumber+0xb0>
    6186:	2b 81       	ldd	r18, Y+3	; 0x03
    6188:	3c 81       	ldd	r19, Y+4	; 0x04
    618a:	2a 30       	cpi	r18, 0x0A	; 10
    618c:	31 05       	cpc	r19, r1
    618e:	b1 f1       	breq	.+108    	; 0x61fc <KEYPAD_4x4_adjustKeyNumber+0x110>
    6190:	8b 81       	ldd	r24, Y+3	; 0x03
    6192:	9c 81       	ldd	r25, Y+4	; 0x04
    6194:	8b 30       	cpi	r24, 0x0B	; 11
    6196:	91 05       	cpc	r25, r1
    6198:	a4 f5       	brge	.+104    	; 0x6202 <KEYPAD_4x4_adjustKeyNumber+0x116>
    619a:	2d c0       	rjmp	.+90     	; 0x61f6 <KEYPAD_4x4_adjustKeyNumber+0x10a>
    619c:	2b 81       	ldd	r18, Y+3	; 0x03
    619e:	3c 81       	ldd	r19, Y+4	; 0x04
    61a0:	2e 30       	cpi	r18, 0x0E	; 14
    61a2:	31 05       	cpc	r19, r1
    61a4:	b9 f1       	breq	.+110    	; 0x6214 <KEYPAD_4x4_adjustKeyNumber+0x128>
    61a6:	8b 81       	ldd	r24, Y+3	; 0x03
    61a8:	9c 81       	ldd	r25, Y+4	; 0x04
    61aa:	8e 30       	cpi	r24, 0x0E	; 14
    61ac:	91 05       	cpc	r25, r1
    61ae:	7c f1       	brlt	.+94     	; 0x620e <KEYPAD_4x4_adjustKeyNumber+0x122>
    61b0:	2b 81       	ldd	r18, Y+3	; 0x03
    61b2:	3c 81       	ldd	r19, Y+4	; 0x04
    61b4:	2f 30       	cpi	r18, 0x0F	; 15
    61b6:	31 05       	cpc	r19, r1
    61b8:	81 f1       	breq	.+96     	; 0x621a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    61ba:	8b 81       	ldd	r24, Y+3	; 0x03
    61bc:	9c 81       	ldd	r25, Y+4	; 0x04
    61be:	80 31       	cpi	r24, 0x10	; 16
    61c0:	91 05       	cpc	r25, r1
    61c2:	71 f1       	breq	.+92     	; 0x6220 <KEYPAD_4x4_adjustKeyNumber+0x134>
    61c4:	30 c0       	rjmp	.+96     	; 0x6226 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case(1):
		return '7';
    61c6:	97 e3       	ldi	r25, 0x37	; 55
    61c8:	9a 83       	std	Y+2, r25	; 0x02
    61ca:	2f c0       	rjmp	.+94     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(2):
		return '8';
    61cc:	28 e3       	ldi	r18, 0x38	; 56
    61ce:	2a 83       	std	Y+2, r18	; 0x02
    61d0:	2c c0       	rjmp	.+88     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(3):
		return '9';
    61d2:	39 e3       	ldi	r19, 0x39	; 57
    61d4:	3a 83       	std	Y+2, r19	; 0x02
    61d6:	29 c0       	rjmp	.+82     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(4):
		return '%';
    61d8:	85 e2       	ldi	r24, 0x25	; 37
    61da:	8a 83       	std	Y+2, r24	; 0x02
    61dc:	26 c0       	rjmp	.+76     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(5):
		return '4';
    61de:	94 e3       	ldi	r25, 0x34	; 52
    61e0:	9a 83       	std	Y+2, r25	; 0x02
    61e2:	23 c0       	rjmp	.+70     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(6):
		return '5';
    61e4:	25 e3       	ldi	r18, 0x35	; 53
    61e6:	2a 83       	std	Y+2, r18	; 0x02
    61e8:	20 c0       	rjmp	.+64     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(7):
		return '6';
    61ea:	36 e3       	ldi	r19, 0x36	; 54
    61ec:	3a 83       	std	Y+2, r19	; 0x02
    61ee:	1d c0       	rjmp	.+58     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(8):
		return '*';
    61f0:	8a e2       	ldi	r24, 0x2A	; 42
    61f2:	8a 83       	std	Y+2, r24	; 0x02
    61f4:	1a c0       	rjmp	.+52     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(9):
		return '1';
    61f6:	91 e3       	ldi	r25, 0x31	; 49
    61f8:	9a 83       	std	Y+2, r25	; 0x02
    61fa:	17 c0       	rjmp	.+46     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(10):
		return '2';
    61fc:	22 e3       	ldi	r18, 0x32	; 50
    61fe:	2a 83       	std	Y+2, r18	; 0x02
    6200:	14 c0       	rjmp	.+40     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(11):
		return '3';
    6202:	33 e3       	ldi	r19, 0x33	; 51
    6204:	3a 83       	std	Y+2, r19	; 0x02
    6206:	11 c0       	rjmp	.+34     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(12):
		return '-';
    6208:	8d e2       	ldi	r24, 0x2D	; 45
    620a:	8a 83       	std	Y+2, r24	; 0x02
    620c:	0e c0       	rjmp	.+28     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(13):
		return 'C';
    620e:	93 e4       	ldi	r25, 0x43	; 67
    6210:	9a 83       	std	Y+2, r25	; 0x02
    6212:	0b c0       	rjmp	.+22     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(14):
		return '0';
    6214:	20 e3       	ldi	r18, 0x30	; 48
    6216:	2a 83       	std	Y+2, r18	; 0x02
    6218:	08 c0       	rjmp	.+16     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(15):
		return '=';
    621a:	3d e3       	ldi	r19, 0x3D	; 61
    621c:	3a 83       	std	Y+2, r19	; 0x02
    621e:	05 c0       	rjmp	.+10     	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case(16):
		return '+';
    6220:	8b e2       	ldi	r24, 0x2B	; 43
    6222:	8a 83       	std	Y+2, r24	; 0x02
    6224:	02 c0       	rjmp	.+4      	; 0x622a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default:
		return a_NUM;
    6226:	99 81       	ldd	r25, Y+1	; 0x01
    6228:	9a 83       	std	Y+2, r25	; 0x02
    622a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    622c:	0f 90       	pop	r0
    622e:	0f 90       	pop	r0
    6230:	0f 90       	pop	r0
    6232:	0f 90       	pop	r0
    6234:	cf 91       	pop	r28
    6236:	df 91       	pop	r29
    6238:	08 95       	ret

0000623a <LCD_Init>:
 *  Created on: 5 Apr 2019
 *      Author: Yahia
 */
#include"LCD.h"

void LCD_Init(volatile const uint8 a_NumBits, volatile const uint8 a_Cursor){
    623a:	df 93       	push	r29
    623c:	cf 93       	push	r28
    623e:	00 d0       	rcall	.+0      	; 0x6240 <LCD_Init+0x6>
    6240:	cd b7       	in	r28, 0x3d	; 61
    6242:	de b7       	in	r29, 0x3e	; 62
    6244:	89 83       	std	Y+1, r24	; 0x01
    6246:	6a 83       	std	Y+2, r22	; 0x02
	 * a_Cursor for defining the status of the cursor, you can also
	   use CursorOff, CursorOn, CursorBlinking OR 0x0C, 0x0E, 0x0F respectively.
	 * a_NumBits for defining the number of bits(data to be transmitted 4/8 bits)
	   you can also use LCD_4Bit, LCD_4Bit OR 0x28, 0x38 respectively.
	 * */
	DIO_PortOutput(DataPort);
    6248:	81 e0       	ldi	r24, 0x01	; 1
    624a:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <DIO_PortOutput>
	DIO_MakeOutput(RS);
    624e:	8d e1       	ldi	r24, 0x1D	; 29
    6250:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <DIO_MakeOutput>
	DIO_MakeOutput(RW);
    6254:	8e e1       	ldi	r24, 0x1E	; 30
    6256:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <DIO_MakeOutput>
	DIO_MakeOutput(Enable);
    625a:	8f e1       	ldi	r24, 0x1F	; 31
    625c:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <DIO_MakeOutput>
	LCD_SendCommand(a_NumBits);
    6260:	89 81       	ldd	r24, Y+1	; 0x01
    6262:	0e 94 3e 31 	call	0x627c	; 0x627c <LCD_SendCommand>
	LCD_SendCommand(a_Cursor);
    6266:	8a 81       	ldd	r24, Y+2	; 0x02
    6268:	0e 94 3e 31 	call	0x627c	; 0x627c <LCD_SendCommand>
	LCD_SendCommand(Clear_LCD);
    626c:	81 e0       	ldi	r24, 0x01	; 1
    626e:	0e 94 3e 31 	call	0x627c	; 0x627c <LCD_SendCommand>
}
    6272:	0f 90       	pop	r0
    6274:	0f 90       	pop	r0
    6276:	cf 91       	pop	r28
    6278:	df 91       	pop	r29
    627a:	08 95       	ret

0000627c <LCD_SendCommand>:

void LCD_SendCommand(volatile const uint8 a_Command){
    627c:	df 93       	push	r29
    627e:	cf 93       	push	r28
    6280:	cd b7       	in	r28, 0x3d	; 61
    6282:	de b7       	in	r29, 0x3e	; 62
    6284:	e9 97       	sbiw	r28, 0x39	; 57
    6286:	0f b6       	in	r0, 0x3f	; 63
    6288:	f8 94       	cli
    628a:	de bf       	out	0x3e, r29	; 62
    628c:	0f be       	out	0x3f, r0	; 63
    628e:	cd bf       	out	0x3d, r28	; 61
    6290:	89 af       	std	Y+57, r24	; 0x39
	DIO_ClearChannel(RS); //RS = 0 ===> command mode.
    6292:	8d e1       	ldi	r24, 0x1D	; 29
    6294:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
	DIO_ClearChannel(RW); //RW = 0 ===> Write Data.
    6298:	8e e1       	ldi	r24, 0x1E	; 30
    629a:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	a0 e8       	ldi	r26, 0x80	; 128
    62a4:	bf e3       	ldi	r27, 0x3F	; 63
    62a6:	8d ab       	std	Y+53, r24	; 0x35
    62a8:	9e ab       	std	Y+54, r25	; 0x36
    62aa:	af ab       	std	Y+55, r26	; 0x37
    62ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62ae:	6d a9       	ldd	r22, Y+53	; 0x35
    62b0:	7e a9       	ldd	r23, Y+54	; 0x36
    62b2:	8f a9       	ldd	r24, Y+55	; 0x37
    62b4:	98 ad       	ldd	r25, Y+56	; 0x38
    62b6:	2d ec       	ldi	r18, 0xCD	; 205
    62b8:	3c ec       	ldi	r19, 0xCC	; 204
    62ba:	4c e2       	ldi	r20, 0x2C	; 44
    62bc:	55 e4       	ldi	r21, 0x45	; 69
    62be:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    62c2:	dc 01       	movw	r26, r24
    62c4:	cb 01       	movw	r24, r22
    62c6:	89 ab       	std	Y+49, r24	; 0x31
    62c8:	9a ab       	std	Y+50, r25	; 0x32
    62ca:	ab ab       	std	Y+51, r26	; 0x33
    62cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    62ce:	69 a9       	ldd	r22, Y+49	; 0x31
    62d0:	7a a9       	ldd	r23, Y+50	; 0x32
    62d2:	8b a9       	ldd	r24, Y+51	; 0x33
    62d4:	9c a9       	ldd	r25, Y+52	; 0x34
    62d6:	20 e0       	ldi	r18, 0x00	; 0
    62d8:	30 e0       	ldi	r19, 0x00	; 0
    62da:	40 e8       	ldi	r20, 0x80	; 128
    62dc:	5f e3       	ldi	r21, 0x3F	; 63
    62de:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    62e2:	88 23       	and	r24, r24
    62e4:	2c f4       	brge	.+10     	; 0x62f0 <LCD_SendCommand+0x74>
		__ticks = 1;
    62e6:	81 e0       	ldi	r24, 0x01	; 1
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	98 ab       	std	Y+48, r25	; 0x30
    62ec:	8f a7       	std	Y+47, r24	; 0x2f
    62ee:	3f c0       	rjmp	.+126    	; 0x636e <LCD_SendCommand+0xf2>
	else if (__tmp > 65535)
    62f0:	69 a9       	ldd	r22, Y+49	; 0x31
    62f2:	7a a9       	ldd	r23, Y+50	; 0x32
    62f4:	8b a9       	ldd	r24, Y+51	; 0x33
    62f6:	9c a9       	ldd	r25, Y+52	; 0x34
    62f8:	20 e0       	ldi	r18, 0x00	; 0
    62fa:	3f ef       	ldi	r19, 0xFF	; 255
    62fc:	4f e7       	ldi	r20, 0x7F	; 127
    62fe:	57 e4       	ldi	r21, 0x47	; 71
    6300:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6304:	18 16       	cp	r1, r24
    6306:	4c f5       	brge	.+82     	; 0x635a <LCD_SendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6308:	6d a9       	ldd	r22, Y+53	; 0x35
    630a:	7e a9       	ldd	r23, Y+54	; 0x36
    630c:	8f a9       	ldd	r24, Y+55	; 0x37
    630e:	98 ad       	ldd	r25, Y+56	; 0x38
    6310:	20 e0       	ldi	r18, 0x00	; 0
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	40 e2       	ldi	r20, 0x20	; 32
    6316:	51 e4       	ldi	r21, 0x41	; 65
    6318:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    631c:	dc 01       	movw	r26, r24
    631e:	cb 01       	movw	r24, r22
    6320:	bc 01       	movw	r22, r24
    6322:	cd 01       	movw	r24, r26
    6324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6328:	dc 01       	movw	r26, r24
    632a:	cb 01       	movw	r24, r22
    632c:	98 ab       	std	Y+48, r25	; 0x30
    632e:	8f a7       	std	Y+47, r24	; 0x2f
    6330:	0f c0       	rjmp	.+30     	; 0x6350 <LCD_SendCommand+0xd4>
    6332:	84 e1       	ldi	r24, 0x14	; 20
    6334:	91 e0       	ldi	r25, 0x01	; 1
    6336:	9e a7       	std	Y+46, r25	; 0x2e
    6338:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    633a:	8d a5       	ldd	r24, Y+45	; 0x2d
    633c:	9e a5       	ldd	r25, Y+46	; 0x2e
    633e:	01 97       	sbiw	r24, 0x01	; 1
    6340:	f1 f7       	brne	.-4      	; 0x633e <LCD_SendCommand+0xc2>
    6342:	9e a7       	std	Y+46, r25	; 0x2e
    6344:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6346:	8f a5       	ldd	r24, Y+47	; 0x2f
    6348:	98 a9       	ldd	r25, Y+48	; 0x30
    634a:	01 97       	sbiw	r24, 0x01	; 1
    634c:	98 ab       	std	Y+48, r25	; 0x30
    634e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6350:	8f a5       	ldd	r24, Y+47	; 0x2f
    6352:	98 a9       	ldd	r25, Y+48	; 0x30
    6354:	00 97       	sbiw	r24, 0x00	; 0
    6356:	69 f7       	brne	.-38     	; 0x6332 <LCD_SendCommand+0xb6>
    6358:	14 c0       	rjmp	.+40     	; 0x6382 <LCD_SendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    635a:	69 a9       	ldd	r22, Y+49	; 0x31
    635c:	7a a9       	ldd	r23, Y+50	; 0x32
    635e:	8b a9       	ldd	r24, Y+51	; 0x33
    6360:	9c a9       	ldd	r25, Y+52	; 0x34
    6362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6366:	dc 01       	movw	r26, r24
    6368:	cb 01       	movw	r24, r22
    636a:	98 ab       	std	Y+48, r25	; 0x30
    636c:	8f a7       	std	Y+47, r24	; 0x2f
    636e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6370:	98 a9       	ldd	r25, Y+48	; 0x30
    6372:	9c a7       	std	Y+44, r25	; 0x2c
    6374:	8b a7       	std	Y+43, r24	; 0x2b
    6376:	8b a5       	ldd	r24, Y+43	; 0x2b
    6378:	9c a5       	ldd	r25, Y+44	; 0x2c
    637a:	01 97       	sbiw	r24, 0x01	; 1
    637c:	f1 f7       	brne	.-4      	; 0x637a <LCD_SendCommand+0xfe>
    637e:	9c a7       	std	Y+44, r25	; 0x2c
    6380:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_WriteChannel(Enable);
    6382:	8f e1       	ldi	r24, 0x1F	; 31
    6384:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
    6388:	80 e0       	ldi	r24, 0x00	; 0
    638a:	90 e0       	ldi	r25, 0x00	; 0
    638c:	a0 e8       	ldi	r26, 0x80	; 128
    638e:	bf e3       	ldi	r27, 0x3F	; 63
    6390:	8f a3       	std	Y+39, r24	; 0x27
    6392:	98 a7       	std	Y+40, r25	; 0x28
    6394:	a9 a7       	std	Y+41, r26	; 0x29
    6396:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6398:	6f a1       	ldd	r22, Y+39	; 0x27
    639a:	78 a5       	ldd	r23, Y+40	; 0x28
    639c:	89 a5       	ldd	r24, Y+41	; 0x29
    639e:	9a a5       	ldd	r25, Y+42	; 0x2a
    63a0:	2d ec       	ldi	r18, 0xCD	; 205
    63a2:	3c ec       	ldi	r19, 0xCC	; 204
    63a4:	4c e2       	ldi	r20, 0x2C	; 44
    63a6:	55 e4       	ldi	r21, 0x45	; 69
    63a8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    63ac:	dc 01       	movw	r26, r24
    63ae:	cb 01       	movw	r24, r22
    63b0:	8b a3       	std	Y+35, r24	; 0x23
    63b2:	9c a3       	std	Y+36, r25	; 0x24
    63b4:	ad a3       	std	Y+37, r26	; 0x25
    63b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    63b8:	6b a1       	ldd	r22, Y+35	; 0x23
    63ba:	7c a1       	ldd	r23, Y+36	; 0x24
    63bc:	8d a1       	ldd	r24, Y+37	; 0x25
    63be:	9e a1       	ldd	r25, Y+38	; 0x26
    63c0:	20 e0       	ldi	r18, 0x00	; 0
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	40 e8       	ldi	r20, 0x80	; 128
    63c6:	5f e3       	ldi	r21, 0x3F	; 63
    63c8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    63cc:	88 23       	and	r24, r24
    63ce:	2c f4       	brge	.+10     	; 0x63da <LCD_SendCommand+0x15e>
		__ticks = 1;
    63d0:	81 e0       	ldi	r24, 0x01	; 1
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	9a a3       	std	Y+34, r25	; 0x22
    63d6:	89 a3       	std	Y+33, r24	; 0x21
    63d8:	3f c0       	rjmp	.+126    	; 0x6458 <LCD_SendCommand+0x1dc>
	else if (__tmp > 65535)
    63da:	6b a1       	ldd	r22, Y+35	; 0x23
    63dc:	7c a1       	ldd	r23, Y+36	; 0x24
    63de:	8d a1       	ldd	r24, Y+37	; 0x25
    63e0:	9e a1       	ldd	r25, Y+38	; 0x26
    63e2:	20 e0       	ldi	r18, 0x00	; 0
    63e4:	3f ef       	ldi	r19, 0xFF	; 255
    63e6:	4f e7       	ldi	r20, 0x7F	; 127
    63e8:	57 e4       	ldi	r21, 0x47	; 71
    63ea:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    63ee:	18 16       	cp	r1, r24
    63f0:	4c f5       	brge	.+82     	; 0x6444 <LCD_SendCommand+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63f2:	6f a1       	ldd	r22, Y+39	; 0x27
    63f4:	78 a5       	ldd	r23, Y+40	; 0x28
    63f6:	89 a5       	ldd	r24, Y+41	; 0x29
    63f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    63fa:	20 e0       	ldi	r18, 0x00	; 0
    63fc:	30 e0       	ldi	r19, 0x00	; 0
    63fe:	40 e2       	ldi	r20, 0x20	; 32
    6400:	51 e4       	ldi	r21, 0x41	; 65
    6402:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6406:	dc 01       	movw	r26, r24
    6408:	cb 01       	movw	r24, r22
    640a:	bc 01       	movw	r22, r24
    640c:	cd 01       	movw	r24, r26
    640e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6412:	dc 01       	movw	r26, r24
    6414:	cb 01       	movw	r24, r22
    6416:	9a a3       	std	Y+34, r25	; 0x22
    6418:	89 a3       	std	Y+33, r24	; 0x21
    641a:	0f c0       	rjmp	.+30     	; 0x643a <LCD_SendCommand+0x1be>
    641c:	84 e1       	ldi	r24, 0x14	; 20
    641e:	91 e0       	ldi	r25, 0x01	; 1
    6420:	98 a3       	std	Y+32, r25	; 0x20
    6422:	8f 8f       	std	Y+31, r24	; 0x1f
    6424:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6426:	98 a1       	ldd	r25, Y+32	; 0x20
    6428:	01 97       	sbiw	r24, 0x01	; 1
    642a:	f1 f7       	brne	.-4      	; 0x6428 <LCD_SendCommand+0x1ac>
    642c:	98 a3       	std	Y+32, r25	; 0x20
    642e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6430:	89 a1       	ldd	r24, Y+33	; 0x21
    6432:	9a a1       	ldd	r25, Y+34	; 0x22
    6434:	01 97       	sbiw	r24, 0x01	; 1
    6436:	9a a3       	std	Y+34, r25	; 0x22
    6438:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    643a:	89 a1       	ldd	r24, Y+33	; 0x21
    643c:	9a a1       	ldd	r25, Y+34	; 0x22
    643e:	00 97       	sbiw	r24, 0x00	; 0
    6440:	69 f7       	brne	.-38     	; 0x641c <LCD_SendCommand+0x1a0>
    6442:	14 c0       	rjmp	.+40     	; 0x646c <LCD_SendCommand+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6444:	6b a1       	ldd	r22, Y+35	; 0x23
    6446:	7c a1       	ldd	r23, Y+36	; 0x24
    6448:	8d a1       	ldd	r24, Y+37	; 0x25
    644a:	9e a1       	ldd	r25, Y+38	; 0x26
    644c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6450:	dc 01       	movw	r26, r24
    6452:	cb 01       	movw	r24, r22
    6454:	9a a3       	std	Y+34, r25	; 0x22
    6456:	89 a3       	std	Y+33, r24	; 0x21
    6458:	89 a1       	ldd	r24, Y+33	; 0x21
    645a:	9a a1       	ldd	r25, Y+34	; 0x22
    645c:	9e 8f       	std	Y+30, r25	; 0x1e
    645e:	8d 8f       	std	Y+29, r24	; 0x1d
    6460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6462:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6464:	01 97       	sbiw	r24, 0x01	; 1
    6466:	f1 f7       	brne	.-4      	; 0x6464 <LCD_SendCommand+0x1e8>
    6468:	9e 8f       	std	Y+30, r25	; 0x1e
    646a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
	DIO_WritePort(DataPort, a_Command);
    646c:	99 ad       	ldd	r25, Y+57	; 0x39
    646e:	81 e0       	ldi	r24, 0x01	; 1
    6470:	69 2f       	mov	r22, r25
    6472:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <DIO_WritePort>
    6476:	80 e0       	ldi	r24, 0x00	; 0
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	a0 e8       	ldi	r26, 0x80	; 128
    647c:	bf e3       	ldi	r27, 0x3F	; 63
    647e:	89 8f       	std	Y+25, r24	; 0x19
    6480:	9a 8f       	std	Y+26, r25	; 0x1a
    6482:	ab 8f       	std	Y+27, r26	; 0x1b
    6484:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6486:	69 8d       	ldd	r22, Y+25	; 0x19
    6488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    648a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    648c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    648e:	2d ec       	ldi	r18, 0xCD	; 205
    6490:	3c ec       	ldi	r19, 0xCC	; 204
    6492:	4c e2       	ldi	r20, 0x2C	; 44
    6494:	55 e4       	ldi	r21, 0x45	; 69
    6496:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    649a:	dc 01       	movw	r26, r24
    649c:	cb 01       	movw	r24, r22
    649e:	8d 8b       	std	Y+21, r24	; 0x15
    64a0:	9e 8b       	std	Y+22, r25	; 0x16
    64a2:	af 8b       	std	Y+23, r26	; 0x17
    64a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    64a6:	6d 89       	ldd	r22, Y+21	; 0x15
    64a8:	7e 89       	ldd	r23, Y+22	; 0x16
    64aa:	8f 89       	ldd	r24, Y+23	; 0x17
    64ac:	98 8d       	ldd	r25, Y+24	; 0x18
    64ae:	20 e0       	ldi	r18, 0x00	; 0
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	40 e8       	ldi	r20, 0x80	; 128
    64b4:	5f e3       	ldi	r21, 0x3F	; 63
    64b6:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    64ba:	88 23       	and	r24, r24
    64bc:	2c f4       	brge	.+10     	; 0x64c8 <LCD_SendCommand+0x24c>
		__ticks = 1;
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	9c 8b       	std	Y+20, r25	; 0x14
    64c4:	8b 8b       	std	Y+19, r24	; 0x13
    64c6:	3f c0       	rjmp	.+126    	; 0x6546 <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    64c8:	6d 89       	ldd	r22, Y+21	; 0x15
    64ca:	7e 89       	ldd	r23, Y+22	; 0x16
    64cc:	8f 89       	ldd	r24, Y+23	; 0x17
    64ce:	98 8d       	ldd	r25, Y+24	; 0x18
    64d0:	20 e0       	ldi	r18, 0x00	; 0
    64d2:	3f ef       	ldi	r19, 0xFF	; 255
    64d4:	4f e7       	ldi	r20, 0x7F	; 127
    64d6:	57 e4       	ldi	r21, 0x47	; 71
    64d8:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    64dc:	18 16       	cp	r1, r24
    64de:	4c f5       	brge	.+82     	; 0x6532 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64e0:	69 8d       	ldd	r22, Y+25	; 0x19
    64e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64e8:	20 e0       	ldi	r18, 0x00	; 0
    64ea:	30 e0       	ldi	r19, 0x00	; 0
    64ec:	40 e2       	ldi	r20, 0x20	; 32
    64ee:	51 e4       	ldi	r21, 0x41	; 65
    64f0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    64f4:	dc 01       	movw	r26, r24
    64f6:	cb 01       	movw	r24, r22
    64f8:	bc 01       	movw	r22, r24
    64fa:	cd 01       	movw	r24, r26
    64fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6500:	dc 01       	movw	r26, r24
    6502:	cb 01       	movw	r24, r22
    6504:	9c 8b       	std	Y+20, r25	; 0x14
    6506:	8b 8b       	std	Y+19, r24	; 0x13
    6508:	0f c0       	rjmp	.+30     	; 0x6528 <LCD_SendCommand+0x2ac>
    650a:	84 e1       	ldi	r24, 0x14	; 20
    650c:	91 e0       	ldi	r25, 0x01	; 1
    650e:	9a 8b       	std	Y+18, r25	; 0x12
    6510:	89 8b       	std	Y+17, r24	; 0x11
    6512:	89 89       	ldd	r24, Y+17	; 0x11
    6514:	9a 89       	ldd	r25, Y+18	; 0x12
    6516:	01 97       	sbiw	r24, 0x01	; 1
    6518:	f1 f7       	brne	.-4      	; 0x6516 <LCD_SendCommand+0x29a>
    651a:	9a 8b       	std	Y+18, r25	; 0x12
    651c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    651e:	8b 89       	ldd	r24, Y+19	; 0x13
    6520:	9c 89       	ldd	r25, Y+20	; 0x14
    6522:	01 97       	sbiw	r24, 0x01	; 1
    6524:	9c 8b       	std	Y+20, r25	; 0x14
    6526:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6528:	8b 89       	ldd	r24, Y+19	; 0x13
    652a:	9c 89       	ldd	r25, Y+20	; 0x14
    652c:	00 97       	sbiw	r24, 0x00	; 0
    652e:	69 f7       	brne	.-38     	; 0x650a <LCD_SendCommand+0x28e>
    6530:	14 c0       	rjmp	.+40     	; 0x655a <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6532:	6d 89       	ldd	r22, Y+21	; 0x15
    6534:	7e 89       	ldd	r23, Y+22	; 0x16
    6536:	8f 89       	ldd	r24, Y+23	; 0x17
    6538:	98 8d       	ldd	r25, Y+24	; 0x18
    653a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    653e:	dc 01       	movw	r26, r24
    6540:	cb 01       	movw	r24, r22
    6542:	9c 8b       	std	Y+20, r25	; 0x14
    6544:	8b 8b       	std	Y+19, r24	; 0x13
    6546:	8b 89       	ldd	r24, Y+19	; 0x13
    6548:	9c 89       	ldd	r25, Y+20	; 0x14
    654a:	98 8b       	std	Y+16, r25	; 0x10
    654c:	8f 87       	std	Y+15, r24	; 0x0f
    654e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6550:	98 89       	ldd	r25, Y+16	; 0x10
    6552:	01 97       	sbiw	r24, 0x01	; 1
    6554:	f1 f7       	brne	.-4      	; 0x6552 <LCD_SendCommand+0x2d6>
    6556:	98 8b       	std	Y+16, r25	; 0x10
    6558:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_ClearChannel(Enable);
    655a:	8f e1       	ldi	r24, 0x1F	; 31
    655c:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    6560:	80 e0       	ldi	r24, 0x00	; 0
    6562:	90 e0       	ldi	r25, 0x00	; 0
    6564:	a0 e8       	ldi	r26, 0x80	; 128
    6566:	bf e3       	ldi	r27, 0x3F	; 63
    6568:	8b 87       	std	Y+11, r24	; 0x0b
    656a:	9c 87       	std	Y+12, r25	; 0x0c
    656c:	ad 87       	std	Y+13, r26	; 0x0d
    656e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6570:	6b 85       	ldd	r22, Y+11	; 0x0b
    6572:	7c 85       	ldd	r23, Y+12	; 0x0c
    6574:	8d 85       	ldd	r24, Y+13	; 0x0d
    6576:	9e 85       	ldd	r25, Y+14	; 0x0e
    6578:	2d ec       	ldi	r18, 0xCD	; 205
    657a:	3c ec       	ldi	r19, 0xCC	; 204
    657c:	4c e2       	ldi	r20, 0x2C	; 44
    657e:	55 e4       	ldi	r21, 0x45	; 69
    6580:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6584:	dc 01       	movw	r26, r24
    6586:	cb 01       	movw	r24, r22
    6588:	8f 83       	std	Y+7, r24	; 0x07
    658a:	98 87       	std	Y+8, r25	; 0x08
    658c:	a9 87       	std	Y+9, r26	; 0x09
    658e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6590:	6f 81       	ldd	r22, Y+7	; 0x07
    6592:	78 85       	ldd	r23, Y+8	; 0x08
    6594:	89 85       	ldd	r24, Y+9	; 0x09
    6596:	9a 85       	ldd	r25, Y+10	; 0x0a
    6598:	20 e0       	ldi	r18, 0x00	; 0
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	40 e8       	ldi	r20, 0x80	; 128
    659e:	5f e3       	ldi	r21, 0x3F	; 63
    65a0:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    65a4:	88 23       	and	r24, r24
    65a6:	2c f4       	brge	.+10     	; 0x65b2 <LCD_SendCommand+0x336>
		__ticks = 1;
    65a8:	81 e0       	ldi	r24, 0x01	; 1
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	9e 83       	std	Y+6, r25	; 0x06
    65ae:	8d 83       	std	Y+5, r24	; 0x05
    65b0:	3f c0       	rjmp	.+126    	; 0x6630 <LCD_SendCommand+0x3b4>
	else if (__tmp > 65535)
    65b2:	6f 81       	ldd	r22, Y+7	; 0x07
    65b4:	78 85       	ldd	r23, Y+8	; 0x08
    65b6:	89 85       	ldd	r24, Y+9	; 0x09
    65b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    65ba:	20 e0       	ldi	r18, 0x00	; 0
    65bc:	3f ef       	ldi	r19, 0xFF	; 255
    65be:	4f e7       	ldi	r20, 0x7F	; 127
    65c0:	57 e4       	ldi	r21, 0x47	; 71
    65c2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    65c6:	18 16       	cp	r1, r24
    65c8:	4c f5       	brge	.+82     	; 0x661c <LCD_SendCommand+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    65cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    65ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    65d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    65d2:	20 e0       	ldi	r18, 0x00	; 0
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	40 e2       	ldi	r20, 0x20	; 32
    65d8:	51 e4       	ldi	r21, 0x41	; 65
    65da:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    65de:	dc 01       	movw	r26, r24
    65e0:	cb 01       	movw	r24, r22
    65e2:	bc 01       	movw	r22, r24
    65e4:	cd 01       	movw	r24, r26
    65e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65ea:	dc 01       	movw	r26, r24
    65ec:	cb 01       	movw	r24, r22
    65ee:	9e 83       	std	Y+6, r25	; 0x06
    65f0:	8d 83       	std	Y+5, r24	; 0x05
    65f2:	0f c0       	rjmp	.+30     	; 0x6612 <LCD_SendCommand+0x396>
    65f4:	84 e1       	ldi	r24, 0x14	; 20
    65f6:	91 e0       	ldi	r25, 0x01	; 1
    65f8:	9c 83       	std	Y+4, r25	; 0x04
    65fa:	8b 83       	std	Y+3, r24	; 0x03
    65fc:	8b 81       	ldd	r24, Y+3	; 0x03
    65fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6600:	01 97       	sbiw	r24, 0x01	; 1
    6602:	f1 f7       	brne	.-4      	; 0x6600 <LCD_SendCommand+0x384>
    6604:	9c 83       	std	Y+4, r25	; 0x04
    6606:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6608:	8d 81       	ldd	r24, Y+5	; 0x05
    660a:	9e 81       	ldd	r25, Y+6	; 0x06
    660c:	01 97       	sbiw	r24, 0x01	; 1
    660e:	9e 83       	std	Y+6, r25	; 0x06
    6610:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6612:	8d 81       	ldd	r24, Y+5	; 0x05
    6614:	9e 81       	ldd	r25, Y+6	; 0x06
    6616:	00 97       	sbiw	r24, 0x00	; 0
    6618:	69 f7       	brne	.-38     	; 0x65f4 <LCD_SendCommand+0x378>
    661a:	14 c0       	rjmp	.+40     	; 0x6644 <LCD_SendCommand+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    661c:	6f 81       	ldd	r22, Y+7	; 0x07
    661e:	78 85       	ldd	r23, Y+8	; 0x08
    6620:	89 85       	ldd	r24, Y+9	; 0x09
    6622:	9a 85       	ldd	r25, Y+10	; 0x0a
    6624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6628:	dc 01       	movw	r26, r24
    662a:	cb 01       	movw	r24, r22
    662c:	9e 83       	std	Y+6, r25	; 0x06
    662e:	8d 83       	std	Y+5, r24	; 0x05
    6630:	8d 81       	ldd	r24, Y+5	; 0x05
    6632:	9e 81       	ldd	r25, Y+6	; 0x06
    6634:	9a 83       	std	Y+2, r25	; 0x02
    6636:	89 83       	std	Y+1, r24	; 0x01
    6638:	89 81       	ldd	r24, Y+1	; 0x01
    663a:	9a 81       	ldd	r25, Y+2	; 0x02
    663c:	01 97       	sbiw	r24, 0x01	; 1
    663e:	f1 f7       	brne	.-4      	; 0x663c <LCD_SendCommand+0x3c0>
    6640:	9a 83       	std	Y+2, r25	; 0x02
    6642:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    6644:	e9 96       	adiw	r28, 0x39	; 57
    6646:	0f b6       	in	r0, 0x3f	; 63
    6648:	f8 94       	cli
    664a:	de bf       	out	0x3e, r29	; 62
    664c:	0f be       	out	0x3f, r0	; 63
    664e:	cd bf       	out	0x3d, r28	; 61
    6650:	cf 91       	pop	r28
    6652:	df 91       	pop	r29
    6654:	08 95       	ret

00006656 <LCD_SendCharacter>:

void LCD_SendCharacter(volatile const uint8 a_Character){
    6656:	df 93       	push	r29
    6658:	cf 93       	push	r28
    665a:	cd b7       	in	r28, 0x3d	; 61
    665c:	de b7       	in	r29, 0x3e	; 62
    665e:	e9 97       	sbiw	r28, 0x39	; 57
    6660:	0f b6       	in	r0, 0x3f	; 63
    6662:	f8 94       	cli
    6664:	de bf       	out	0x3e, r29	; 62
    6666:	0f be       	out	0x3f, r0	; 63
    6668:	cd bf       	out	0x3d, r28	; 61
    666a:	89 af       	std	Y+57, r24	; 0x39
	DIO_WriteChannel(RS); //RS = 1 ===> data mode.
    666c:	8d e1       	ldi	r24, 0x1D	; 29
    666e:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
	DIO_ClearChannel(RW); //RW = 0 ===> Write Data.
    6672:	8e e1       	ldi	r24, 0x1E	; 30
    6674:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    6678:	80 e0       	ldi	r24, 0x00	; 0
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	a0 e8       	ldi	r26, 0x80	; 128
    667e:	bf e3       	ldi	r27, 0x3F	; 63
    6680:	8d ab       	std	Y+53, r24	; 0x35
    6682:	9e ab       	std	Y+54, r25	; 0x36
    6684:	af ab       	std	Y+55, r26	; 0x37
    6686:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6688:	6d a9       	ldd	r22, Y+53	; 0x35
    668a:	7e a9       	ldd	r23, Y+54	; 0x36
    668c:	8f a9       	ldd	r24, Y+55	; 0x37
    668e:	98 ad       	ldd	r25, Y+56	; 0x38
    6690:	2d ec       	ldi	r18, 0xCD	; 205
    6692:	3c ec       	ldi	r19, 0xCC	; 204
    6694:	4c e2       	ldi	r20, 0x2C	; 44
    6696:	55 e4       	ldi	r21, 0x45	; 69
    6698:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    669c:	dc 01       	movw	r26, r24
    669e:	cb 01       	movw	r24, r22
    66a0:	89 ab       	std	Y+49, r24	; 0x31
    66a2:	9a ab       	std	Y+50, r25	; 0x32
    66a4:	ab ab       	std	Y+51, r26	; 0x33
    66a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    66a8:	69 a9       	ldd	r22, Y+49	; 0x31
    66aa:	7a a9       	ldd	r23, Y+50	; 0x32
    66ac:	8b a9       	ldd	r24, Y+51	; 0x33
    66ae:	9c a9       	ldd	r25, Y+52	; 0x34
    66b0:	20 e0       	ldi	r18, 0x00	; 0
    66b2:	30 e0       	ldi	r19, 0x00	; 0
    66b4:	40 e8       	ldi	r20, 0x80	; 128
    66b6:	5f e3       	ldi	r21, 0x3F	; 63
    66b8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    66bc:	88 23       	and	r24, r24
    66be:	2c f4       	brge	.+10     	; 0x66ca <LCD_SendCharacter+0x74>
		__ticks = 1;
    66c0:	81 e0       	ldi	r24, 0x01	; 1
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	98 ab       	std	Y+48, r25	; 0x30
    66c6:	8f a7       	std	Y+47, r24	; 0x2f
    66c8:	3f c0       	rjmp	.+126    	; 0x6748 <LCD_SendCharacter+0xf2>
	else if (__tmp > 65535)
    66ca:	69 a9       	ldd	r22, Y+49	; 0x31
    66cc:	7a a9       	ldd	r23, Y+50	; 0x32
    66ce:	8b a9       	ldd	r24, Y+51	; 0x33
    66d0:	9c a9       	ldd	r25, Y+52	; 0x34
    66d2:	20 e0       	ldi	r18, 0x00	; 0
    66d4:	3f ef       	ldi	r19, 0xFF	; 255
    66d6:	4f e7       	ldi	r20, 0x7F	; 127
    66d8:	57 e4       	ldi	r21, 0x47	; 71
    66da:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    66de:	18 16       	cp	r1, r24
    66e0:	4c f5       	brge	.+82     	; 0x6734 <LCD_SendCharacter+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66e2:	6d a9       	ldd	r22, Y+53	; 0x35
    66e4:	7e a9       	ldd	r23, Y+54	; 0x36
    66e6:	8f a9       	ldd	r24, Y+55	; 0x37
    66e8:	98 ad       	ldd	r25, Y+56	; 0x38
    66ea:	20 e0       	ldi	r18, 0x00	; 0
    66ec:	30 e0       	ldi	r19, 0x00	; 0
    66ee:	40 e2       	ldi	r20, 0x20	; 32
    66f0:	51 e4       	ldi	r21, 0x41	; 65
    66f2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    66f6:	dc 01       	movw	r26, r24
    66f8:	cb 01       	movw	r24, r22
    66fa:	bc 01       	movw	r22, r24
    66fc:	cd 01       	movw	r24, r26
    66fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6702:	dc 01       	movw	r26, r24
    6704:	cb 01       	movw	r24, r22
    6706:	98 ab       	std	Y+48, r25	; 0x30
    6708:	8f a7       	std	Y+47, r24	; 0x2f
    670a:	0f c0       	rjmp	.+30     	; 0x672a <LCD_SendCharacter+0xd4>
    670c:	84 e1       	ldi	r24, 0x14	; 20
    670e:	91 e0       	ldi	r25, 0x01	; 1
    6710:	9e a7       	std	Y+46, r25	; 0x2e
    6712:	8d a7       	std	Y+45, r24	; 0x2d
    6714:	8d a5       	ldd	r24, Y+45	; 0x2d
    6716:	9e a5       	ldd	r25, Y+46	; 0x2e
    6718:	01 97       	sbiw	r24, 0x01	; 1
    671a:	f1 f7       	brne	.-4      	; 0x6718 <LCD_SendCharacter+0xc2>
    671c:	9e a7       	std	Y+46, r25	; 0x2e
    671e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6720:	8f a5       	ldd	r24, Y+47	; 0x2f
    6722:	98 a9       	ldd	r25, Y+48	; 0x30
    6724:	01 97       	sbiw	r24, 0x01	; 1
    6726:	98 ab       	std	Y+48, r25	; 0x30
    6728:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    672a:	8f a5       	ldd	r24, Y+47	; 0x2f
    672c:	98 a9       	ldd	r25, Y+48	; 0x30
    672e:	00 97       	sbiw	r24, 0x00	; 0
    6730:	69 f7       	brne	.-38     	; 0x670c <LCD_SendCharacter+0xb6>
    6732:	14 c0       	rjmp	.+40     	; 0x675c <LCD_SendCharacter+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6734:	69 a9       	ldd	r22, Y+49	; 0x31
    6736:	7a a9       	ldd	r23, Y+50	; 0x32
    6738:	8b a9       	ldd	r24, Y+51	; 0x33
    673a:	9c a9       	ldd	r25, Y+52	; 0x34
    673c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6740:	dc 01       	movw	r26, r24
    6742:	cb 01       	movw	r24, r22
    6744:	98 ab       	std	Y+48, r25	; 0x30
    6746:	8f a7       	std	Y+47, r24	; 0x2f
    6748:	8f a5       	ldd	r24, Y+47	; 0x2f
    674a:	98 a9       	ldd	r25, Y+48	; 0x30
    674c:	9c a7       	std	Y+44, r25	; 0x2c
    674e:	8b a7       	std	Y+43, r24	; 0x2b
    6750:	8b a5       	ldd	r24, Y+43	; 0x2b
    6752:	9c a5       	ldd	r25, Y+44	; 0x2c
    6754:	01 97       	sbiw	r24, 0x01	; 1
    6756:	f1 f7       	brne	.-4      	; 0x6754 <LCD_SendCharacter+0xfe>
    6758:	9c a7       	std	Y+44, r25	; 0x2c
    675a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_WriteChannel(Enable);
    675c:	8f e1       	ldi	r24, 0x1F	; 31
    675e:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <DIO_WriteChannel>
    6762:	80 e0       	ldi	r24, 0x00	; 0
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	a0 e8       	ldi	r26, 0x80	; 128
    6768:	bf e3       	ldi	r27, 0x3F	; 63
    676a:	8f a3       	std	Y+39, r24	; 0x27
    676c:	98 a7       	std	Y+40, r25	; 0x28
    676e:	a9 a7       	std	Y+41, r26	; 0x29
    6770:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6772:	6f a1       	ldd	r22, Y+39	; 0x27
    6774:	78 a5       	ldd	r23, Y+40	; 0x28
    6776:	89 a5       	ldd	r24, Y+41	; 0x29
    6778:	9a a5       	ldd	r25, Y+42	; 0x2a
    677a:	2d ec       	ldi	r18, 0xCD	; 205
    677c:	3c ec       	ldi	r19, 0xCC	; 204
    677e:	4c e2       	ldi	r20, 0x2C	; 44
    6780:	55 e4       	ldi	r21, 0x45	; 69
    6782:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6786:	dc 01       	movw	r26, r24
    6788:	cb 01       	movw	r24, r22
    678a:	8b a3       	std	Y+35, r24	; 0x23
    678c:	9c a3       	std	Y+36, r25	; 0x24
    678e:	ad a3       	std	Y+37, r26	; 0x25
    6790:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6792:	6b a1       	ldd	r22, Y+35	; 0x23
    6794:	7c a1       	ldd	r23, Y+36	; 0x24
    6796:	8d a1       	ldd	r24, Y+37	; 0x25
    6798:	9e a1       	ldd	r25, Y+38	; 0x26
    679a:	20 e0       	ldi	r18, 0x00	; 0
    679c:	30 e0       	ldi	r19, 0x00	; 0
    679e:	40 e8       	ldi	r20, 0x80	; 128
    67a0:	5f e3       	ldi	r21, 0x3F	; 63
    67a2:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    67a6:	88 23       	and	r24, r24
    67a8:	2c f4       	brge	.+10     	; 0x67b4 <LCD_SendCharacter+0x15e>
		__ticks = 1;
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	9a a3       	std	Y+34, r25	; 0x22
    67b0:	89 a3       	std	Y+33, r24	; 0x21
    67b2:	3f c0       	rjmp	.+126    	; 0x6832 <LCD_SendCharacter+0x1dc>
	else if (__tmp > 65535)
    67b4:	6b a1       	ldd	r22, Y+35	; 0x23
    67b6:	7c a1       	ldd	r23, Y+36	; 0x24
    67b8:	8d a1       	ldd	r24, Y+37	; 0x25
    67ba:	9e a1       	ldd	r25, Y+38	; 0x26
    67bc:	20 e0       	ldi	r18, 0x00	; 0
    67be:	3f ef       	ldi	r19, 0xFF	; 255
    67c0:	4f e7       	ldi	r20, 0x7F	; 127
    67c2:	57 e4       	ldi	r21, 0x47	; 71
    67c4:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    67c8:	18 16       	cp	r1, r24
    67ca:	4c f5       	brge	.+82     	; 0x681e <LCD_SendCharacter+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67cc:	6f a1       	ldd	r22, Y+39	; 0x27
    67ce:	78 a5       	ldd	r23, Y+40	; 0x28
    67d0:	89 a5       	ldd	r24, Y+41	; 0x29
    67d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    67d4:	20 e0       	ldi	r18, 0x00	; 0
    67d6:	30 e0       	ldi	r19, 0x00	; 0
    67d8:	40 e2       	ldi	r20, 0x20	; 32
    67da:	51 e4       	ldi	r21, 0x41	; 65
    67dc:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    67e0:	dc 01       	movw	r26, r24
    67e2:	cb 01       	movw	r24, r22
    67e4:	bc 01       	movw	r22, r24
    67e6:	cd 01       	movw	r24, r26
    67e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67ec:	dc 01       	movw	r26, r24
    67ee:	cb 01       	movw	r24, r22
    67f0:	9a a3       	std	Y+34, r25	; 0x22
    67f2:	89 a3       	std	Y+33, r24	; 0x21
    67f4:	0f c0       	rjmp	.+30     	; 0x6814 <LCD_SendCharacter+0x1be>
    67f6:	84 e1       	ldi	r24, 0x14	; 20
    67f8:	91 e0       	ldi	r25, 0x01	; 1
    67fa:	98 a3       	std	Y+32, r25	; 0x20
    67fc:	8f 8f       	std	Y+31, r24	; 0x1f
    67fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6800:	98 a1       	ldd	r25, Y+32	; 0x20
    6802:	01 97       	sbiw	r24, 0x01	; 1
    6804:	f1 f7       	brne	.-4      	; 0x6802 <LCD_SendCharacter+0x1ac>
    6806:	98 a3       	std	Y+32, r25	; 0x20
    6808:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    680a:	89 a1       	ldd	r24, Y+33	; 0x21
    680c:	9a a1       	ldd	r25, Y+34	; 0x22
    680e:	01 97       	sbiw	r24, 0x01	; 1
    6810:	9a a3       	std	Y+34, r25	; 0x22
    6812:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6814:	89 a1       	ldd	r24, Y+33	; 0x21
    6816:	9a a1       	ldd	r25, Y+34	; 0x22
    6818:	00 97       	sbiw	r24, 0x00	; 0
    681a:	69 f7       	brne	.-38     	; 0x67f6 <LCD_SendCharacter+0x1a0>
    681c:	14 c0       	rjmp	.+40     	; 0x6846 <LCD_SendCharacter+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    681e:	6b a1       	ldd	r22, Y+35	; 0x23
    6820:	7c a1       	ldd	r23, Y+36	; 0x24
    6822:	8d a1       	ldd	r24, Y+37	; 0x25
    6824:	9e a1       	ldd	r25, Y+38	; 0x26
    6826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    682a:	dc 01       	movw	r26, r24
    682c:	cb 01       	movw	r24, r22
    682e:	9a a3       	std	Y+34, r25	; 0x22
    6830:	89 a3       	std	Y+33, r24	; 0x21
    6832:	89 a1       	ldd	r24, Y+33	; 0x21
    6834:	9a a1       	ldd	r25, Y+34	; 0x22
    6836:	9e 8f       	std	Y+30, r25	; 0x1e
    6838:	8d 8f       	std	Y+29, r24	; 0x1d
    683a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    683c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    683e:	01 97       	sbiw	r24, 0x01	; 1
    6840:	f1 f7       	brne	.-4      	; 0x683e <LCD_SendCharacter+0x1e8>
    6842:	9e 8f       	std	Y+30, r25	; 0x1e
    6844:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
	DIO_WritePort(DataPort, a_Character);
    6846:	99 ad       	ldd	r25, Y+57	; 0x39
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	69 2f       	mov	r22, r25
    684c:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <DIO_WritePort>
    6850:	80 e0       	ldi	r24, 0x00	; 0
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	a0 e8       	ldi	r26, 0x80	; 128
    6856:	bf e3       	ldi	r27, 0x3F	; 63
    6858:	89 8f       	std	Y+25, r24	; 0x19
    685a:	9a 8f       	std	Y+26, r25	; 0x1a
    685c:	ab 8f       	std	Y+27, r26	; 0x1b
    685e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6860:	69 8d       	ldd	r22, Y+25	; 0x19
    6862:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6866:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6868:	2d ec       	ldi	r18, 0xCD	; 205
    686a:	3c ec       	ldi	r19, 0xCC	; 204
    686c:	4c e2       	ldi	r20, 0x2C	; 44
    686e:	55 e4       	ldi	r21, 0x45	; 69
    6870:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6874:	dc 01       	movw	r26, r24
    6876:	cb 01       	movw	r24, r22
    6878:	8d 8b       	std	Y+21, r24	; 0x15
    687a:	9e 8b       	std	Y+22, r25	; 0x16
    687c:	af 8b       	std	Y+23, r26	; 0x17
    687e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6880:	6d 89       	ldd	r22, Y+21	; 0x15
    6882:	7e 89       	ldd	r23, Y+22	; 0x16
    6884:	8f 89       	ldd	r24, Y+23	; 0x17
    6886:	98 8d       	ldd	r25, Y+24	; 0x18
    6888:	20 e0       	ldi	r18, 0x00	; 0
    688a:	30 e0       	ldi	r19, 0x00	; 0
    688c:	40 e8       	ldi	r20, 0x80	; 128
    688e:	5f e3       	ldi	r21, 0x3F	; 63
    6890:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6894:	88 23       	and	r24, r24
    6896:	2c f4       	brge	.+10     	; 0x68a2 <LCD_SendCharacter+0x24c>
		__ticks = 1;
    6898:	81 e0       	ldi	r24, 0x01	; 1
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	9c 8b       	std	Y+20, r25	; 0x14
    689e:	8b 8b       	std	Y+19, r24	; 0x13
    68a0:	3f c0       	rjmp	.+126    	; 0x6920 <LCD_SendCharacter+0x2ca>
	else if (__tmp > 65535)
    68a2:	6d 89       	ldd	r22, Y+21	; 0x15
    68a4:	7e 89       	ldd	r23, Y+22	; 0x16
    68a6:	8f 89       	ldd	r24, Y+23	; 0x17
    68a8:	98 8d       	ldd	r25, Y+24	; 0x18
    68aa:	20 e0       	ldi	r18, 0x00	; 0
    68ac:	3f ef       	ldi	r19, 0xFF	; 255
    68ae:	4f e7       	ldi	r20, 0x7F	; 127
    68b0:	57 e4       	ldi	r21, 0x47	; 71
    68b2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    68b6:	18 16       	cp	r1, r24
    68b8:	4c f5       	brge	.+82     	; 0x690c <LCD_SendCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68ba:	69 8d       	ldd	r22, Y+25	; 0x19
    68bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    68be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    68c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    68c2:	20 e0       	ldi	r18, 0x00	; 0
    68c4:	30 e0       	ldi	r19, 0x00	; 0
    68c6:	40 e2       	ldi	r20, 0x20	; 32
    68c8:	51 e4       	ldi	r21, 0x41	; 65
    68ca:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    68ce:	dc 01       	movw	r26, r24
    68d0:	cb 01       	movw	r24, r22
    68d2:	bc 01       	movw	r22, r24
    68d4:	cd 01       	movw	r24, r26
    68d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68da:	dc 01       	movw	r26, r24
    68dc:	cb 01       	movw	r24, r22
    68de:	9c 8b       	std	Y+20, r25	; 0x14
    68e0:	8b 8b       	std	Y+19, r24	; 0x13
    68e2:	0f c0       	rjmp	.+30     	; 0x6902 <LCD_SendCharacter+0x2ac>
    68e4:	84 e1       	ldi	r24, 0x14	; 20
    68e6:	91 e0       	ldi	r25, 0x01	; 1
    68e8:	9a 8b       	std	Y+18, r25	; 0x12
    68ea:	89 8b       	std	Y+17, r24	; 0x11
    68ec:	89 89       	ldd	r24, Y+17	; 0x11
    68ee:	9a 89       	ldd	r25, Y+18	; 0x12
    68f0:	01 97       	sbiw	r24, 0x01	; 1
    68f2:	f1 f7       	brne	.-4      	; 0x68f0 <LCD_SendCharacter+0x29a>
    68f4:	9a 8b       	std	Y+18, r25	; 0x12
    68f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68f8:	8b 89       	ldd	r24, Y+19	; 0x13
    68fa:	9c 89       	ldd	r25, Y+20	; 0x14
    68fc:	01 97       	sbiw	r24, 0x01	; 1
    68fe:	9c 8b       	std	Y+20, r25	; 0x14
    6900:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6902:	8b 89       	ldd	r24, Y+19	; 0x13
    6904:	9c 89       	ldd	r25, Y+20	; 0x14
    6906:	00 97       	sbiw	r24, 0x00	; 0
    6908:	69 f7       	brne	.-38     	; 0x68e4 <LCD_SendCharacter+0x28e>
    690a:	14 c0       	rjmp	.+40     	; 0x6934 <LCD_SendCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    690c:	6d 89       	ldd	r22, Y+21	; 0x15
    690e:	7e 89       	ldd	r23, Y+22	; 0x16
    6910:	8f 89       	ldd	r24, Y+23	; 0x17
    6912:	98 8d       	ldd	r25, Y+24	; 0x18
    6914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6918:	dc 01       	movw	r26, r24
    691a:	cb 01       	movw	r24, r22
    691c:	9c 8b       	std	Y+20, r25	; 0x14
    691e:	8b 8b       	std	Y+19, r24	; 0x13
    6920:	8b 89       	ldd	r24, Y+19	; 0x13
    6922:	9c 89       	ldd	r25, Y+20	; 0x14
    6924:	98 8b       	std	Y+16, r25	; 0x10
    6926:	8f 87       	std	Y+15, r24	; 0x0f
    6928:	8f 85       	ldd	r24, Y+15	; 0x0f
    692a:	98 89       	ldd	r25, Y+16	; 0x10
    692c:	01 97       	sbiw	r24, 0x01	; 1
    692e:	f1 f7       	brne	.-4      	; 0x692c <LCD_SendCharacter+0x2d6>
    6930:	98 8b       	std	Y+16, r25	; 0x10
    6932:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_ClearChannel(Enable);
    6934:	8f e1       	ldi	r24, 0x1F	; 31
    6936:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <DIO_ClearChannel>
    693a:	80 e0       	ldi	r24, 0x00	; 0
    693c:	90 e0       	ldi	r25, 0x00	; 0
    693e:	a0 e8       	ldi	r26, 0x80	; 128
    6940:	bf e3       	ldi	r27, 0x3F	; 63
    6942:	8b 87       	std	Y+11, r24	; 0x0b
    6944:	9c 87       	std	Y+12, r25	; 0x0c
    6946:	ad 87       	std	Y+13, r26	; 0x0d
    6948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    694a:	6b 85       	ldd	r22, Y+11	; 0x0b
    694c:	7c 85       	ldd	r23, Y+12	; 0x0c
    694e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6950:	9e 85       	ldd	r25, Y+14	; 0x0e
    6952:	2d ec       	ldi	r18, 0xCD	; 205
    6954:	3c ec       	ldi	r19, 0xCC	; 204
    6956:	4c e2       	ldi	r20, 0x2C	; 44
    6958:	55 e4       	ldi	r21, 0x45	; 69
    695a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    695e:	dc 01       	movw	r26, r24
    6960:	cb 01       	movw	r24, r22
    6962:	8f 83       	std	Y+7, r24	; 0x07
    6964:	98 87       	std	Y+8, r25	; 0x08
    6966:	a9 87       	std	Y+9, r26	; 0x09
    6968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    696a:	6f 81       	ldd	r22, Y+7	; 0x07
    696c:	78 85       	ldd	r23, Y+8	; 0x08
    696e:	89 85       	ldd	r24, Y+9	; 0x09
    6970:	9a 85       	ldd	r25, Y+10	; 0x0a
    6972:	20 e0       	ldi	r18, 0x00	; 0
    6974:	30 e0       	ldi	r19, 0x00	; 0
    6976:	40 e8       	ldi	r20, 0x80	; 128
    6978:	5f e3       	ldi	r21, 0x3F	; 63
    697a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    697e:	88 23       	and	r24, r24
    6980:	2c f4       	brge	.+10     	; 0x698c <LCD_SendCharacter+0x336>
		__ticks = 1;
    6982:	81 e0       	ldi	r24, 0x01	; 1
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	9e 83       	std	Y+6, r25	; 0x06
    6988:	8d 83       	std	Y+5, r24	; 0x05
    698a:	3f c0       	rjmp	.+126    	; 0x6a0a <LCD_SendCharacter+0x3b4>
	else if (__tmp > 65535)
    698c:	6f 81       	ldd	r22, Y+7	; 0x07
    698e:	78 85       	ldd	r23, Y+8	; 0x08
    6990:	89 85       	ldd	r24, Y+9	; 0x09
    6992:	9a 85       	ldd	r25, Y+10	; 0x0a
    6994:	20 e0       	ldi	r18, 0x00	; 0
    6996:	3f ef       	ldi	r19, 0xFF	; 255
    6998:	4f e7       	ldi	r20, 0x7F	; 127
    699a:	57 e4       	ldi	r21, 0x47	; 71
    699c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    69a0:	18 16       	cp	r1, r24
    69a2:	4c f5       	brge	.+82     	; 0x69f6 <LCD_SendCharacter+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    69a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    69a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    69aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    69ac:	20 e0       	ldi	r18, 0x00	; 0
    69ae:	30 e0       	ldi	r19, 0x00	; 0
    69b0:	40 e2       	ldi	r20, 0x20	; 32
    69b2:	51 e4       	ldi	r21, 0x41	; 65
    69b4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    69b8:	dc 01       	movw	r26, r24
    69ba:	cb 01       	movw	r24, r22
    69bc:	bc 01       	movw	r22, r24
    69be:	cd 01       	movw	r24, r26
    69c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69c4:	dc 01       	movw	r26, r24
    69c6:	cb 01       	movw	r24, r22
    69c8:	9e 83       	std	Y+6, r25	; 0x06
    69ca:	8d 83       	std	Y+5, r24	; 0x05
    69cc:	0f c0       	rjmp	.+30     	; 0x69ec <LCD_SendCharacter+0x396>
    69ce:	84 e1       	ldi	r24, 0x14	; 20
    69d0:	91 e0       	ldi	r25, 0x01	; 1
    69d2:	9c 83       	std	Y+4, r25	; 0x04
    69d4:	8b 83       	std	Y+3, r24	; 0x03
    69d6:	8b 81       	ldd	r24, Y+3	; 0x03
    69d8:	9c 81       	ldd	r25, Y+4	; 0x04
    69da:	01 97       	sbiw	r24, 0x01	; 1
    69dc:	f1 f7       	brne	.-4      	; 0x69da <LCD_SendCharacter+0x384>
    69de:	9c 83       	std	Y+4, r25	; 0x04
    69e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69e2:	8d 81       	ldd	r24, Y+5	; 0x05
    69e4:	9e 81       	ldd	r25, Y+6	; 0x06
    69e6:	01 97       	sbiw	r24, 0x01	; 1
    69e8:	9e 83       	std	Y+6, r25	; 0x06
    69ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69ec:	8d 81       	ldd	r24, Y+5	; 0x05
    69ee:	9e 81       	ldd	r25, Y+6	; 0x06
    69f0:	00 97       	sbiw	r24, 0x00	; 0
    69f2:	69 f7       	brne	.-38     	; 0x69ce <LCD_SendCharacter+0x378>
    69f4:	14 c0       	rjmp	.+40     	; 0x6a1e <LCD_SendCharacter+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69f6:	6f 81       	ldd	r22, Y+7	; 0x07
    69f8:	78 85       	ldd	r23, Y+8	; 0x08
    69fa:	89 85       	ldd	r24, Y+9	; 0x09
    69fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    69fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a02:	dc 01       	movw	r26, r24
    6a04:	cb 01       	movw	r24, r22
    6a06:	9e 83       	std	Y+6, r25	; 0x06
    6a08:	8d 83       	std	Y+5, r24	; 0x05
    6a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6a0e:	9a 83       	std	Y+2, r25	; 0x02
    6a10:	89 83       	std	Y+1, r24	; 0x01
    6a12:	89 81       	ldd	r24, Y+1	; 0x01
    6a14:	9a 81       	ldd	r25, Y+2	; 0x02
    6a16:	01 97       	sbiw	r24, 0x01	; 1
    6a18:	f1 f7       	brne	.-4      	; 0x6a16 <LCD_SendCharacter+0x3c0>
    6a1a:	9a 83       	std	Y+2, r25	; 0x02
    6a1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    6a1e:	e9 96       	adiw	r28, 0x39	; 57
    6a20:	0f b6       	in	r0, 0x3f	; 63
    6a22:	f8 94       	cli
    6a24:	de bf       	out	0x3e, r29	; 62
    6a26:	0f be       	out	0x3f, r0	; 63
    6a28:	cd bf       	out	0x3d, r28	; 61
    6a2a:	cf 91       	pop	r28
    6a2c:	df 91       	pop	r29
    6a2e:	08 95       	ret

00006a30 <LCD_SendString>:

void LCD_SendString(const sint8 *String){
    6a30:	df 93       	push	r29
    6a32:	cf 93       	push	r28
    6a34:	00 d0       	rcall	.+0      	; 0x6a36 <LCD_SendString+0x6>
    6a36:	0f 92       	push	r0
    6a38:	cd b7       	in	r28, 0x3d	; 61
    6a3a:	de b7       	in	r29, 0x3e	; 62
    6a3c:	9b 83       	std	Y+3, r25	; 0x03
    6a3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    6a40:	19 82       	std	Y+1, r1	; 0x01
    6a42:	0e c0       	rjmp	.+28     	; 0x6a60 <LCD_SendString+0x30>
	while(String[count] != '\0'){
		LCD_SendCharacter(String[count]);
    6a44:	89 81       	ldd	r24, Y+1	; 0x01
    6a46:	28 2f       	mov	r18, r24
    6a48:	30 e0       	ldi	r19, 0x00	; 0
    6a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    6a4e:	fc 01       	movw	r30, r24
    6a50:	e2 0f       	add	r30, r18
    6a52:	f3 1f       	adc	r31, r19
    6a54:	80 81       	ld	r24, Z
    6a56:	0e 94 2b 33 	call	0x6656	; 0x6656 <LCD_SendCharacter>
		count++;
    6a5a:	89 81       	ldd	r24, Y+1	; 0x01
    6a5c:	8f 5f       	subi	r24, 0xFF	; 255
    6a5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}

void LCD_SendString(const sint8 *String){
	uint8 count = 0;
	while(String[count] != '\0'){
    6a60:	89 81       	ldd	r24, Y+1	; 0x01
    6a62:	28 2f       	mov	r18, r24
    6a64:	30 e0       	ldi	r19, 0x00	; 0
    6a66:	8a 81       	ldd	r24, Y+2	; 0x02
    6a68:	9b 81       	ldd	r25, Y+3	; 0x03
    6a6a:	fc 01       	movw	r30, r24
    6a6c:	e2 0f       	add	r30, r18
    6a6e:	f3 1f       	adc	r31, r19
    6a70:	80 81       	ld	r24, Z
    6a72:	88 23       	and	r24, r24
    6a74:	39 f7       	brne	.-50     	; 0x6a44 <LCD_SendString+0x14>
		LCD_SendCharacter(String[count]);
		count++;
	}
}
    6a76:	0f 90       	pop	r0
    6a78:	0f 90       	pop	r0
    6a7a:	0f 90       	pop	r0
    6a7c:	cf 91       	pop	r28
    6a7e:	df 91       	pop	r29
    6a80:	08 95       	ret

00006a82 <LCD_SetCursor>:

void LCD_SetCursor(uint8 a_Row, uint8 a_Column){
    6a82:	df 93       	push	r29
    6a84:	cf 93       	push	r28
    6a86:	00 d0       	rcall	.+0      	; 0x6a88 <LCD_SetCursor+0x6>
    6a88:	00 d0       	rcall	.+0      	; 0x6a8a <LCD_SetCursor+0x8>
    6a8a:	0f 92       	push	r0
    6a8c:	cd b7       	in	r28, 0x3d	; 61
    6a8e:	de b7       	in	r29, 0x3e	; 62
    6a90:	8a 83       	std	Y+2, r24	; 0x02
    6a92:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_Command;
	switch(a_Row){
    6a94:	8a 81       	ldd	r24, Y+2	; 0x02
    6a96:	28 2f       	mov	r18, r24
    6a98:	30 e0       	ldi	r19, 0x00	; 0
    6a9a:	3d 83       	std	Y+5, r19	; 0x05
    6a9c:	2c 83       	std	Y+4, r18	; 0x04
    6a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    6aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    6aa2:	81 30       	cpi	r24, 0x01	; 1
    6aa4:	91 05       	cpc	r25, r1
    6aa6:	c9 f0       	breq	.+50     	; 0x6ada <LCD_SetCursor+0x58>
    6aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    6aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    6aac:	22 30       	cpi	r18, 0x02	; 2
    6aae:	31 05       	cpc	r19, r1
    6ab0:	2c f4       	brge	.+10     	; 0x6abc <LCD_SetCursor+0x3a>
    6ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    6ab6:	00 97       	sbiw	r24, 0x00	; 0
    6ab8:	61 f0       	breq	.+24     	; 0x6ad2 <LCD_SetCursor+0x50>
    6aba:	1a c0       	rjmp	.+52     	; 0x6af0 <LCD_SetCursor+0x6e>
    6abc:	2c 81       	ldd	r18, Y+4	; 0x04
    6abe:	3d 81       	ldd	r19, Y+5	; 0x05
    6ac0:	22 30       	cpi	r18, 0x02	; 2
    6ac2:	31 05       	cpc	r19, r1
    6ac4:	71 f0       	breq	.+28     	; 0x6ae2 <LCD_SetCursor+0x60>
    6ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    6ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    6aca:	83 30       	cpi	r24, 0x03	; 3
    6acc:	91 05       	cpc	r25, r1
    6ace:	69 f0       	breq	.+26     	; 0x6aea <LCD_SetCursor+0x68>
    6ad0:	0f c0       	rjmp	.+30     	; 0x6af0 <LCD_SetCursor+0x6e>
	case(0):
		a_Command = 0x80 + a_Column;
    6ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ad4:	80 58       	subi	r24, 0x80	; 128
    6ad6:	89 83       	std	Y+1, r24	; 0x01
    6ad8:	0b c0       	rjmp	.+22     	; 0x6af0 <LCD_SetCursor+0x6e>
	break;
	case(1):
		a_Command = 0x80 + 0x40 + a_Column;
    6ada:	8b 81       	ldd	r24, Y+3	; 0x03
    6adc:	80 54       	subi	r24, 0x40	; 64
    6ade:	89 83       	std	Y+1, r24	; 0x01
    6ae0:	07 c0       	rjmp	.+14     	; 0x6af0 <LCD_SetCursor+0x6e>
	break;
	case(2):
		a_Command = 0x80 + 0x10 + a_Column;
    6ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ae4:	80 57       	subi	r24, 0x70	; 112
    6ae6:	89 83       	std	Y+1, r24	; 0x01
    6ae8:	03 c0       	rjmp	.+6      	; 0x6af0 <LCD_SetCursor+0x6e>
	break;
	case(3):
		a_Command = 0x80 + 0x50 + a_Column;
    6aea:	8b 81       	ldd	r24, Y+3	; 0x03
    6aec:	80 53       	subi	r24, 0x30	; 48
    6aee:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	LCD_SendCommand(a_Command);
    6af0:	89 81       	ldd	r24, Y+1	; 0x01
    6af2:	0e 94 3e 31 	call	0x627c	; 0x627c <LCD_SendCommand>
}
    6af6:	0f 90       	pop	r0
    6af8:	0f 90       	pop	r0
    6afa:	0f 90       	pop	r0
    6afc:	0f 90       	pop	r0
    6afe:	0f 90       	pop	r0
    6b00:	cf 91       	pop	r28
    6b02:	df 91       	pop	r29
    6b04:	08 95       	ret

00006b06 <LCD_DisplayInteger>:

void LCD_DisplayInteger(sint32 a_Int){
    6b06:	0f 93       	push	r16
    6b08:	1f 93       	push	r17
    6b0a:	df 93       	push	r29
    6b0c:	cf 93       	push	r28
    6b0e:	cd b7       	in	r28, 0x3d	; 61
    6b10:	de b7       	in	r29, 0x3e	; 62
    6b12:	62 97       	sbiw	r28, 0x12	; 18
    6b14:	0f b6       	in	r0, 0x3f	; 63
    6b16:	f8 94       	cli
    6b18:	de bf       	out	0x3e, r29	; 62
    6b1a:	0f be       	out	0x3f, r0	; 63
    6b1c:	cd bf       	out	0x3d, r28	; 61
    6b1e:	6f 87       	std	Y+15, r22	; 0x0f
    6b20:	78 8b       	std	Y+16, r23	; 0x10
    6b22:	89 8b       	std	Y+17, r24	; 0x11
    6b24:	9a 8b       	std	Y+18, r25	; 0x12
	uint8 Integer[10];
	uint8 count = 0;
    6b26:	1c 82       	std	Y+4, r1	; 0x04
	uint8 count_ = 0;
    6b28:	1b 82       	std	Y+3, r1	; 0x03
	uint8 temp = 0;
    6b2a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 flag = 0;
    6b2c:	19 82       	std	Y+1, r1	; 0x01
	if(a_Int < 0){
    6b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b30:	98 89       	ldd	r25, Y+16	; 0x10
    6b32:	a9 89       	ldd	r26, Y+17	; 0x11
    6b34:	ba 89       	ldd	r27, Y+18	; 0x12
    6b36:	bb 23       	and	r27, r27
    6b38:	0c f5       	brge	.+66     	; 0x6b7c <LCD_DisplayInteger+0x76>
		Integer[count] = '-';
    6b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b3c:	28 2f       	mov	r18, r24
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	ce 01       	movw	r24, r28
    6b42:	05 96       	adiw	r24, 0x05	; 5
    6b44:	fc 01       	movw	r30, r24
    6b46:	e2 0f       	add	r30, r18
    6b48:	f3 1f       	adc	r31, r19
    6b4a:	8d e2       	ldi	r24, 0x2D	; 45
    6b4c:	80 83       	st	Z, r24
		a_Int = a_Int*-1;
    6b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b50:	98 89       	ldd	r25, Y+16	; 0x10
    6b52:	a9 89       	ldd	r26, Y+17	; 0x11
    6b54:	ba 89       	ldd	r27, Y+18	; 0x12
    6b56:	b0 95       	com	r27
    6b58:	a0 95       	com	r26
    6b5a:	90 95       	com	r25
    6b5c:	81 95       	neg	r24
    6b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    6b60:	af 4f       	sbci	r26, 0xFF	; 255
    6b62:	bf 4f       	sbci	r27, 0xFF	; 255
    6b64:	8f 87       	std	Y+15, r24	; 0x0f
    6b66:	98 8b       	std	Y+16, r25	; 0x10
    6b68:	a9 8b       	std	Y+17, r26	; 0x11
    6b6a:	ba 8b       	std	Y+18, r27	; 0x12
		count ++;
    6b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b6e:	8f 5f       	subi	r24, 0xFF	; 255
    6b70:	8c 83       	std	Y+4, r24	; 0x04
		count_ ++;
    6b72:	8b 81       	ldd	r24, Y+3	; 0x03
    6b74:	8f 5f       	subi	r24, 0xFF	; 255
    6b76:	8b 83       	std	Y+3, r24	; 0x03
		flag = 1;
    6b78:	81 e0       	ldi	r24, 0x01	; 1
    6b7a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(a_Int == 0){
    6b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b7e:	98 89       	ldd	r25, Y+16	; 0x10
    6b80:	a9 89       	ldd	r26, Y+17	; 0x11
    6b82:	ba 89       	ldd	r27, Y+18	; 0x12
    6b84:	00 97       	sbiw	r24, 0x00	; 0
    6b86:	a1 05       	cpc	r26, r1
    6b88:	b1 05       	cpc	r27, r1
    6b8a:	09 f0       	breq	.+2      	; 0x6b8e <LCD_DisplayInteger+0x88>
    6b8c:	44 c0       	rjmp	.+136    	; 0x6c16 <LCD_DisplayInteger+0x110>
		Integer[count] = 48;
    6b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b90:	28 2f       	mov	r18, r24
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	ce 01       	movw	r24, r28
    6b96:	05 96       	adiw	r24, 0x05	; 5
    6b98:	fc 01       	movw	r30, r24
    6b9a:	e2 0f       	add	r30, r18
    6b9c:	f3 1f       	adc	r31, r19
    6b9e:	80 e3       	ldi	r24, 0x30	; 48
    6ba0:	80 83       	st	Z, r24
		Integer[count + 1] = '\0';
    6ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    6ba4:	88 2f       	mov	r24, r24
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	9c 01       	movw	r18, r24
    6baa:	2f 5f       	subi	r18, 0xFF	; 255
    6bac:	3f 4f       	sbci	r19, 0xFF	; 255
    6bae:	ce 01       	movw	r24, r28
    6bb0:	05 96       	adiw	r24, 0x05	; 5
    6bb2:	fc 01       	movw	r30, r24
    6bb4:	e2 0f       	add	r30, r18
    6bb6:	f3 1f       	adc	r31, r19
    6bb8:	10 82       	st	Z, r1
    6bba:	9c c0       	rjmp	.+312    	; 0x6cf4 <LCD_DisplayInteger+0x1ee>
	}
	else{
		while(a_Int != 0){
			Integer[count] = a_Int % 10;
    6bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    6bbe:	08 2f       	mov	r16, r24
    6bc0:	10 e0       	ldi	r17, 0x00	; 0
    6bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bc4:	98 89       	ldd	r25, Y+16	; 0x10
    6bc6:	a9 89       	ldd	r26, Y+17	; 0x11
    6bc8:	ba 89       	ldd	r27, Y+18	; 0x12
    6bca:	2a e0       	ldi	r18, 0x0A	; 10
    6bcc:	30 e0       	ldi	r19, 0x00	; 0
    6bce:	40 e0       	ldi	r20, 0x00	; 0
    6bd0:	50 e0       	ldi	r21, 0x00	; 0
    6bd2:	bc 01       	movw	r22, r24
    6bd4:	cd 01       	movw	r24, r26
    6bd6:	0e 94 80 3a 	call	0x7500	; 0x7500 <__divmodsi4>
    6bda:	dc 01       	movw	r26, r24
    6bdc:	cb 01       	movw	r24, r22
    6bde:	28 2f       	mov	r18, r24
    6be0:	ce 01       	movw	r24, r28
    6be2:	05 96       	adiw	r24, 0x05	; 5
    6be4:	fc 01       	movw	r30, r24
    6be6:	e0 0f       	add	r30, r16
    6be8:	f1 1f       	adc	r31, r17
    6bea:	20 83       	st	Z, r18
			a_Int = a_Int / 10;
    6bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bee:	98 89       	ldd	r25, Y+16	; 0x10
    6bf0:	a9 89       	ldd	r26, Y+17	; 0x11
    6bf2:	ba 89       	ldd	r27, Y+18	; 0x12
    6bf4:	2a e0       	ldi	r18, 0x0A	; 10
    6bf6:	30 e0       	ldi	r19, 0x00	; 0
    6bf8:	40 e0       	ldi	r20, 0x00	; 0
    6bfa:	50 e0       	ldi	r21, 0x00	; 0
    6bfc:	bc 01       	movw	r22, r24
    6bfe:	cd 01       	movw	r24, r26
    6c00:	0e 94 80 3a 	call	0x7500	; 0x7500 <__divmodsi4>
    6c04:	da 01       	movw	r26, r20
    6c06:	c9 01       	movw	r24, r18
    6c08:	8f 87       	std	Y+15, r24	; 0x0f
    6c0a:	98 8b       	std	Y+16, r25	; 0x10
    6c0c:	a9 8b       	std	Y+17, r26	; 0x11
    6c0e:	ba 8b       	std	Y+18, r27	; 0x12
			count ++;
    6c10:	8c 81       	ldd	r24, Y+4	; 0x04
    6c12:	8f 5f       	subi	r24, 0xFF	; 255
    6c14:	8c 83       	std	Y+4, r24	; 0x04
	if(a_Int == 0){
		Integer[count] = 48;
		Integer[count + 1] = '\0';
	}
	else{
		while(a_Int != 0){
    6c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c18:	98 89       	ldd	r25, Y+16	; 0x10
    6c1a:	a9 89       	ldd	r26, Y+17	; 0x11
    6c1c:	ba 89       	ldd	r27, Y+18	; 0x12
    6c1e:	00 97       	sbiw	r24, 0x00	; 0
    6c20:	a1 05       	cpc	r26, r1
    6c22:	b1 05       	cpc	r27, r1
    6c24:	59 f6       	brne	.-106    	; 0x6bbc <LCD_DisplayInteger+0xb6>
    6c26:	36 c0       	rjmp	.+108    	; 0x6c94 <LCD_DisplayInteger+0x18e>
			Integer[count] = a_Int % 10;
			a_Int = a_Int / 10;
			count ++;
		}
		while((count-1) >= count_){
			temp = Integer[count_];
    6c28:	8b 81       	ldd	r24, Y+3	; 0x03
    6c2a:	28 2f       	mov	r18, r24
    6c2c:	30 e0       	ldi	r19, 0x00	; 0
    6c2e:	ce 01       	movw	r24, r28
    6c30:	05 96       	adiw	r24, 0x05	; 5
    6c32:	fc 01       	movw	r30, r24
    6c34:	e2 0f       	add	r30, r18
    6c36:	f3 1f       	adc	r31, r19
    6c38:	80 81       	ld	r24, Z
    6c3a:	8a 83       	std	Y+2, r24	; 0x02
			Integer[count_] = Integer[count - 1] + '0';
    6c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c3e:	48 2f       	mov	r20, r24
    6c40:	50 e0       	ldi	r21, 0x00	; 0
    6c42:	8c 81       	ldd	r24, Y+4	; 0x04
    6c44:	88 2f       	mov	r24, r24
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	9c 01       	movw	r18, r24
    6c4a:	21 50       	subi	r18, 0x01	; 1
    6c4c:	30 40       	sbci	r19, 0x00	; 0
    6c4e:	ce 01       	movw	r24, r28
    6c50:	05 96       	adiw	r24, 0x05	; 5
    6c52:	fc 01       	movw	r30, r24
    6c54:	e2 0f       	add	r30, r18
    6c56:	f3 1f       	adc	r31, r19
    6c58:	80 81       	ld	r24, Z
    6c5a:	28 2f       	mov	r18, r24
    6c5c:	20 5d       	subi	r18, 0xD0	; 208
    6c5e:	ce 01       	movw	r24, r28
    6c60:	05 96       	adiw	r24, 0x05	; 5
    6c62:	fc 01       	movw	r30, r24
    6c64:	e4 0f       	add	r30, r20
    6c66:	f5 1f       	adc	r31, r21
    6c68:	20 83       	st	Z, r18
			Integer[count - 1] = temp + '0';
    6c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    6c6c:	88 2f       	mov	r24, r24
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	9c 01       	movw	r18, r24
    6c72:	21 50       	subi	r18, 0x01	; 1
    6c74:	30 40       	sbci	r19, 0x00	; 0
    6c76:	8a 81       	ldd	r24, Y+2	; 0x02
    6c78:	48 2f       	mov	r20, r24
    6c7a:	40 5d       	subi	r20, 0xD0	; 208
    6c7c:	ce 01       	movw	r24, r28
    6c7e:	05 96       	adiw	r24, 0x05	; 5
    6c80:	fc 01       	movw	r30, r24
    6c82:	e2 0f       	add	r30, r18
    6c84:	f3 1f       	adc	r31, r19
    6c86:	40 83       	st	Z, r20
			count--;
    6c88:	8c 81       	ldd	r24, Y+4	; 0x04
    6c8a:	81 50       	subi	r24, 0x01	; 1
    6c8c:	8c 83       	std	Y+4, r24	; 0x04
			count_++;
    6c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c90:	8f 5f       	subi	r24, 0xFF	; 255
    6c92:	8b 83       	std	Y+3, r24	; 0x03
		while(a_Int != 0){
			Integer[count] = a_Int % 10;
			a_Int = a_Int / 10;
			count ++;
		}
		while((count-1) >= count_){
    6c94:	8c 81       	ldd	r24, Y+4	; 0x04
    6c96:	88 2f       	mov	r24, r24
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	9c 01       	movw	r18, r24
    6c9c:	21 50       	subi	r18, 0x01	; 1
    6c9e:	30 40       	sbci	r19, 0x00	; 0
    6ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ca2:	88 2f       	mov	r24, r24
    6ca4:	90 e0       	ldi	r25, 0x00	; 0
    6ca6:	28 17       	cp	r18, r24
    6ca8:	39 07       	cpc	r19, r25
    6caa:	0c f0       	brlt	.+2      	; 0x6cae <LCD_DisplayInteger+0x1a8>
    6cac:	bd cf       	rjmp	.-134    	; 0x6c28 <LCD_DisplayInteger+0x122>
			Integer[count_] = Integer[count - 1] + '0';
			Integer[count - 1] = temp + '0';
			count--;
			count_++;
		}
		if(flag == 0)
    6cae:	89 81       	ldd	r24, Y+1	; 0x01
    6cb0:	88 23       	and	r24, r24
    6cb2:	79 f4       	brne	.+30     	; 0x6cd2 <LCD_DisplayInteger+0x1cc>
			Integer[count + count_] = '\0';
    6cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    6cb6:	28 2f       	mov	r18, r24
    6cb8:	30 e0       	ldi	r19, 0x00	; 0
    6cba:	8b 81       	ldd	r24, Y+3	; 0x03
    6cbc:	88 2f       	mov	r24, r24
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	28 0f       	add	r18, r24
    6cc2:	39 1f       	adc	r19, r25
    6cc4:	ce 01       	movw	r24, r28
    6cc6:	05 96       	adiw	r24, 0x05	; 5
    6cc8:	fc 01       	movw	r30, r24
    6cca:	e2 0f       	add	r30, r18
    6ccc:	f3 1f       	adc	r31, r19
    6cce:	10 82       	st	Z, r1
    6cd0:	11 c0       	rjmp	.+34     	; 0x6cf4 <LCD_DisplayInteger+0x1ee>
		else
			Integer[count + count_ - 1] = '\0';
    6cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    6cd4:	28 2f       	mov	r18, r24
    6cd6:	30 e0       	ldi	r19, 0x00	; 0
    6cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    6cda:	88 2f       	mov	r24, r24
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	82 0f       	add	r24, r18
    6ce0:	93 1f       	adc	r25, r19
    6ce2:	9c 01       	movw	r18, r24
    6ce4:	21 50       	subi	r18, 0x01	; 1
    6ce6:	30 40       	sbci	r19, 0x00	; 0
    6ce8:	ce 01       	movw	r24, r28
    6cea:	05 96       	adiw	r24, 0x05	; 5
    6cec:	fc 01       	movw	r30, r24
    6cee:	e2 0f       	add	r30, r18
    6cf0:	f3 1f       	adc	r31, r19
    6cf2:	10 82       	st	Z, r1
	}
	LCD_SendString(Integer);
    6cf4:	ce 01       	movw	r24, r28
    6cf6:	05 96       	adiw	r24, 0x05	; 5
    6cf8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <LCD_SendString>
}
    6cfc:	62 96       	adiw	r28, 0x12	; 18
    6cfe:	0f b6       	in	r0, 0x3f	; 63
    6d00:	f8 94       	cli
    6d02:	de bf       	out	0x3e, r29	; 62
    6d04:	0f be       	out	0x3f, r0	; 63
    6d06:	cd bf       	out	0x3d, r28	; 61
    6d08:	cf 91       	pop	r28
    6d0a:	df 91       	pop	r29
    6d0c:	1f 91       	pop	r17
    6d0e:	0f 91       	pop	r16
    6d10:	08 95       	ret

00006d12 <LCD_ClearScreen>:

void LCD_ClearScreen(void){
    6d12:	df 93       	push	r29
    6d14:	cf 93       	push	r28
    6d16:	cd b7       	in	r28, 0x3d	; 61
    6d18:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(Clear_LCD);
    6d1a:	81 e0       	ldi	r24, 0x01	; 1
    6d1c:	0e 94 3e 31 	call	0x627c	; 0x627c <LCD_SendCommand>
	LCD_SetCursor(0, 0);
    6d20:	80 e0       	ldi	r24, 0x00	; 0
    6d22:	60 e0       	ldi	r22, 0x00	; 0
    6d24:	0e 94 41 35 	call	0x6a82	; 0x6a82 <LCD_SetCursor>
}
    6d28:	cf 91       	pop	r28
    6d2a:	df 91       	pop	r29
    6d2c:	08 95       	ret

00006d2e <ATM_MC_Init>:
#include "ATM.h"

void ATM_MC_Init(void){
    6d2e:	df 93       	push	r29
    6d30:	cf 93       	push	r28
    6d32:	cd b7       	in	r28, 0x3d	; 61
    6d34:	de b7       	in	r29, 0x3e	; 62
    IO_INIT;
    6d36:	0e 94 82 2c 	call	0x5904	; 0x5904 <DIO_DefinePinsDirections>
    COM_INIT;
    6d3a:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <UART_init>
    //TIMERS_INIT;
}
    6d3e:	cf 91       	pop	r28
    6d40:	df 91       	pop	r29
    6d42:	08 95       	ret

00006d44 <ATM_HW_Init>:

void ATM_HW_Init(void){
    6d44:	df 93       	push	r29
    6d46:	cf 93       	push	r28
    6d48:	cd b7       	in	r28, 0x3d	; 61
    6d4a:	de b7       	in	r29, 0x3e	; 62
	OUTPUT_MODULES_INIT;
    6d4c:	88 e3       	ldi	r24, 0x38	; 56
    6d4e:	6c e0       	ldi	r22, 0x0C	; 12
    6d50:	0e 94 1d 31 	call	0x623a	; 0x623a <LCD_Init>
}
    6d54:	cf 91       	pop	r28
    6d56:	df 91       	pop	r29
    6d58:	08 95       	ret

00006d5a <Scheduler_Init>:

extern volatile TCB	TCB_Container[NUmberOfTasks];
volatile boolean Scheduler_Flag;

void Scheduler_Init(void)
{
    6d5a:	df 93       	push	r29
    6d5c:	cf 93       	push	r28
    6d5e:	cd b7       	in	r28, 0x3d	; 61
    6d60:	de b7       	in	r29, 0x3e	; 62
	InitiateSchedulerTimer(Scheduler_Tick);
    6d62:	85 e0       	ldi	r24, 0x05	; 5
    6d64:	64 e6       	ldi	r22, 0x64	; 100
    6d66:	70 e0       	ldi	r23, 0x00	; 0
    6d68:	40 e0       	ldi	r20, 0x00	; 0
    6d6a:	0e 94 f5 38 	call	0x71ea	; 0x71ea <TIMER1_Init_MSeconds>
	SetCallbackHandler(Scheduler_Trigger);
    6d6e:	8f e7       	ldi	r24, 0x7F	; 127
    6d70:	97 e3       	ldi	r25, 0x37	; 55
    6d72:	0e 94 a6 39 	call	0x734c	; 0x734c <PTR_TIM1_Handler_Setter>
	Scheduler_Flag = FALSE;
    6d76:	10 92 bd 04 	sts	0x04BD, r1
	SortTCB(TCB_Container);
    6d7a:	8b e5       	ldi	r24, 0x5B	; 91
    6d7c:	94 e0       	ldi	r25, 0x04	; 4
    6d7e:	0e 94 89 37 	call	0x6f12	; 0x6f12 <SortTCB>
}
    6d82:	cf 91       	pop	r28
    6d84:	df 91       	pop	r29
    6d86:	08 95       	ret

00006d88 <Scheduler>:

void Scheduler(void)
{
    6d88:	df 93       	push	r29
    6d8a:	cf 93       	push	r28
    6d8c:	0f 92       	push	r0
    6d8e:	cd b7       	in	r28, 0x3d	; 61
    6d90:	de b7       	in	r29, 0x3e	; 62
	uint8 Task_Counter;
	while(1)
	{
		while(Scheduler_Flag == FALSE);
    6d92:	80 91 bd 04 	lds	r24, 0x04BD
    6d96:	91 e0       	ldi	r25, 0x01	; 1
    6d98:	89 27       	eor	r24, r25
    6d9a:	88 23       	and	r24, r24
    6d9c:	d1 f7       	brne	.-12     	; 0x6d92 <Scheduler+0xa>

		for(Task_Counter = 0; Task_Counter < NUmberOfTasks; Task_Counter++)
    6d9e:	19 82       	std	Y+1, r1	; 0x01
    6da0:	71 c0       	rjmp	.+226    	; 0x6e84 <Scheduler+0xfc>
		{
			if(TCB_Container[Task_Counter].State == Ready && TCB_Container[Task_Counter].ReleaseTime <= 0)
    6da2:	89 81       	ldd	r24, Y+1	; 0x01
    6da4:	28 2f       	mov	r18, r24
    6da6:	30 e0       	ldi	r19, 0x00	; 0
    6da8:	c9 01       	movw	r24, r18
    6daa:	88 0f       	add	r24, r24
    6dac:	99 1f       	adc	r25, r25
    6dae:	82 0f       	add	r24, r18
    6db0:	93 1f       	adc	r25, r19
    6db2:	88 0f       	add	r24, r24
    6db4:	99 1f       	adc	r25, r25
    6db6:	fc 01       	movw	r30, r24
    6db8:	e1 5a       	subi	r30, 0xA1	; 161
    6dba:	fb 4f       	sbci	r31, 0xFB	; 251
    6dbc:	80 81       	ld	r24, Z
    6dbe:	81 30       	cpi	r24, 0x01	; 1
    6dc0:	09 f0       	breq	.+2      	; 0x6dc4 <Scheduler+0x3c>
    6dc2:	5d c0       	rjmp	.+186    	; 0x6e7e <Scheduler+0xf6>
    6dc4:	89 81       	ldd	r24, Y+1	; 0x01
    6dc6:	28 2f       	mov	r18, r24
    6dc8:	30 e0       	ldi	r19, 0x00	; 0
    6dca:	c9 01       	movw	r24, r18
    6dcc:	88 0f       	add	r24, r24
    6dce:	99 1f       	adc	r25, r25
    6dd0:	82 0f       	add	r24, r18
    6dd2:	93 1f       	adc	r25, r19
    6dd4:	88 0f       	add	r24, r24
    6dd6:	99 1f       	adc	r25, r25
    6dd8:	fc 01       	movw	r30, r24
    6dda:	e0 5a       	subi	r30, 0xA0	; 160
    6ddc:	fb 4f       	sbci	r31, 0xFB	; 251
    6dde:	80 81       	ld	r24, Z
    6de0:	88 23       	and	r24, r24
    6de2:	09 f0       	breq	.+2      	; 0x6de6 <Scheduler+0x5e>
    6de4:	4c c0       	rjmp	.+152    	; 0x6e7e <Scheduler+0xf6>
			{
				TCB_Container[Task_Counter].State = Running;
    6de6:	89 81       	ldd	r24, Y+1	; 0x01
    6de8:	28 2f       	mov	r18, r24
    6dea:	30 e0       	ldi	r19, 0x00	; 0
    6dec:	c9 01       	movw	r24, r18
    6dee:	88 0f       	add	r24, r24
    6df0:	99 1f       	adc	r25, r25
    6df2:	82 0f       	add	r24, r18
    6df4:	93 1f       	adc	r25, r19
    6df6:	88 0f       	add	r24, r24
    6df8:	99 1f       	adc	r25, r25
    6dfa:	fc 01       	movw	r30, r24
    6dfc:	e1 5a       	subi	r30, 0xA1	; 161
    6dfe:	fb 4f       	sbci	r31, 0xFB	; 251
    6e00:	82 e0       	ldi	r24, 0x02	; 2
    6e02:	80 83       	st	Z, r24
				TCB_Container[Task_Counter].TaskPTR();
    6e04:	89 81       	ldd	r24, Y+1	; 0x01
    6e06:	28 2f       	mov	r18, r24
    6e08:	30 e0       	ldi	r19, 0x00	; 0
    6e0a:	c9 01       	movw	r24, r18
    6e0c:	88 0f       	add	r24, r24
    6e0e:	99 1f       	adc	r25, r25
    6e10:	82 0f       	add	r24, r18
    6e12:	93 1f       	adc	r25, r19
    6e14:	88 0f       	add	r24, r24
    6e16:	99 1f       	adc	r25, r25
    6e18:	fc 01       	movw	r30, r24
    6e1a:	e5 5a       	subi	r30, 0xA5	; 165
    6e1c:	fb 4f       	sbci	r31, 0xFB	; 251
    6e1e:	01 90       	ld	r0, Z+
    6e20:	f0 81       	ld	r31, Z
    6e22:	e0 2d       	mov	r30, r0
    6e24:	09 95       	icall
				TCB_Container[Task_Counter].State = Ready;
    6e26:	89 81       	ldd	r24, Y+1	; 0x01
    6e28:	28 2f       	mov	r18, r24
    6e2a:	30 e0       	ldi	r19, 0x00	; 0
    6e2c:	c9 01       	movw	r24, r18
    6e2e:	88 0f       	add	r24, r24
    6e30:	99 1f       	adc	r25, r25
    6e32:	82 0f       	add	r24, r18
    6e34:	93 1f       	adc	r25, r19
    6e36:	88 0f       	add	r24, r24
    6e38:	99 1f       	adc	r25, r25
    6e3a:	fc 01       	movw	r30, r24
    6e3c:	e1 5a       	subi	r30, 0xA1	; 161
    6e3e:	fb 4f       	sbci	r31, 0xFB	; 251
    6e40:	81 e0       	ldi	r24, 0x01	; 1
    6e42:	80 83       	st	Z, r24
				TCB_Container[Task_Counter].ReleaseTime = TCB_Container[Task_Counter].TaskPeriod;
    6e44:	89 81       	ldd	r24, Y+1	; 0x01
    6e46:	48 2f       	mov	r20, r24
    6e48:	50 e0       	ldi	r21, 0x00	; 0
    6e4a:	89 81       	ldd	r24, Y+1	; 0x01
    6e4c:	28 2f       	mov	r18, r24
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	c9 01       	movw	r24, r18
    6e52:	88 0f       	add	r24, r24
    6e54:	99 1f       	adc	r25, r25
    6e56:	82 0f       	add	r24, r18
    6e58:	93 1f       	adc	r25, r19
    6e5a:	01 96       	adiw	r24, 0x01	; 1
    6e5c:	88 0f       	add	r24, r24
    6e5e:	99 1f       	adc	r25, r25
    6e60:	fc 01       	movw	r30, r24
    6e62:	e5 5a       	subi	r30, 0xA5	; 165
    6e64:	fb 4f       	sbci	r31, 0xFB	; 251
    6e66:	20 81       	ld	r18, Z
    6e68:	ca 01       	movw	r24, r20
    6e6a:	88 0f       	add	r24, r24
    6e6c:	99 1f       	adc	r25, r25
    6e6e:	84 0f       	add	r24, r20
    6e70:	95 1f       	adc	r25, r21
    6e72:	88 0f       	add	r24, r24
    6e74:	99 1f       	adc	r25, r25
    6e76:	fc 01       	movw	r30, r24
    6e78:	e0 5a       	subi	r30, 0xA0	; 160
    6e7a:	fb 4f       	sbci	r31, 0xFB	; 251
    6e7c:	20 83       	st	Z, r18
	uint8 Task_Counter;
	while(1)
	{
		while(Scheduler_Flag == FALSE);

		for(Task_Counter = 0; Task_Counter < NUmberOfTasks; Task_Counter++)
    6e7e:	89 81       	ldd	r24, Y+1	; 0x01
    6e80:	8f 5f       	subi	r24, 0xFF	; 255
    6e82:	89 83       	std	Y+1, r24	; 0x01
    6e84:	89 81       	ldd	r24, Y+1	; 0x01
    6e86:	87 30       	cpi	r24, 0x07	; 7
    6e88:	08 f4       	brcc	.+2      	; 0x6e8c <Scheduler+0x104>
    6e8a:	8b cf       	rjmp	.-234    	; 0x6da2 <Scheduler+0x1a>
				TCB_Container[Task_Counter].State = Ready;
				TCB_Container[Task_Counter].ReleaseTime = TCB_Container[Task_Counter].TaskPeriod;
			}
		}

		for(Task_Counter = 0; Task_Counter < NUmberOfTasks; Task_Counter++)
    6e8c:	19 82       	std	Y+1, r1	; 0x01
    6e8e:	31 c0       	rjmp	.+98     	; 0x6ef2 <Scheduler+0x16a>
		{
			if(TCB_Container[Task_Counter].State == Ready)
    6e90:	89 81       	ldd	r24, Y+1	; 0x01
    6e92:	28 2f       	mov	r18, r24
    6e94:	30 e0       	ldi	r19, 0x00	; 0
    6e96:	c9 01       	movw	r24, r18
    6e98:	88 0f       	add	r24, r24
    6e9a:	99 1f       	adc	r25, r25
    6e9c:	82 0f       	add	r24, r18
    6e9e:	93 1f       	adc	r25, r19
    6ea0:	88 0f       	add	r24, r24
    6ea2:	99 1f       	adc	r25, r25
    6ea4:	fc 01       	movw	r30, r24
    6ea6:	e1 5a       	subi	r30, 0xA1	; 161
    6ea8:	fb 4f       	sbci	r31, 0xFB	; 251
    6eaa:	80 81       	ld	r24, Z
    6eac:	81 30       	cpi	r24, 0x01	; 1
    6eae:	f1 f4       	brne	.+60     	; 0x6eec <Scheduler+0x164>
			{
				TCB_Container[Task_Counter].ReleaseTime -= 1;
    6eb0:	89 81       	ldd	r24, Y+1	; 0x01
    6eb2:	48 2f       	mov	r20, r24
    6eb4:	50 e0       	ldi	r21, 0x00	; 0
    6eb6:	89 81       	ldd	r24, Y+1	; 0x01
    6eb8:	28 2f       	mov	r18, r24
    6eba:	30 e0       	ldi	r19, 0x00	; 0
    6ebc:	c9 01       	movw	r24, r18
    6ebe:	88 0f       	add	r24, r24
    6ec0:	99 1f       	adc	r25, r25
    6ec2:	82 0f       	add	r24, r18
    6ec4:	93 1f       	adc	r25, r19
    6ec6:	88 0f       	add	r24, r24
    6ec8:	99 1f       	adc	r25, r25
    6eca:	fc 01       	movw	r30, r24
    6ecc:	e0 5a       	subi	r30, 0xA0	; 160
    6ece:	fb 4f       	sbci	r31, 0xFB	; 251
    6ed0:	80 81       	ld	r24, Z
    6ed2:	28 2f       	mov	r18, r24
    6ed4:	21 50       	subi	r18, 0x01	; 1
    6ed6:	ca 01       	movw	r24, r20
    6ed8:	88 0f       	add	r24, r24
    6eda:	99 1f       	adc	r25, r25
    6edc:	84 0f       	add	r24, r20
    6ede:	95 1f       	adc	r25, r21
    6ee0:	88 0f       	add	r24, r24
    6ee2:	99 1f       	adc	r25, r25
    6ee4:	fc 01       	movw	r30, r24
    6ee6:	e0 5a       	subi	r30, 0xA0	; 160
    6ee8:	fb 4f       	sbci	r31, 0xFB	; 251
    6eea:	20 83       	st	Z, r18
				TCB_Container[Task_Counter].State = Ready;
				TCB_Container[Task_Counter].ReleaseTime = TCB_Container[Task_Counter].TaskPeriod;
			}
		}

		for(Task_Counter = 0; Task_Counter < NUmberOfTasks; Task_Counter++)
    6eec:	89 81       	ldd	r24, Y+1	; 0x01
    6eee:	8f 5f       	subi	r24, 0xFF	; 255
    6ef0:	89 83       	std	Y+1, r24	; 0x01
    6ef2:	89 81       	ldd	r24, Y+1	; 0x01
    6ef4:	87 30       	cpi	r24, 0x07	; 7
    6ef6:	60 f2       	brcs	.-104    	; 0x6e90 <Scheduler+0x108>
			{
				TCB_Container[Task_Counter].ReleaseTime -= 1;
			}
		}

		Scheduler_Flag = FALSE;
    6ef8:	10 92 bd 04 	sts	0x04BD, r1
    6efc:	4a cf       	rjmp	.-364    	; 0x6d92 <Scheduler+0xa>

00006efe <Scheduler_Trigger>:
	}
}

void Scheduler_Trigger(void)
{
    6efe:	df 93       	push	r29
    6f00:	cf 93       	push	r28
    6f02:	cd b7       	in	r28, 0x3d	; 61
    6f04:	de b7       	in	r29, 0x3e	; 62
	Scheduler_Flag = TRUE;
    6f06:	81 e0       	ldi	r24, 0x01	; 1
    6f08:	80 93 bd 04 	sts	0x04BD, r24
}
    6f0c:	cf 91       	pop	r28
    6f0e:	df 91       	pop	r29
    6f10:	08 95       	ret

00006f12 <SortTCB>:

static void SortTCB(TCB* TCB_Handle)
{
    6f12:	df 93       	push	r29
    6f14:	cf 93       	push	r28
    6f16:	cd b7       	in	r28, 0x3d	; 61
    6f18:	de b7       	in	r29, 0x3e	; 62
    6f1a:	69 97       	sbiw	r28, 0x19	; 25
    6f1c:	0f b6       	in	r0, 0x3f	; 63
    6f1e:	f8 94       	cli
    6f20:	de bf       	out	0x3e, r29	; 62
    6f22:	0f be       	out	0x3f, r0	; 63
    6f24:	cd bf       	out	0x3d, r28	; 61
    6f26:	9a 87       	std	Y+10, r25	; 0x0a
    6f28:	89 87       	std	Y+9, r24	; 0x09
	TCB temp;
	for(uint8 count1 = 0; count1 < (NUmberOfTasks - 1); count1++)
    6f2a:	1a 82       	std	Y+2, r1	; 0x02
    6f2c:	cf c0       	rjmp	.+414    	; 0x70cc <SortTCB+0x1ba>
	{
		for(uint8 count2 = count1+1; count2 < NUmberOfTasks; count2++)
    6f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6f30:	8f 5f       	subi	r24, 0xFF	; 255
    6f32:	89 83       	std	Y+1, r24	; 0x01
    6f34:	c4 c0       	rjmp	.+392    	; 0x70be <SortTCB+0x1ac>
		{
			if(TCB_Handle[count2].Priority < TCB_Handle[count1].Priority)
    6f36:	89 81       	ldd	r24, Y+1	; 0x01
    6f38:	28 2f       	mov	r18, r24
    6f3a:	30 e0       	ldi	r19, 0x00	; 0
    6f3c:	c9 01       	movw	r24, r18
    6f3e:	88 0f       	add	r24, r24
    6f40:	99 1f       	adc	r25, r25
    6f42:	82 0f       	add	r24, r18
    6f44:	93 1f       	adc	r25, r19
    6f46:	88 0f       	add	r24, r24
    6f48:	99 1f       	adc	r25, r25
    6f4a:	9c 01       	movw	r18, r24
    6f4c:	89 85       	ldd	r24, Y+9	; 0x09
    6f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f50:	fc 01       	movw	r30, r24
    6f52:	e2 0f       	add	r30, r18
    6f54:	f3 1f       	adc	r31, r19
    6f56:	43 81       	ldd	r20, Z+3	; 0x03
    6f58:	8a 81       	ldd	r24, Y+2	; 0x02
    6f5a:	28 2f       	mov	r18, r24
    6f5c:	30 e0       	ldi	r19, 0x00	; 0
    6f5e:	c9 01       	movw	r24, r18
    6f60:	88 0f       	add	r24, r24
    6f62:	99 1f       	adc	r25, r25
    6f64:	82 0f       	add	r24, r18
    6f66:	93 1f       	adc	r25, r19
    6f68:	88 0f       	add	r24, r24
    6f6a:	99 1f       	adc	r25, r25
    6f6c:	9c 01       	movw	r18, r24
    6f6e:	89 85       	ldd	r24, Y+9	; 0x09
    6f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f72:	fc 01       	movw	r30, r24
    6f74:	e2 0f       	add	r30, r18
    6f76:	f3 1f       	adc	r31, r19
    6f78:	83 81       	ldd	r24, Z+3	; 0x03
    6f7a:	48 17       	cp	r20, r24
    6f7c:	08 f0       	brcs	.+2      	; 0x6f80 <SortTCB+0x6e>
    6f7e:	9c c0       	rjmp	.+312    	; 0x70b8 <SortTCB+0x1a6>
			{
				temp = TCB_Handle[count1];
    6f80:	8a 81       	ldd	r24, Y+2	; 0x02
    6f82:	28 2f       	mov	r18, r24
    6f84:	30 e0       	ldi	r19, 0x00	; 0
    6f86:	c9 01       	movw	r24, r18
    6f88:	88 0f       	add	r24, r24
    6f8a:	99 1f       	adc	r25, r25
    6f8c:	82 0f       	add	r24, r18
    6f8e:	93 1f       	adc	r25, r19
    6f90:	88 0f       	add	r24, r24
    6f92:	99 1f       	adc	r25, r25
    6f94:	9c 01       	movw	r18, r24
    6f96:	89 85       	ldd	r24, Y+9	; 0x09
    6f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f9a:	82 0f       	add	r24, r18
    6f9c:	93 1f       	adc	r25, r19
    6f9e:	9e 01       	movw	r18, r28
    6fa0:	2d 5f       	subi	r18, 0xFD	; 253
    6fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa4:	3c 87       	std	Y+12, r19	; 0x0c
    6fa6:	2b 87       	std	Y+11, r18	; 0x0b
    6fa8:	9e 87       	std	Y+14, r25	; 0x0e
    6faa:	8d 87       	std	Y+13, r24	; 0x0d
    6fac:	36 e0       	ldi	r19, 0x06	; 6
    6fae:	3f 87       	std	Y+15, r19	; 0x0f
    6fb0:	ed 85       	ldd	r30, Y+13	; 0x0d
    6fb2:	fe 85       	ldd	r31, Y+14	; 0x0e
    6fb4:	00 80       	ld	r0, Z
    6fb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    6fb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    6fba:	2f 5f       	subi	r18, 0xFF	; 255
    6fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    6fbe:	3e 87       	std	Y+14, r19	; 0x0e
    6fc0:	2d 87       	std	Y+13, r18	; 0x0d
    6fc2:	eb 85       	ldd	r30, Y+11	; 0x0b
    6fc4:	fc 85       	ldd	r31, Y+12	; 0x0c
    6fc6:	00 82       	st	Z, r0
    6fc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    6fca:	3c 85       	ldd	r19, Y+12	; 0x0c
    6fcc:	2f 5f       	subi	r18, 0xFF	; 255
    6fce:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd0:	3c 87       	std	Y+12, r19	; 0x0c
    6fd2:	2b 87       	std	Y+11, r18	; 0x0b
    6fd4:	3f 85       	ldd	r19, Y+15	; 0x0f
    6fd6:	31 50       	subi	r19, 0x01	; 1
    6fd8:	3f 87       	std	Y+15, r19	; 0x0f
    6fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fdc:	88 23       	and	r24, r24
    6fde:	41 f7       	brne	.-48     	; 0x6fb0 <SortTCB+0x9e>
				TCB_Handle[count1] = TCB_Handle[count2];
    6fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    6fe2:	28 2f       	mov	r18, r24
    6fe4:	30 e0       	ldi	r19, 0x00	; 0
    6fe6:	c9 01       	movw	r24, r18
    6fe8:	88 0f       	add	r24, r24
    6fea:	99 1f       	adc	r25, r25
    6fec:	82 0f       	add	r24, r18
    6fee:	93 1f       	adc	r25, r19
    6ff0:	88 0f       	add	r24, r24
    6ff2:	99 1f       	adc	r25, r25
    6ff4:	9c 01       	movw	r18, r24
    6ff6:	89 85       	ldd	r24, Y+9	; 0x09
    6ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ffa:	ac 01       	movw	r20, r24
    6ffc:	42 0f       	add	r20, r18
    6ffe:	53 1f       	adc	r21, r19
    7000:	89 81       	ldd	r24, Y+1	; 0x01
    7002:	28 2f       	mov	r18, r24
    7004:	30 e0       	ldi	r19, 0x00	; 0
    7006:	c9 01       	movw	r24, r18
    7008:	88 0f       	add	r24, r24
    700a:	99 1f       	adc	r25, r25
    700c:	82 0f       	add	r24, r18
    700e:	93 1f       	adc	r25, r19
    7010:	88 0f       	add	r24, r24
    7012:	99 1f       	adc	r25, r25
    7014:	9c 01       	movw	r18, r24
    7016:	89 85       	ldd	r24, Y+9	; 0x09
    7018:	9a 85       	ldd	r25, Y+10	; 0x0a
    701a:	82 0f       	add	r24, r18
    701c:	93 1f       	adc	r25, r19
    701e:	59 8b       	std	Y+17, r21	; 0x11
    7020:	48 8b       	std	Y+16, r20	; 0x10
    7022:	9b 8b       	std	Y+19, r25	; 0x13
    7024:	8a 8b       	std	Y+18, r24	; 0x12
    7026:	96 e0       	ldi	r25, 0x06	; 6
    7028:	9c 8b       	std	Y+20, r25	; 0x14
    702a:	ea 89       	ldd	r30, Y+18	; 0x12
    702c:	fb 89       	ldd	r31, Y+19	; 0x13
    702e:	00 80       	ld	r0, Z
    7030:	2a 89       	ldd	r18, Y+18	; 0x12
    7032:	3b 89       	ldd	r19, Y+19	; 0x13
    7034:	2f 5f       	subi	r18, 0xFF	; 255
    7036:	3f 4f       	sbci	r19, 0xFF	; 255
    7038:	3b 8b       	std	Y+19, r19	; 0x13
    703a:	2a 8b       	std	Y+18, r18	; 0x12
    703c:	e8 89       	ldd	r30, Y+16	; 0x10
    703e:	f9 89       	ldd	r31, Y+17	; 0x11
    7040:	00 82       	st	Z, r0
    7042:	28 89       	ldd	r18, Y+16	; 0x10
    7044:	39 89       	ldd	r19, Y+17	; 0x11
    7046:	2f 5f       	subi	r18, 0xFF	; 255
    7048:	3f 4f       	sbci	r19, 0xFF	; 255
    704a:	39 8b       	std	Y+17, r19	; 0x11
    704c:	28 8b       	std	Y+16, r18	; 0x10
    704e:	3c 89       	ldd	r19, Y+20	; 0x14
    7050:	31 50       	subi	r19, 0x01	; 1
    7052:	3c 8b       	std	Y+20, r19	; 0x14
    7054:	8c 89       	ldd	r24, Y+20	; 0x14
    7056:	88 23       	and	r24, r24
    7058:	41 f7       	brne	.-48     	; 0x702a <SortTCB+0x118>
				TCB_Handle[count2] = temp;
    705a:	89 81       	ldd	r24, Y+1	; 0x01
    705c:	28 2f       	mov	r18, r24
    705e:	30 e0       	ldi	r19, 0x00	; 0
    7060:	c9 01       	movw	r24, r18
    7062:	88 0f       	add	r24, r24
    7064:	99 1f       	adc	r25, r25
    7066:	82 0f       	add	r24, r18
    7068:	93 1f       	adc	r25, r19
    706a:	88 0f       	add	r24, r24
    706c:	99 1f       	adc	r25, r25
    706e:	9c 01       	movw	r18, r24
    7070:	89 85       	ldd	r24, Y+9	; 0x09
    7072:	9a 85       	ldd	r25, Y+10	; 0x0a
    7074:	82 0f       	add	r24, r18
    7076:	93 1f       	adc	r25, r19
    7078:	9e 8b       	std	Y+22, r25	; 0x16
    707a:	8d 8b       	std	Y+21, r24	; 0x15
    707c:	fe 01       	movw	r30, r28
    707e:	33 96       	adiw	r30, 0x03	; 3
    7080:	f8 8f       	std	Y+24, r31	; 0x18
    7082:	ef 8b       	std	Y+23, r30	; 0x17
    7084:	f6 e0       	ldi	r31, 0x06	; 6
    7086:	f9 8f       	std	Y+25, r31	; 0x19
    7088:	ef 89       	ldd	r30, Y+23	; 0x17
    708a:	f8 8d       	ldd	r31, Y+24	; 0x18
    708c:	00 80       	ld	r0, Z
    708e:	2f 89       	ldd	r18, Y+23	; 0x17
    7090:	38 8d       	ldd	r19, Y+24	; 0x18
    7092:	2f 5f       	subi	r18, 0xFF	; 255
    7094:	3f 4f       	sbci	r19, 0xFF	; 255
    7096:	38 8f       	std	Y+24, r19	; 0x18
    7098:	2f 8b       	std	Y+23, r18	; 0x17
    709a:	ed 89       	ldd	r30, Y+21	; 0x15
    709c:	fe 89       	ldd	r31, Y+22	; 0x16
    709e:	00 82       	st	Z, r0
    70a0:	2d 89       	ldd	r18, Y+21	; 0x15
    70a2:	3e 89       	ldd	r19, Y+22	; 0x16
    70a4:	2f 5f       	subi	r18, 0xFF	; 255
    70a6:	3f 4f       	sbci	r19, 0xFF	; 255
    70a8:	3e 8b       	std	Y+22, r19	; 0x16
    70aa:	2d 8b       	std	Y+21, r18	; 0x15
    70ac:	39 8d       	ldd	r19, Y+25	; 0x19
    70ae:	31 50       	subi	r19, 0x01	; 1
    70b0:	39 8f       	std	Y+25, r19	; 0x19
    70b2:	89 8d       	ldd	r24, Y+25	; 0x19
    70b4:	88 23       	and	r24, r24
    70b6:	41 f7       	brne	.-48     	; 0x7088 <SortTCB+0x176>
static void SortTCB(TCB* TCB_Handle)
{
	TCB temp;
	for(uint8 count1 = 0; count1 < (NUmberOfTasks - 1); count1++)
	{
		for(uint8 count2 = count1+1; count2 < NUmberOfTasks; count2++)
    70b8:	89 81       	ldd	r24, Y+1	; 0x01
    70ba:	8f 5f       	subi	r24, 0xFF	; 255
    70bc:	89 83       	std	Y+1, r24	; 0x01
    70be:	89 81       	ldd	r24, Y+1	; 0x01
    70c0:	87 30       	cpi	r24, 0x07	; 7
    70c2:	08 f4       	brcc	.+2      	; 0x70c6 <SortTCB+0x1b4>
    70c4:	38 cf       	rjmp	.-400    	; 0x6f36 <SortTCB+0x24>
}

static void SortTCB(TCB* TCB_Handle)
{
	TCB temp;
	for(uint8 count1 = 0; count1 < (NUmberOfTasks - 1); count1++)
    70c6:	8a 81       	ldd	r24, Y+2	; 0x02
    70c8:	8f 5f       	subi	r24, 0xFF	; 255
    70ca:	8a 83       	std	Y+2, r24	; 0x02
    70cc:	8a 81       	ldd	r24, Y+2	; 0x02
    70ce:	86 30       	cpi	r24, 0x06	; 6
    70d0:	08 f4       	brcc	.+2      	; 0x70d4 <SortTCB+0x1c2>
    70d2:	2d cf       	rjmp	.-422    	; 0x6f2e <SortTCB+0x1c>
				TCB_Handle[count1] = TCB_Handle[count2];
				TCB_Handle[count2] = temp;
			}
		}
	}
}
    70d4:	69 96       	adiw	r28, 0x19	; 25
    70d6:	0f b6       	in	r0, 0x3f	; 63
    70d8:	f8 94       	cli
    70da:	de bf       	out	0x3e, r29	; 62
    70dc:	0f be       	out	0x3f, r0	; 63
    70de:	cd bf       	out	0x3d, r28	; 61
    70e0:	cf 91       	pop	r28
    70e2:	df 91       	pop	r29
    70e4:	08 95       	ret

000070e6 <TIMER1_InitCM_ChannelA>:
#include "TIMER.h"
#include "DIO.h"

void(*PTR_TIM1_Handler)(void) = STUB;

void TIMER1_InitCM_ChannelA(uint8 a_Prescaler, uint16 a_TIMER1_Bottom, uint16 a_TIMER1_Top){
    70e6:	df 93       	push	r29
    70e8:	cf 93       	push	r28
    70ea:	00 d0       	rcall	.+0      	; 0x70ec <TIMER1_InitCM_ChannelA+0x6>
    70ec:	00 d0       	rcall	.+0      	; 0x70ee <TIMER1_InitCM_ChannelA+0x8>
    70ee:	0f 92       	push	r0
    70f0:	cd b7       	in	r28, 0x3d	; 61
    70f2:	de b7       	in	r29, 0x3e	; 62
    70f4:	89 83       	std	Y+1, r24	; 0x01
    70f6:	7b 83       	std	Y+3, r23	; 0x03
    70f8:	6a 83       	std	Y+2, r22	; 0x02
    70fa:	5d 83       	std	Y+5, r21	; 0x05
    70fc:	4c 83       	std	Y+4, r20	; 0x04
	    clock period = 1 / (operating frequency*Prescaler).
	    Tick equation = clock period * ((a_TIMER1_Top - a_TIMER1_Bottom) + 1).
	    You can also use T1_NO_CLOCK, T1_F_CPU_, T1_F_CPU_8, T1_F_CPU_64,
	    T1_F_CPU_256, T1_F_CPU_1024 for a_Prescaler.
	     */
	SREG  |= (1<<7);// global interrupt bit.
    70fe:	af e5       	ldi	r26, 0x5F	; 95
    7100:	b0 e0       	ldi	r27, 0x00	; 0
    7102:	ef e5       	ldi	r30, 0x5F	; 95
    7104:	f0 e0       	ldi	r31, 0x00	; 0
    7106:	80 81       	ld	r24, Z
    7108:	80 68       	ori	r24, 0x80	; 128
    710a:	8c 93       	st	X, r24
	TCCR1A = (1 << FOC1A);// Enable output compare mode for channel A.
    710c:	ef e4       	ldi	r30, 0x4F	; 79
    710e:	f0 e0       	ldi	r31, 0x00	; 0
    7110:	88 e0       	ldi	r24, 0x08	; 8
    7112:	80 83       	st	Z, r24
	TIMSK |= (1 << OCIE1A);// interrupt enable bit for Timer1 in compare mode for channel A.
    7114:	a9 e5       	ldi	r26, 0x59	; 89
    7116:	b0 e0       	ldi	r27, 0x00	; 0
    7118:	e9 e5       	ldi	r30, 0x59	; 89
    711a:	f0 e0       	ldi	r31, 0x00	; 0
    711c:	80 81       	ld	r24, Z
    711e:	80 61       	ori	r24, 0x10	; 16
    7120:	8c 93       	st	X, r24
	OCR1A = a_TIMER1_Top;// the value that the timer will count to.
    7122:	ea e4       	ldi	r30, 0x4A	; 74
    7124:	f0 e0       	ldi	r31, 0x00	; 0
    7126:	8c 81       	ldd	r24, Y+4	; 0x04
    7128:	9d 81       	ldd	r25, Y+5	; 0x05
    712a:	91 83       	std	Z+1, r25	; 0x01
    712c:	80 83       	st	Z, r24
	TCNT1 = a_TIMER1_Bottom;// the value that the timer will start count from.
    712e:	ec e4       	ldi	r30, 0x4C	; 76
    7130:	f0 e0       	ldi	r31, 0x00	; 0
    7132:	8a 81       	ldd	r24, Y+2	; 0x02
    7134:	9b 81       	ldd	r25, Y+3	; 0x03
    7136:	91 83       	std	Z+1, r25	; 0x01
    7138:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM12);// Enable Compare mode.
    713a:	ee e4       	ldi	r30, 0x4E	; 78
    713c:	f0 e0       	ldi	r31, 0x00	; 0
    713e:	88 e0       	ldi	r24, 0x08	; 8
    7140:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (a_Prescaler & 0x07);// Prescaler.
    7142:	ae e4       	ldi	r26, 0x4E	; 78
    7144:	b0 e0       	ldi	r27, 0x00	; 0
    7146:	ee e4       	ldi	r30, 0x4E	; 78
    7148:	f0 e0       	ldi	r31, 0x00	; 0
    714a:	80 81       	ld	r24, Z
    714c:	98 2f       	mov	r25, r24
    714e:	98 7f       	andi	r25, 0xF8	; 248
    7150:	89 81       	ldd	r24, Y+1	; 0x01
    7152:	87 70       	andi	r24, 0x07	; 7
    7154:	89 2b       	or	r24, r25
    7156:	8c 93       	st	X, r24
}
    7158:	0f 90       	pop	r0
    715a:	0f 90       	pop	r0
    715c:	0f 90       	pop	r0
    715e:	0f 90       	pop	r0
    7160:	0f 90       	pop	r0
    7162:	cf 91       	pop	r28
    7164:	df 91       	pop	r29
    7166:	08 95       	ret

00007168 <TIMER1_InitCM_ChannelB>:

void TIMER1_InitCM_ChannelB(uint8 a_Prescaler, uint16 a_TIMER1_Bottom, uint16 a_TIMER1_Top){
    7168:	df 93       	push	r29
    716a:	cf 93       	push	r28
    716c:	00 d0       	rcall	.+0      	; 0x716e <TIMER1_InitCM_ChannelB+0x6>
    716e:	00 d0       	rcall	.+0      	; 0x7170 <TIMER1_InitCM_ChannelB+0x8>
    7170:	0f 92       	push	r0
    7172:	cd b7       	in	r28, 0x3d	; 61
    7174:	de b7       	in	r29, 0x3e	; 62
    7176:	89 83       	std	Y+1, r24	; 0x01
    7178:	7b 83       	std	Y+3, r23	; 0x03
    717a:	6a 83       	std	Y+2, r22	; 0x02
    717c:	5d 83       	std	Y+5, r21	; 0x05
    717e:	4c 83       	std	Y+4, r20	; 0x04
	    clock period = 1 / (operating frequency*Prescaler).
	    Tick equation = clock period * ((a_TIMER1_Top - a_TIMER1_Bottom) + 1).
	    You can also use T1_NO_CLOCK, T1_F_CPU_, T1_F_CPU_8, T1_F_CPU_64,
	    T1_F_CPU_256, T1_F_CPU_1024 for a_Prescaler.
	     */
	SREG  |= (1<<7);// global interrupt bit.
    7180:	af e5       	ldi	r26, 0x5F	; 95
    7182:	b0 e0       	ldi	r27, 0x00	; 0
    7184:	ef e5       	ldi	r30, 0x5F	; 95
    7186:	f0 e0       	ldi	r31, 0x00	; 0
    7188:	80 81       	ld	r24, Z
    718a:	80 68       	ori	r24, 0x80	; 128
    718c:	8c 93       	st	X, r24
	TCCR1A = (1 << FOC1B);// Enable output compare mode for channel B.
    718e:	ef e4       	ldi	r30, 0x4F	; 79
    7190:	f0 e0       	ldi	r31, 0x00	; 0
    7192:	84 e0       	ldi	r24, 0x04	; 4
    7194:	80 83       	st	Z, r24
	TIMSK |= (1 << OCIE1B);// interrupt enable bit for Timer1 in compare mode for channel B.
    7196:	a9 e5       	ldi	r26, 0x59	; 89
    7198:	b0 e0       	ldi	r27, 0x00	; 0
    719a:	e9 e5       	ldi	r30, 0x59	; 89
    719c:	f0 e0       	ldi	r31, 0x00	; 0
    719e:	80 81       	ld	r24, Z
    71a0:	88 60       	ori	r24, 0x08	; 8
    71a2:	8c 93       	st	X, r24
	OCR1A = a_TIMER1_Top;// the value that the timer will count to.
    71a4:	ea e4       	ldi	r30, 0x4A	; 74
    71a6:	f0 e0       	ldi	r31, 0x00	; 0
    71a8:	8c 81       	ldd	r24, Y+4	; 0x04
    71aa:	9d 81       	ldd	r25, Y+5	; 0x05
    71ac:	91 83       	std	Z+1, r25	; 0x01
    71ae:	80 83       	st	Z, r24
	TCNT1 = a_TIMER1_Bottom;// the value that the timer will start count from.
    71b0:	ec e4       	ldi	r30, 0x4C	; 76
    71b2:	f0 e0       	ldi	r31, 0x00	; 0
    71b4:	8a 81       	ldd	r24, Y+2	; 0x02
    71b6:	9b 81       	ldd	r25, Y+3	; 0x03
    71b8:	91 83       	std	Z+1, r25	; 0x01
    71ba:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM12);// Enable Compare mode.
    71bc:	ee e4       	ldi	r30, 0x4E	; 78
    71be:	f0 e0       	ldi	r31, 0x00	; 0
    71c0:	88 e0       	ldi	r24, 0x08	; 8
    71c2:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (a_Prescaler & 0x07);// Prescaler.
    71c4:	ae e4       	ldi	r26, 0x4E	; 78
    71c6:	b0 e0       	ldi	r27, 0x00	; 0
    71c8:	ee e4       	ldi	r30, 0x4E	; 78
    71ca:	f0 e0       	ldi	r31, 0x00	; 0
    71cc:	80 81       	ld	r24, Z
    71ce:	98 2f       	mov	r25, r24
    71d0:	98 7f       	andi	r25, 0xF8	; 248
    71d2:	89 81       	ldd	r24, Y+1	; 0x01
    71d4:	87 70       	andi	r24, 0x07	; 7
    71d6:	89 2b       	or	r24, r25
    71d8:	8c 93       	st	X, r24
}
    71da:	0f 90       	pop	r0
    71dc:	0f 90       	pop	r0
    71de:	0f 90       	pop	r0
    71e0:	0f 90       	pop	r0
    71e2:	0f 90       	pop	r0
    71e4:	cf 91       	pop	r28
    71e6:	df 91       	pop	r29
    71e8:	08 95       	ret

000071ea <TIMER1_Init_MSeconds>:

void TIMER1_Init_MSeconds(uint8 a_Prescaler, uint16 MS, uint8 Channel){
    71ea:	ef 92       	push	r14
    71ec:	ff 92       	push	r15
    71ee:	0f 93       	push	r16
    71f0:	1f 93       	push	r17
    71f2:	df 93       	push	r29
    71f4:	cf 93       	push	r28
    71f6:	cd b7       	in	r28, 0x3d	; 61
    71f8:	de b7       	in	r29, 0x3e	; 62
    71fa:	2c 97       	sbiw	r28, 0x0c	; 12
    71fc:	0f b6       	in	r0, 0x3f	; 63
    71fe:	f8 94       	cli
    7200:	de bf       	out	0x3e, r29	; 62
    7202:	0f be       	out	0x3f, r0	; 63
    7204:	cd bf       	out	0x3d, r28	; 61
    7206:	8f 83       	std	Y+7, r24	; 0x07
    7208:	79 87       	std	Y+9, r23	; 0x09
    720a:	68 87       	std	Y+8, r22	; 0x08
    720c:	4a 87       	std	Y+10, r20	; 0x0a
	 * You can also use T1_NO_CLOCK, T1_F_CPU_, T1_F_CPU_8, T1_F_CPU_64,
	   T1_F_CPU_256, T1_F_CPU_1024 for a_Prescaler.
	 */
	uint16 a_TIMER_Top;// the value that the timer will count to.
	uint32 Frequency;// Operating Frequency after prescaler.
	switch(a_Prescaler){
    720e:	8f 81       	ldd	r24, Y+7	; 0x07
    7210:	28 2f       	mov	r18, r24
    7212:	30 e0       	ldi	r19, 0x00	; 0
    7214:	3c 87       	std	Y+12, r19	; 0x0c
    7216:	2b 87       	std	Y+11, r18	; 0x0b
    7218:	8b 85       	ldd	r24, Y+11	; 0x0b
    721a:	9c 85       	ldd	r25, Y+12	; 0x0c
    721c:	83 30       	cpi	r24, 0x03	; 3
    721e:	91 05       	cpc	r25, r1
    7220:	69 f1       	breq	.+90     	; 0x727c <TIMER1_Init_MSeconds+0x92>
    7222:	2b 85       	ldd	r18, Y+11	; 0x0b
    7224:	3c 85       	ldd	r19, Y+12	; 0x0c
    7226:	24 30       	cpi	r18, 0x04	; 4
    7228:	31 05       	cpc	r19, r1
    722a:	5c f4       	brge	.+22     	; 0x7242 <TIMER1_Init_MSeconds+0x58>
    722c:	8b 85       	ldd	r24, Y+11	; 0x0b
    722e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7230:	81 30       	cpi	r24, 0x01	; 1
    7232:	91 05       	cpc	r25, r1
    7234:	89 f0       	breq	.+34     	; 0x7258 <TIMER1_Init_MSeconds+0x6e>
    7236:	2b 85       	ldd	r18, Y+11	; 0x0b
    7238:	3c 85       	ldd	r19, Y+12	; 0x0c
    723a:	22 30       	cpi	r18, 0x02	; 2
    723c:	31 05       	cpc	r19, r1
    723e:	a9 f0       	breq	.+42     	; 0x726a <TIMER1_Init_MSeconds+0x80>
    7240:	78 c0       	rjmp	.+240    	; 0x7332 <TIMER1_Init_MSeconds+0x148>
    7242:	8b 85       	ldd	r24, Y+11	; 0x0b
    7244:	9c 85       	ldd	r25, Y+12	; 0x0c
    7246:	84 30       	cpi	r24, 0x04	; 4
    7248:	91 05       	cpc	r25, r1
    724a:	09 f1       	breq	.+66     	; 0x728e <TIMER1_Init_MSeconds+0xa4>
    724c:	2b 85       	ldd	r18, Y+11	; 0x0b
    724e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7250:	25 30       	cpi	r18, 0x05	; 5
    7252:	31 05       	cpc	r19, r1
    7254:	29 f1       	breq	.+74     	; 0x72a0 <TIMER1_Init_MSeconds+0xb6>
    7256:	6d c0       	rjmp	.+218    	; 0x7332 <TIMER1_Init_MSeconds+0x148>
	case T1_F_CPU_:
		Frequency = (F_CPU);
    7258:	80 e0       	ldi	r24, 0x00	; 0
    725a:	90 ec       	ldi	r25, 0xC0	; 192
    725c:	a8 ea       	ldi	r26, 0xA8	; 168
    725e:	b0 e0       	ldi	r27, 0x00	; 0
    7260:	89 83       	std	Y+1, r24	; 0x01
    7262:	9a 83       	std	Y+2, r25	; 0x02
    7264:	ab 83       	std	Y+3, r26	; 0x03
    7266:	bc 83       	std	Y+4, r27	; 0x04
    7268:	23 c0       	rjmp	.+70     	; 0x72b0 <TIMER1_Init_MSeconds+0xc6>
		break;

	case T1_F_CPU_8:
		Frequency = (F_CPU)/8;
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	98 e1       	ldi	r25, 0x18	; 24
    726e:	a5 e1       	ldi	r26, 0x15	; 21
    7270:	b0 e0       	ldi	r27, 0x00	; 0
    7272:	89 83       	std	Y+1, r24	; 0x01
    7274:	9a 83       	std	Y+2, r25	; 0x02
    7276:	ab 83       	std	Y+3, r26	; 0x03
    7278:	bc 83       	std	Y+4, r27	; 0x04
    727a:	1a c0       	rjmp	.+52     	; 0x72b0 <TIMER1_Init_MSeconds+0xc6>
		break;

	case T1_F_CPU_64:
		Frequency = (F_CPU)/64;
    727c:	80 e0       	ldi	r24, 0x00	; 0
    727e:	93 ea       	ldi	r25, 0xA3	; 163
    7280:	a2 e0       	ldi	r26, 0x02	; 2
    7282:	b0 e0       	ldi	r27, 0x00	; 0
    7284:	89 83       	std	Y+1, r24	; 0x01
    7286:	9a 83       	std	Y+2, r25	; 0x02
    7288:	ab 83       	std	Y+3, r26	; 0x03
    728a:	bc 83       	std	Y+4, r27	; 0x04
    728c:	11 c0       	rjmp	.+34     	; 0x72b0 <TIMER1_Init_MSeconds+0xc6>
		break;

	case T1_F_CPU_256:
		Frequency = (F_CPU)/256;
    728e:	80 ec       	ldi	r24, 0xC0	; 192
    7290:	98 ea       	ldi	r25, 0xA8	; 168
    7292:	a0 e0       	ldi	r26, 0x00	; 0
    7294:	b0 e0       	ldi	r27, 0x00	; 0
    7296:	89 83       	std	Y+1, r24	; 0x01
    7298:	9a 83       	std	Y+2, r25	; 0x02
    729a:	ab 83       	std	Y+3, r26	; 0x03
    729c:	bc 83       	std	Y+4, r27	; 0x04
    729e:	08 c0       	rjmp	.+16     	; 0x72b0 <TIMER1_Init_MSeconds+0xc6>
		break;

	case T1_F_CPU_1024:
		Frequency = (F_CPU)/1024;
    72a0:	80 e3       	ldi	r24, 0x30	; 48
    72a2:	9a e2       	ldi	r25, 0x2A	; 42
    72a4:	a0 e0       	ldi	r26, 0x00	; 0
    72a6:	b0 e0       	ldi	r27, 0x00	; 0
    72a8:	89 83       	std	Y+1, r24	; 0x01
    72aa:	9a 83       	std	Y+2, r25	; 0x02
    72ac:	ab 83       	std	Y+3, r26	; 0x03
    72ae:	bc 83       	std	Y+4, r27	; 0x04
	default:
		return;
		break;
	}

	a_TIMER_Top = (float32)(((float32)MS/1000)) * Frequency;
    72b0:	88 85       	ldd	r24, Y+8	; 0x08
    72b2:	99 85       	ldd	r25, Y+9	; 0x09
    72b4:	cc 01       	movw	r24, r24
    72b6:	a0 e0       	ldi	r26, 0x00	; 0
    72b8:	b0 e0       	ldi	r27, 0x00	; 0
    72ba:	bc 01       	movw	r22, r24
    72bc:	cd 01       	movw	r24, r26
    72be:	0e 94 8e 11 	call	0x231c	; 0x231c <__floatunsisf>
    72c2:	dc 01       	movw	r26, r24
    72c4:	cb 01       	movw	r24, r22
    72c6:	bc 01       	movw	r22, r24
    72c8:	cd 01       	movw	r24, r26
    72ca:	20 e0       	ldi	r18, 0x00	; 0
    72cc:	30 e0       	ldi	r19, 0x00	; 0
    72ce:	4a e7       	ldi	r20, 0x7A	; 122
    72d0:	54 e4       	ldi	r21, 0x44	; 68
    72d2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    72d6:	dc 01       	movw	r26, r24
    72d8:	cb 01       	movw	r24, r22
    72da:	7c 01       	movw	r14, r24
    72dc:	8d 01       	movw	r16, r26
    72de:	69 81       	ldd	r22, Y+1	; 0x01
    72e0:	7a 81       	ldd	r23, Y+2	; 0x02
    72e2:	8b 81       	ldd	r24, Y+3	; 0x03
    72e4:	9c 81       	ldd	r25, Y+4	; 0x04
    72e6:	0e 94 8e 11 	call	0x231c	; 0x231c <__floatunsisf>
    72ea:	9b 01       	movw	r18, r22
    72ec:	ac 01       	movw	r20, r24
    72ee:	c8 01       	movw	r24, r16
    72f0:	b7 01       	movw	r22, r14
    72f2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    72f6:	dc 01       	movw	r26, r24
    72f8:	cb 01       	movw	r24, r22
    72fa:	bc 01       	movw	r22, r24
    72fc:	cd 01       	movw	r24, r26
    72fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7302:	dc 01       	movw	r26, r24
    7304:	cb 01       	movw	r24, r22
    7306:	9e 83       	std	Y+6, r25	; 0x06
    7308:	8d 83       	std	Y+5, r24	; 0x05

	if(Channel){
    730a:	8a 85       	ldd	r24, Y+10	; 0x0a
    730c:	88 23       	and	r24, r24
    730e:	49 f0       	breq	.+18     	; 0x7322 <TIMER1_Init_MSeconds+0x138>
		TIMER1_InitCM_ChannelB(a_Prescaler, 0, a_TIMER_Top);
    7310:	2d 81       	ldd	r18, Y+5	; 0x05
    7312:	3e 81       	ldd	r19, Y+6	; 0x06
    7314:	8f 81       	ldd	r24, Y+7	; 0x07
    7316:	60 e0       	ldi	r22, 0x00	; 0
    7318:	70 e0       	ldi	r23, 0x00	; 0
    731a:	a9 01       	movw	r20, r18
    731c:	0e 94 b4 38 	call	0x7168	; 0x7168 <TIMER1_InitCM_ChannelB>
    7320:	08 c0       	rjmp	.+16     	; 0x7332 <TIMER1_Init_MSeconds+0x148>
	}
	else{
		TIMER1_InitCM_ChannelA(a_Prescaler, 0, a_TIMER_Top);
    7322:	2d 81       	ldd	r18, Y+5	; 0x05
    7324:	3e 81       	ldd	r19, Y+6	; 0x06
    7326:	8f 81       	ldd	r24, Y+7	; 0x07
    7328:	60 e0       	ldi	r22, 0x00	; 0
    732a:	70 e0       	ldi	r23, 0x00	; 0
    732c:	a9 01       	movw	r20, r18
    732e:	0e 94 73 38 	call	0x70e6	; 0x70e6 <TIMER1_InitCM_ChannelA>
	}
}
    7332:	2c 96       	adiw	r28, 0x0c	; 12
    7334:	0f b6       	in	r0, 0x3f	; 63
    7336:	f8 94       	cli
    7338:	de bf       	out	0x3e, r29	; 62
    733a:	0f be       	out	0x3f, r0	; 63
    733c:	cd bf       	out	0x3d, r28	; 61
    733e:	cf 91       	pop	r28
    7340:	df 91       	pop	r29
    7342:	1f 91       	pop	r17
    7344:	0f 91       	pop	r16
    7346:	ff 90       	pop	r15
    7348:	ef 90       	pop	r14
    734a:	08 95       	ret

0000734c <PTR_TIM1_Handler_Setter>:

void PTR_TIM1_Handler_Setter(void(*ptr)(void))
{
    734c:	df 93       	push	r29
    734e:	cf 93       	push	r28
    7350:	00 d0       	rcall	.+0      	; 0x7352 <PTR_TIM1_Handler_Setter+0x6>
    7352:	cd b7       	in	r28, 0x3d	; 61
    7354:	de b7       	in	r29, 0x3e	; 62
    7356:	9a 83       	std	Y+2, r25	; 0x02
    7358:	89 83       	std	Y+1, r24	; 0x01
	PTR_TIM1_Handler = ptr;
    735a:	89 81       	ldd	r24, Y+1	; 0x01
    735c:	9a 81       	ldd	r25, Y+2	; 0x02
    735e:	90 93 86 04 	sts	0x0486, r25
    7362:	80 93 85 04 	sts	0x0485, r24
}
    7366:	0f 90       	pop	r0
    7368:	0f 90       	pop	r0
    736a:	cf 91       	pop	r28
    736c:	df 91       	pop	r29
    736e:	08 95       	ret

00007370 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    7370:	1f 92       	push	r1
    7372:	0f 92       	push	r0
    7374:	0f b6       	in	r0, 0x3f	; 63
    7376:	0f 92       	push	r0
    7378:	11 24       	eor	r1, r1
    737a:	2f 93       	push	r18
    737c:	3f 93       	push	r19
    737e:	4f 93       	push	r20
    7380:	5f 93       	push	r21
    7382:	6f 93       	push	r22
    7384:	7f 93       	push	r23
    7386:	8f 93       	push	r24
    7388:	9f 93       	push	r25
    738a:	af 93       	push	r26
    738c:	bf 93       	push	r27
    738e:	ef 93       	push	r30
    7390:	ff 93       	push	r31
    7392:	df 93       	push	r29
    7394:	cf 93       	push	r28
    7396:	cd b7       	in	r28, 0x3d	; 61
    7398:	de b7       	in	r29, 0x3e	; 62
	PTR_TIM1_Handler();
    739a:	e0 91 85 04 	lds	r30, 0x0485
    739e:	f0 91 86 04 	lds	r31, 0x0486
    73a2:	09 95       	icall
}
    73a4:	cf 91       	pop	r28
    73a6:	df 91       	pop	r29
    73a8:	ff 91       	pop	r31
    73aa:	ef 91       	pop	r30
    73ac:	bf 91       	pop	r27
    73ae:	af 91       	pop	r26
    73b0:	9f 91       	pop	r25
    73b2:	8f 91       	pop	r24
    73b4:	7f 91       	pop	r23
    73b6:	6f 91       	pop	r22
    73b8:	5f 91       	pop	r21
    73ba:	4f 91       	pop	r20
    73bc:	3f 91       	pop	r19
    73be:	2f 91       	pop	r18
    73c0:	0f 90       	pop	r0
    73c2:	0f be       	out	0x3f, r0	; 63
    73c4:	0f 90       	pop	r0
    73c6:	1f 90       	pop	r1
    73c8:	18 95       	reti

000073ca <STUB>:

void STUB(void)
{
    73ca:	df 93       	push	r29
    73cc:	cf 93       	push	r28
    73ce:	cd b7       	in	r28, 0x3d	; 61
    73d0:	de b7       	in	r29, 0x3e	; 62

}
    73d2:	cf 91       	pop	r28
    73d4:	df 91       	pop	r29
    73d6:	08 95       	ret

000073d8 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    73d8:	df 93       	push	r29
    73da:	cf 93       	push	r28
    73dc:	cd b7       	in	r28, 0x3d	; 61
    73de:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    73e0:	eb e2       	ldi	r30, 0x2B	; 43
    73e2:	f0 e0       	ldi	r31, 0x00	; 0
    73e4:	82 e0       	ldi	r24, 0x02	; 2
    73e6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    73e8:	ea e2       	ldi	r30, 0x2A	; 42
    73ea:	f0 e0       	ldi	r31, 0x00	; 0
    73ec:	88 e1       	ldi	r24, 0x18	; 24
    73ee:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    73f0:	e0 e4       	ldi	r30, 0x40	; 64
    73f2:	f0 e0       	ldi	r31, 0x00	; 0
    73f4:	86 e8       	ldi	r24, 0x86	; 134
    73f6:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    73f8:	e0 e4       	ldi	r30, 0x40	; 64
    73fa:	f0 e0       	ldi	r31, 0x00	; 0
    73fc:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    73fe:	e9 e2       	ldi	r30, 0x29	; 41
    7400:	f0 e0       	ldi	r31, 0x00	; 0
    7402:	8b e0       	ldi	r24, 0x0B	; 11
    7404:	80 83       	st	Z, r24
}
    7406:	cf 91       	pop	r28
    7408:	df 91       	pop	r29
    740a:	08 95       	ret

0000740c <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    740c:	df 93       	push	r29
    740e:	cf 93       	push	r28
    7410:	0f 92       	push	r0
    7412:	cd b7       	in	r28, 0x3d	; 61
    7414:	de b7       	in	r29, 0x3e	; 62
    7416:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    7418:	eb e2       	ldi	r30, 0x2B	; 43
    741a:	f0 e0       	ldi	r31, 0x00	; 0
    741c:	80 81       	ld	r24, Z
    741e:	88 2f       	mov	r24, r24
    7420:	90 e0       	ldi	r25, 0x00	; 0
    7422:	80 72       	andi	r24, 0x20	; 32
    7424:	90 70       	andi	r25, 0x00	; 0
    7426:	00 97       	sbiw	r24, 0x00	; 0
    7428:	b9 f3       	breq	.-18     	; 0x7418 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    742a:	ec e2       	ldi	r30, 0x2C	; 44
    742c:	f0 e0       	ldi	r31, 0x00	; 0
    742e:	89 81       	ldd	r24, Y+1	; 0x01
    7430:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    7432:	0f 90       	pop	r0
    7434:	cf 91       	pop	r28
    7436:	df 91       	pop	r29
    7438:	08 95       	ret

0000743a <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    743a:	df 93       	push	r29
    743c:	cf 93       	push	r28
    743e:	cd b7       	in	r28, 0x3d	; 61
    7440:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    7442:	eb e2       	ldi	r30, 0x2B	; 43
    7444:	f0 e0       	ldi	r31, 0x00	; 0
    7446:	80 81       	ld	r24, Z
    7448:	88 23       	and	r24, r24
    744a:	dc f7       	brge	.-10     	; 0x7442 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    744c:	ec e2       	ldi	r30, 0x2C	; 44
    744e:	f0 e0       	ldi	r31, 0x00	; 0
    7450:	80 81       	ld	r24, Z
}
    7452:	cf 91       	pop	r28
    7454:	df 91       	pop	r29
    7456:	08 95       	ret

00007458 <main>:
 *      Author: Yahia
 */
#include "ATM.h"

int main (void)
{
    7458:	df 93       	push	r29
    745a:	cf 93       	push	r28
    745c:	cd b7       	in	r28, 0x3d	; 61
    745e:	de b7       	in	r29, 0x3e	; 62
	ATM_Start();
    7460:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <ATM_Start>
    7464:	ff cf       	rjmp	.-2      	; 0x7464 <main+0xc>

00007466 <__mulsi3>:
    7466:	62 9f       	mul	r22, r18
    7468:	d0 01       	movw	r26, r0
    746a:	73 9f       	mul	r23, r19
    746c:	f0 01       	movw	r30, r0
    746e:	82 9f       	mul	r24, r18
    7470:	e0 0d       	add	r30, r0
    7472:	f1 1d       	adc	r31, r1
    7474:	64 9f       	mul	r22, r20
    7476:	e0 0d       	add	r30, r0
    7478:	f1 1d       	adc	r31, r1
    747a:	92 9f       	mul	r25, r18
    747c:	f0 0d       	add	r31, r0
    747e:	83 9f       	mul	r24, r19
    7480:	f0 0d       	add	r31, r0
    7482:	74 9f       	mul	r23, r20
    7484:	f0 0d       	add	r31, r0
    7486:	65 9f       	mul	r22, r21
    7488:	f0 0d       	add	r31, r0
    748a:	99 27       	eor	r25, r25
    748c:	72 9f       	mul	r23, r18
    748e:	b0 0d       	add	r27, r0
    7490:	e1 1d       	adc	r30, r1
    7492:	f9 1f       	adc	r31, r25
    7494:	63 9f       	mul	r22, r19
    7496:	b0 0d       	add	r27, r0
    7498:	e1 1d       	adc	r30, r1
    749a:	f9 1f       	adc	r31, r25
    749c:	bd 01       	movw	r22, r26
    749e:	cf 01       	movw	r24, r30
    74a0:	11 24       	eor	r1, r1
    74a2:	08 95       	ret

000074a4 <__udivmodqi4>:
    74a4:	99 1b       	sub	r25, r25
    74a6:	79 e0       	ldi	r23, 0x09	; 9
    74a8:	04 c0       	rjmp	.+8      	; 0x74b2 <__udivmodqi4_ep>

000074aa <__udivmodqi4_loop>:
    74aa:	99 1f       	adc	r25, r25
    74ac:	96 17       	cp	r25, r22
    74ae:	08 f0       	brcs	.+2      	; 0x74b2 <__udivmodqi4_ep>
    74b0:	96 1b       	sub	r25, r22

000074b2 <__udivmodqi4_ep>:
    74b2:	88 1f       	adc	r24, r24
    74b4:	7a 95       	dec	r23
    74b6:	c9 f7       	brne	.-14     	; 0x74aa <__udivmodqi4_loop>
    74b8:	80 95       	com	r24
    74ba:	08 95       	ret

000074bc <__udivmodsi4>:
    74bc:	a1 e2       	ldi	r26, 0x21	; 33
    74be:	1a 2e       	mov	r1, r26
    74c0:	aa 1b       	sub	r26, r26
    74c2:	bb 1b       	sub	r27, r27
    74c4:	fd 01       	movw	r30, r26
    74c6:	0d c0       	rjmp	.+26     	; 0x74e2 <__udivmodsi4_ep>

000074c8 <__udivmodsi4_loop>:
    74c8:	aa 1f       	adc	r26, r26
    74ca:	bb 1f       	adc	r27, r27
    74cc:	ee 1f       	adc	r30, r30
    74ce:	ff 1f       	adc	r31, r31
    74d0:	a2 17       	cp	r26, r18
    74d2:	b3 07       	cpc	r27, r19
    74d4:	e4 07       	cpc	r30, r20
    74d6:	f5 07       	cpc	r31, r21
    74d8:	20 f0       	brcs	.+8      	; 0x74e2 <__udivmodsi4_ep>
    74da:	a2 1b       	sub	r26, r18
    74dc:	b3 0b       	sbc	r27, r19
    74de:	e4 0b       	sbc	r30, r20
    74e0:	f5 0b       	sbc	r31, r21

000074e2 <__udivmodsi4_ep>:
    74e2:	66 1f       	adc	r22, r22
    74e4:	77 1f       	adc	r23, r23
    74e6:	88 1f       	adc	r24, r24
    74e8:	99 1f       	adc	r25, r25
    74ea:	1a 94       	dec	r1
    74ec:	69 f7       	brne	.-38     	; 0x74c8 <__udivmodsi4_loop>
    74ee:	60 95       	com	r22
    74f0:	70 95       	com	r23
    74f2:	80 95       	com	r24
    74f4:	90 95       	com	r25
    74f6:	9b 01       	movw	r18, r22
    74f8:	ac 01       	movw	r20, r24
    74fa:	bd 01       	movw	r22, r26
    74fc:	cf 01       	movw	r24, r30
    74fe:	08 95       	ret

00007500 <__divmodsi4>:
    7500:	97 fb       	bst	r25, 7
    7502:	09 2e       	mov	r0, r25
    7504:	05 26       	eor	r0, r21
    7506:	0e d0       	rcall	.+28     	; 0x7524 <__divmodsi4_neg1>
    7508:	57 fd       	sbrc	r21, 7
    750a:	04 d0       	rcall	.+8      	; 0x7514 <__divmodsi4_neg2>
    750c:	d7 df       	rcall	.-82     	; 0x74bc <__udivmodsi4>
    750e:	0a d0       	rcall	.+20     	; 0x7524 <__divmodsi4_neg1>
    7510:	00 1c       	adc	r0, r0
    7512:	38 f4       	brcc	.+14     	; 0x7522 <__divmodsi4_exit>

00007514 <__divmodsi4_neg2>:
    7514:	50 95       	com	r21
    7516:	40 95       	com	r20
    7518:	30 95       	com	r19
    751a:	21 95       	neg	r18
    751c:	3f 4f       	sbci	r19, 0xFF	; 255
    751e:	4f 4f       	sbci	r20, 0xFF	; 255
    7520:	5f 4f       	sbci	r21, 0xFF	; 255

00007522 <__divmodsi4_exit>:
    7522:	08 95       	ret

00007524 <__divmodsi4_neg1>:
    7524:	f6 f7       	brtc	.-4      	; 0x7522 <__divmodsi4_exit>
    7526:	90 95       	com	r25
    7528:	80 95       	com	r24
    752a:	70 95       	com	r23
    752c:	61 95       	neg	r22
    752e:	7f 4f       	sbci	r23, 0xFF	; 255
    7530:	8f 4f       	sbci	r24, 0xFF	; 255
    7532:	9f 4f       	sbci	r25, 0xFF	; 255
    7534:	08 95       	ret

00007536 <__prologue_saves__>:
    7536:	2f 92       	push	r2
    7538:	3f 92       	push	r3
    753a:	4f 92       	push	r4
    753c:	5f 92       	push	r5
    753e:	6f 92       	push	r6
    7540:	7f 92       	push	r7
    7542:	8f 92       	push	r8
    7544:	9f 92       	push	r9
    7546:	af 92       	push	r10
    7548:	bf 92       	push	r11
    754a:	cf 92       	push	r12
    754c:	df 92       	push	r13
    754e:	ef 92       	push	r14
    7550:	ff 92       	push	r15
    7552:	0f 93       	push	r16
    7554:	1f 93       	push	r17
    7556:	cf 93       	push	r28
    7558:	df 93       	push	r29
    755a:	cd b7       	in	r28, 0x3d	; 61
    755c:	de b7       	in	r29, 0x3e	; 62
    755e:	ca 1b       	sub	r28, r26
    7560:	db 0b       	sbc	r29, r27
    7562:	0f b6       	in	r0, 0x3f	; 63
    7564:	f8 94       	cli
    7566:	de bf       	out	0x3e, r29	; 62
    7568:	0f be       	out	0x3f, r0	; 63
    756a:	cd bf       	out	0x3d, r28	; 61
    756c:	09 94       	ijmp

0000756e <__epilogue_restores__>:
    756e:	2a 88       	ldd	r2, Y+18	; 0x12
    7570:	39 88       	ldd	r3, Y+17	; 0x11
    7572:	48 88       	ldd	r4, Y+16	; 0x10
    7574:	5f 84       	ldd	r5, Y+15	; 0x0f
    7576:	6e 84       	ldd	r6, Y+14	; 0x0e
    7578:	7d 84       	ldd	r7, Y+13	; 0x0d
    757a:	8c 84       	ldd	r8, Y+12	; 0x0c
    757c:	9b 84       	ldd	r9, Y+11	; 0x0b
    757e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7580:	b9 84       	ldd	r11, Y+9	; 0x09
    7582:	c8 84       	ldd	r12, Y+8	; 0x08
    7584:	df 80       	ldd	r13, Y+7	; 0x07
    7586:	ee 80       	ldd	r14, Y+6	; 0x06
    7588:	fd 80       	ldd	r15, Y+5	; 0x05
    758a:	0c 81       	ldd	r16, Y+4	; 0x04
    758c:	1b 81       	ldd	r17, Y+3	; 0x03
    758e:	aa 81       	ldd	r26, Y+2	; 0x02
    7590:	b9 81       	ldd	r27, Y+1	; 0x01
    7592:	ce 0f       	add	r28, r30
    7594:	d1 1d       	adc	r29, r1
    7596:	0f b6       	in	r0, 0x3f	; 63
    7598:	f8 94       	cli
    759a:	de bf       	out	0x3e, r29	; 62
    759c:	0f be       	out	0x3f, r0	; 63
    759e:	cd bf       	out	0x3d, r28	; 61
    75a0:	ed 01       	movw	r28, r26
    75a2:	08 95       	ret

000075a4 <__eerd_byte_m32>:
    75a4:	e1 99       	sbic	0x1c, 1	; 28
    75a6:	fe cf       	rjmp	.-4      	; 0x75a4 <__eerd_byte_m32>
    75a8:	9f bb       	out	0x1f, r25	; 31
    75aa:	8e bb       	out	0x1e, r24	; 30
    75ac:	e0 9a       	sbi	0x1c, 0	; 28
    75ae:	99 27       	eor	r25, r25
    75b0:	8d b3       	in	r24, 0x1d	; 29
    75b2:	08 95       	ret

000075b4 <__eeupd_byte_m32>:
    75b4:	26 2f       	mov	r18, r22

000075b6 <__eeupd_r18_m32>:
    75b6:	e1 99       	sbic	0x1c, 1	; 28
    75b8:	fe cf       	rjmp	.-4      	; 0x75b6 <__eeupd_r18_m32>
    75ba:	9f bb       	out	0x1f, r25	; 31
    75bc:	8e bb       	out	0x1e, r24	; 30
    75be:	e0 9a       	sbi	0x1c, 0	; 28
    75c0:	01 97       	sbiw	r24, 0x01	; 1
    75c2:	0d b2       	in	r0, 0x1d	; 29
    75c4:	02 16       	cp	r0, r18
    75c6:	31 f0       	breq	.+12     	; 0x75d4 <__eeupd_r18_m32+0x1e>
    75c8:	2d bb       	out	0x1d, r18	; 29
    75ca:	0f b6       	in	r0, 0x3f	; 63
    75cc:	f8 94       	cli
    75ce:	e2 9a       	sbi	0x1c, 2	; 28
    75d0:	e1 9a       	sbi	0x1c, 1	; 28
    75d2:	0f be       	out	0x3f, r0	; 63
    75d4:	08 95       	ret

000075d6 <_exit>:
    75d6:	f8 94       	cli

000075d8 <__stop_program>:
    75d8:	ff cf       	rjmp	.-2      	; 0x75d8 <__stop_program>
