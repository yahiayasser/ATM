
ATM_Server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000050e4  00005178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000069b  0080006a  0080006a  00005182  2**0
                  ALLOC
  3 .stab         00004e0c  00000000  00000000  00005184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e1f  00000000  00000000  00009f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000beef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c05f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f940  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000faa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fd2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000104fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <main>
      8a:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 28 	jmp	0x5072	; 0x5072 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 28 	jmp	0x508a	; 0x508a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 28 	jmp	0x508a	; 0x508a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 28 	jmp	0x5072	; 0x5072 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 28 	jmp	0x508a	; 0x508a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 28 	jmp	0x508a	; 0x508a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 28 	jmp	0x508a	; 0x508a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 28 	jmp	0x5092	; 0x5092 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BST_Init>:
#if(BST_PRINT == BST_PRINTING)
#include <stdio.h>
#include <stdlib.h>
#endif

void BST_Init(BST* BST_ptr){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BST_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <BST_Init+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9d 83       	std	Y+5, r25	; 0x05
     b56:	8c 83       	std	Y+4, r24	; 0x04
	BST_node* Ptr_Elemnets = (BST_node*)&(BST_ptr -> Tree);
     b58:	8c 81       	ldd	r24, Y+4	; 0x04
     b5a:	9d 81       	ldd	r25, Y+5	; 0x05
     b5c:	9b 83       	std	Y+3, r25	; 0x03
     b5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
     b60:	19 82       	std	Y+1, r1	; 0x01
     b62:	67 c0       	rjmp	.+206    	; 0xc32 <BST_Init+0xec>
	while(count != BST_Max_Elements){
		Ptr_Elemnets[count].Data = 0;
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	9c 01       	movw	r18, r24
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	fc 01       	movw	r30, r24
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	14 82       	std	Z+4, r1	; 0x04
		Ptr_Elemnets[count].PtrToLeftNode = NULL;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	9c 01       	movw	r18, r24
     b8c:	22 0f       	add	r18, r18
     b8e:	33 1f       	adc	r19, r19
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	22 0f       	add	r18, r18
     b96:	33 1f       	adc	r19, r19
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	9b 81       	ldd	r25, Y+3	; 0x03
     b9c:	fc 01       	movw	r30, r24
     b9e:	e2 0f       	add	r30, r18
     ba0:	f3 1f       	adc	r31, r19
     ba2:	11 82       	std	Z+1, r1	; 0x01
     ba4:	10 82       	st	Z, r1
		Ptr_Elemnets[count].PtrToRightNode = NULL;
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9c 01       	movw	r18, r24
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	22 0f       	add	r18, r18
     bb8:	33 1f       	adc	r19, r19
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	9b 81       	ldd	r25, Y+3	; 0x03
     bbe:	fc 01       	movw	r30, r24
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	13 82       	std	Z+3, r1	; 0x03
     bc6:	12 82       	std	Z+2, r1	; 0x02
		Ptr_Elemnets[count].State = BST_NODE_EMPTY;
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9c 01       	movw	r18, r24
     bd0:	22 0f       	add	r18, r18
     bd2:	33 1f       	adc	r19, r19
     bd4:	22 0f       	add	r18, r18
     bd6:	33 1f       	adc	r19, r19
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	9b 81       	ldd	r25, Y+3	; 0x03
     be0:	fc 01       	movw	r30, r24
     be2:	e2 0f       	add	r30, r18
     be4:	f3 1f       	adc	r31, r19
     be6:	16 82       	std	Z+6, r1	; 0x06
		Ptr_Elemnets[count].Index = MAX_Index;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	9c 01       	movw	r18, r24
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03
     c00:	fc 01       	movw	r30, r24
     c02:	e2 0f       	add	r30, r18
     c04:	f3 1f       	adc	r31, r19
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	85 83       	std	Z+5, r24	; 0x05
		Ptr_Elemnets[count].leaf_state = BST_NODE_NULL;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9c 01       	movw	r18, r24
     c12:	22 0f       	add	r18, r18
     c14:	33 1f       	adc	r19, r19
     c16:	22 0f       	add	r18, r18
     c18:	33 1f       	adc	r19, r19
     c1a:	22 0f       	add	r18, r18
     c1c:	33 1f       	adc	r19, r19
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	fc 01       	movw	r30, r24
     c24:	e2 0f       	add	r30, r18
     c26:	f3 1f       	adc	r31, r19
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	87 83       	std	Z+7, r24	; 0x07
		count++;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	89 83       	std	Y+1, r24	; 0x01
#endif

void BST_Init(BST* BST_ptr){
	BST_node* Ptr_Elemnets = (BST_node*)&(BST_ptr -> Tree);
	uint8 count = 0;
	while(count != BST_Max_Elements){
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	83 3d       	cpi	r24, 0xD3	; 211
     c36:	09 f0       	breq	.+2      	; 0xc3a <BST_Init+0xf4>
     c38:	95 cf       	rjmp	.-214    	; 0xb64 <BST_Init+0x1e>
		Ptr_Elemnets[count].State = BST_NODE_EMPTY;
		Ptr_Elemnets[count].Index = MAX_Index;
		Ptr_Elemnets[count].leaf_state = BST_NODE_NULL;
		count++;
	}
	BST_ptr -> Root = NULL;
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	9d 81       	ldd	r25, Y+5	; 0x05
     c3e:	fc 01       	movw	r30, r24
     c40:	e8 56       	subi	r30, 0x68	; 104
     c42:	f9 4f       	sbci	r31, 0xF9	; 249
     c44:	11 82       	std	Z+1, r1	; 0x01
     c46:	10 82       	st	Z, r1
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <BST_Insert>:

BST_node* BST_Insert(BST* BST_ptr, BST_DataSize data){
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	2d 97       	sbiw	r28, 0x0d	; 13
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	9a 87       	std	Y+10, r25	; 0x0a
     c6e:	89 87       	std	Y+9, r24	; 0x09
     c70:	6b 87       	std	Y+11, r22	; 0x0b

	BST_node* Ptr_Elemnets = (BST_node*)&(BST_ptr -> Tree);
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	98 87       	std	Y+8, r25	; 0x08
     c78:	8f 83       	std	Y+7, r24	; 0x07
	BST_node* current = BST_ptr -> Root;
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
     c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7e:	fc 01       	movw	r30, r24
     c80:	e8 56       	subi	r30, 0x68	; 104
     c82:	f9 4f       	sbci	r31, 0xF9	; 249
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	9e 83       	std	Y+6, r25	; 0x06
     c8a:	8d 83       	std	Y+5, r24	; 0x05
	uint8 count = 0;
     c8c:	1c 82       	std	Y+4, r1	; 0x04
	uint8 index = 0;
     c8e:	1b 82       	std	Y+3, r1	; 0x03
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <BST_Insert+0x40>
	BST_node* NodeRef;
	while((count < BST_Max_Elements) && ((Ptr_Elemnets[count].State) == BST_NODE_OCCUPIED)){
		count++;
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	8c 83       	std	Y+4, r24	; 0x04
	BST_node* Ptr_Elemnets = (BST_node*)&(BST_ptr -> Tree);
	BST_node* current = BST_ptr -> Root;
	uint8 count = 0;
	uint8 index = 0;
	BST_node* NodeRef;
	while((count < BST_Max_Elements) && ((Ptr_Elemnets[count].State) == BST_NODE_OCCUPIED)){
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	83 3d       	cpi	r24, 0xD3	; 211
     c9c:	90 f4       	brcc	.+36     	; 0xcc2 <BST_Insert+0x6a>
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9c 01       	movw	r18, r24
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	8f 81       	ldd	r24, Y+7	; 0x07
     cb4:	98 85       	ldd	r25, Y+8	; 0x08
     cb6:	fc 01       	movw	r30, r24
     cb8:	e2 0f       	add	r30, r18
     cba:	f3 1f       	adc	r31, r19
     cbc:	86 81       	ldd	r24, Z+6	; 0x06
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	41 f3       	breq	.-48     	; 0xc92 <BST_Insert+0x3a>
		count++;
	}
	if(count == BST_Max_Elements){
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	83 3d       	cpi	r24, 0xD3	; 211
     cc6:	19 f4       	brne	.+6      	; 0xcce <BST_Insert+0x76>
		return NULL;
     cc8:	1d 86       	std	Y+13, r1	; 0x0d
     cca:	1c 86       	std	Y+12, r1	; 0x0c
     ccc:	83 c1       	rjmp	.+774    	; 0xfd4 <BST_Insert+0x37c>
	}
	else{
		Ptr_Elemnets[count].State = BST_NODE_OCCUPIED;
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9c 01       	movw	r18, r24
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	8f 81       	ldd	r24, Y+7	; 0x07
     ce4:	98 85       	ldd	r25, Y+8	; 0x08
     ce6:	fc 01       	movw	r30, r24
     ce8:	e2 0f       	add	r30, r18
     cea:	f3 1f       	adc	r31, r19
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	86 83       	std	Z+6, r24	; 0x06
		Ptr_Elemnets[count].Data = data;
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9c 01       	movw	r18, r24
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	8f 81       	ldd	r24, Y+7	; 0x07
     d06:	98 85       	ldd	r25, Y+8	; 0x08
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 0f       	add	r30, r18
     d0c:	f3 1f       	adc	r31, r19
     d0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d10:	84 83       	std	Z+4, r24	; 0x04
		Ptr_Elemnets[count].leaf_state = BST_NODE_LEAF;
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9c 01       	movw	r18, r24
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	8f 81       	ldd	r24, Y+7	; 0x07
     d28:	98 85       	ldd	r25, Y+8	; 0x08
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	17 82       	std	Z+7, r1	; 0x07
		NodeRef = &Ptr_Elemnets[count];
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 01       	movw	r18, r24
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	8f 81       	ldd	r24, Y+7	; 0x07
     d48:	98 85       	ldd	r25, Y+8	; 0x08
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
		if(current == NULL){
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	09 f0       	breq	.+2      	; 0xd5c <BST_Insert+0x104>
     d5a:	81 c0       	rjmp	.+258    	; 0xe5e <BST_Insert+0x206>
			Ptr_Elemnets[count].Index = index;
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9c 01       	movw	r18, r24
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	22 0f       	add	r18, r18
     d6a:	33 1f       	adc	r19, r19
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	85 83       	std	Z+5, r24	; 0x05
			BST_ptr -> Root = &Ptr_Elemnets[count];
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	9c 01       	movw	r18, r24
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	8f 81       	ldd	r24, Y+7	; 0x07
     d94:	98 85       	ldd	r25, Y+8	; 0x08
     d96:	28 0f       	add	r18, r24
     d98:	39 1f       	adc	r19, r25
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	fc 01       	movw	r30, r24
     da0:	e8 56       	subi	r30, 0x68	; 104
     da2:	f9 4f       	sbci	r31, 0xF9	; 249
     da4:	31 83       	std	Z+1, r19	; 0x01
     da6:	20 83       	st	Z, r18
			return NodeRef;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	9d 87       	std	Y+13, r25	; 0x0d
     dae:	8c 87       	std	Y+12, r24	; 0x0c
     db0:	11 c1       	rjmp	.+546    	; 0xfd4 <BST_Insert+0x37c>
		}
		else{
			while(!((((current -> PtrToLeftNode) == NULL) && (data <= (current -> Data))) || ((((current -> PtrToRightNode) == NULL) && (data > (current -> Data)))))){
				if(data < (current -> Data)){
     db2:	ed 81       	ldd	r30, Y+5	; 0x05
     db4:	fe 81       	ldd	r31, Y+6	; 0x06
     db6:	94 81       	ldd	r25, Z+4	; 0x04
     db8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dba:	89 17       	cp	r24, r25
     dbc:	58 f4       	brcc	.+22     	; 0xdd4 <BST_Insert+0x17c>
					current = current -> PtrToLeftNode;
     dbe:	ed 81       	ldd	r30, Y+5	; 0x05
     dc0:	fe 81       	ldd	r31, Y+6	; 0x06
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	9e 83       	std	Y+6, r25	; 0x06
     dc8:	8d 83       	std	Y+5, r24	; 0x05
					index = (index << 1) + 1;
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	88 0f       	add	r24, r24
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	45 c0       	rjmp	.+138    	; 0xe5e <BST_Insert+0x206>
				}
				else if(data > (current -> Data)){
     dd4:	ed 81       	ldd	r30, Y+5	; 0x05
     dd6:	fe 81       	ldd	r31, Y+6	; 0x06
     dd8:	94 81       	ldd	r25, Z+4	; 0x04
     dda:	8b 85       	ldd	r24, Y+11	; 0x0b
     ddc:	98 17       	cp	r25, r24
     dde:	58 f4       	brcc	.+22     	; 0xdf6 <BST_Insert+0x19e>
					current = current -> PtrToRightNode;
     de0:	ed 81       	ldd	r30, Y+5	; 0x05
     de2:	fe 81       	ldd	r31, Y+6	; 0x06
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	9e 83       	std	Y+6, r25	; 0x06
     dea:	8d 83       	std	Y+5, r24	; 0x05
					index = (index << 1) + 2;
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	88 0f       	add	r24, r24
     df0:	8e 5f       	subi	r24, 0xFE	; 254
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	34 c0       	rjmp	.+104    	; 0xe5e <BST_Insert+0x206>
				}
				else{
					Ptr_Elemnets[count].State = BST_NODE_EMPTY;
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9c 01       	movw	r18, r24
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	22 0f       	add	r18, r18
     e04:	33 1f       	adc	r19, r19
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	98 85       	ldd	r25, Y+8	; 0x08
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	16 82       	std	Z+6, r1	; 0x06
					Ptr_Elemnets[count].Data = 0;
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9c 01       	movw	r18, r24
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	98 85       	ldd	r25, Y+8	; 0x08
     e2e:	fc 01       	movw	r30, r24
     e30:	e2 0f       	add	r30, r18
     e32:	f3 1f       	adc	r31, r19
     e34:	14 82       	std	Z+4, r1	; 0x04
					Ptr_Elemnets[count].leaf_state = BST_NODE_NULL;
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9c 01       	movw	r18, r24
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	8f 81       	ldd	r24, Y+7	; 0x07
     e4c:	98 85       	ldd	r25, Y+8	; 0x08
     e4e:	fc 01       	movw	r30, r24
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	87 83       	std	Z+7, r24	; 0x07
					return NULL;
     e58:	1d 86       	std	Y+13, r1	; 0x0d
     e5a:	1c 86       	std	Y+12, r1	; 0x0c
     e5c:	bb c0       	rjmp	.+374    	; 0xfd4 <BST_Insert+0x37c>
			Ptr_Elemnets[count].Index = index;
			BST_ptr -> Root = &Ptr_Elemnets[count];
			return NodeRef;
		}
		else{
			while(!((((current -> PtrToLeftNode) == NULL) && (data <= (current -> Data))) || ((((current -> PtrToRightNode) == NULL) && (data > (current -> Data)))))){
     e5e:	ed 81       	ldd	r30, Y+5	; 0x05
     e60:	fe 81       	ldd	r31, Y+6	; 0x06
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	31 f4       	brne	.+12     	; 0xe76 <BST_Insert+0x21e>
     e6a:	ed 81       	ldd	r30, Y+5	; 0x05
     e6c:	fe 81       	ldd	r31, Y+6	; 0x06
     e6e:	94 81       	ldd	r25, Z+4	; 0x04
     e70:	8b 85       	ldd	r24, Y+11	; 0x0b
     e72:	98 17       	cp	r25, r24
     e74:	70 f4       	brcc	.+28     	; 0xe92 <BST_Insert+0x23a>
     e76:	ed 81       	ldd	r30, Y+5	; 0x05
     e78:	fe 81       	ldd	r31, Y+6	; 0x06
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	09 f0       	breq	.+2      	; 0xe84 <BST_Insert+0x22c>
     e82:	97 cf       	rjmp	.-210    	; 0xdb2 <BST_Insert+0x15a>
     e84:	ed 81       	ldd	r30, Y+5	; 0x05
     e86:	fe 81       	ldd	r31, Y+6	; 0x06
     e88:	94 81       	ldd	r25, Z+4	; 0x04
     e8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8c:	98 17       	cp	r25, r24
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <BST_Insert+0x23a>
     e90:	90 cf       	rjmp	.-224    	; 0xdb2 <BST_Insert+0x15a>
					Ptr_Elemnets[count].Data = 0;
					Ptr_Elemnets[count].leaf_state = BST_NODE_NULL;
					return NULL;
				}
			}
			if(data < (current -> Data)){
     e92:	ed 81       	ldd	r30, Y+5	; 0x05
     e94:	fe 81       	ldd	r31, Y+6	; 0x06
     e96:	94 81       	ldd	r25, Z+4	; 0x04
     e98:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9a:	89 17       	cp	r24, r25
     e9c:	88 f5       	brcc	.+98     	; 0xf00 <BST_Insert+0x2a8>
				current -> PtrToLeftNode = &Ptr_Elemnets[count];
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9c 01       	movw	r18, r24
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	ed 81       	ldd	r30, Y+5	; 0x05
     ebc:	fe 81       	ldd	r31, Y+6	; 0x06
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
				current -> leaf_state += BST_NODE_LEFT_CHILD;
     ec2:	ed 81       	ldd	r30, Y+5	; 0x05
     ec4:	fe 81       	ldd	r31, Y+6	; 0x06
     ec6:	87 81       	ldd	r24, Z+7	; 0x07
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	ed 81       	ldd	r30, Y+5	; 0x05
     ecc:	fe 81       	ldd	r31, Y+6	; 0x06
     ece:	87 83       	std	Z+7, r24	; 0x07
				Ptr_Elemnets[count].Index = (index << 1) + 1;
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9c 01       	movw	r18, r24
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	8f 81       	ldd	r24, Y+7	; 0x07
     ee6:	98 85       	ldd	r25, Y+8	; 0x08
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 0f       	add	r24, r24
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	85 83       	std	Z+5, r24	; 0x05
				return NodeRef;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	9d 87       	std	Y+13, r25	; 0x0d
     efc:	8c 87       	std	Y+12, r24	; 0x0c
     efe:	6a c0       	rjmp	.+212    	; 0xfd4 <BST_Insert+0x37c>
			}
			else if (data > (current -> Data)){
     f00:	ed 81       	ldd	r30, Y+5	; 0x05
     f02:	fe 81       	ldd	r31, Y+6	; 0x06
     f04:	94 81       	ldd	r25, Z+4	; 0x04
     f06:	8b 85       	ldd	r24, Y+11	; 0x0b
     f08:	98 17       	cp	r25, r24
     f0a:	88 f5       	brcc	.+98     	; 0xf6e <BST_Insert+0x316>
				current -> PtrToRightNode = &Ptr_Elemnets[count];
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9c 01       	movw	r18, r24
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	8f 81       	ldd	r24, Y+7	; 0x07
     f22:	98 85       	ldd	r25, Y+8	; 0x08
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	ed 81       	ldd	r30, Y+5	; 0x05
     f2a:	fe 81       	ldd	r31, Y+6	; 0x06
     f2c:	93 83       	std	Z+3, r25	; 0x03
     f2e:	82 83       	std	Z+2, r24	; 0x02
				current -> leaf_state += BST_NODE_RIGHT_CHILD;
     f30:	ed 81       	ldd	r30, Y+5	; 0x05
     f32:	fe 81       	ldd	r31, Y+6	; 0x06
     f34:	87 81       	ldd	r24, Z+7	; 0x07
     f36:	8e 5f       	subi	r24, 0xFE	; 254
     f38:	ed 81       	ldd	r30, Y+5	; 0x05
     f3a:	fe 81       	ldd	r31, Y+6	; 0x06
     f3c:	87 83       	std	Z+7, r24	; 0x07
				Ptr_Elemnets[count].Index = (index << 1) + 2;
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 01       	movw	r18, r24
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	8f 81       	ldd	r24, Y+7	; 0x07
     f54:	98 85       	ldd	r25, Y+8	; 0x08
     f56:	fc 01       	movw	r30, r24
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 0f       	add	r24, r24
     f60:	8e 5f       	subi	r24, 0xFE	; 254
     f62:	85 83       	std	Z+5, r24	; 0x05
				return NodeRef;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	9d 87       	std	Y+13, r25	; 0x0d
     f6a:	8c 87       	std	Y+12, r24	; 0x0c
     f6c:	33 c0       	rjmp	.+102    	; 0xfd4 <BST_Insert+0x37c>
			}
			else{
				Ptr_Elemnets[count].State = BST_NODE_EMPTY;
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 01       	movw	r18, r24
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	16 82       	std	Z+6, r1	; 0x06
				Ptr_Elemnets[count].Data = 0;
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 01       	movw	r18, r24
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	8f 81       	ldd	r24, Y+7	; 0x07
     fa4:	98 85       	ldd	r25, Y+8	; 0x08
     fa6:	fc 01       	movw	r30, r24
     fa8:	e2 0f       	add	r30, r18
     faa:	f3 1f       	adc	r31, r19
     fac:	14 82       	std	Z+4, r1	; 0x04
				Ptr_Elemnets[count].leaf_state = BST_NODE_NULL;
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 01       	movw	r18, r24
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	fc 01       	movw	r30, r24
     fc8:	e2 0f       	add	r30, r18
     fca:	f3 1f       	adc	r31, r19
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	87 83       	std	Z+7, r24	; 0x07
				return NULL;
     fd0:	1d 86       	std	Y+13, r1	; 0x0d
     fd2:	1c 86       	std	Y+12, r1	; 0x0c
     fd4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd6:	9d 85       	ldd	r25, Y+13	; 0x0d
			}
		}
	}
}
     fd8:	2d 96       	adiw	r28, 0x0d	; 13
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <BST_FindElement>:

BST_node* BST_FindElement(BST* BST_ptr, BST_DataSize data){
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	27 97       	sbiw	r28, 0x07	; 7
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	6d 83       	std	Y+5, r22	; 0x05
	BST_node* current = BST_ptr -> Root;
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	fc 01       	movw	r30, r24
    100a:	e8 56       	subi	r30, 0x68	; 104
    100c:	f9 4f       	sbci	r31, 0xF9	; 249
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
	if(current == NULL){
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	e9 f5       	brne	.+122    	; 0x1098 <BST_FindElement+0xae>
		return current;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	9f 83       	std	Y+7, r25	; 0x07
    1024:	8e 83       	std	Y+6, r24	; 0x06
    1026:	54 c0       	rjmp	.+168    	; 0x10d0 <BST_FindElement+0xe6>
	}
	while(!((((current -> PtrToLeftNode) == NULL) && (data < (current -> Data))) || ((((current -> PtrToRightNode) == NULL) && (data > (current -> Data)))))){
		if(data == (current -> Data)){
    1028:	e9 81       	ldd	r30, Y+1	; 0x01
    102a:	fa 81       	ldd	r31, Y+2	; 0x02
    102c:	94 81       	ldd	r25, Z+4	; 0x04
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	98 17       	cp	r25, r24
    1032:	29 f4       	brne	.+10     	; 0x103e <BST_FindElement+0x54>
			return current;
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	9f 83       	std	Y+7, r25	; 0x07
    103a:	8e 83       	std	Y+6, r24	; 0x06
    103c:	49 c0       	rjmp	.+146    	; 0x10d0 <BST_FindElement+0xe6>
		}
		if(data < (current -> Data)){
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	94 81       	ldd	r25, Z+4	; 0x04
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	89 17       	cp	r24, r25
    1048:	a0 f4       	brcc	.+40     	; 0x1072 <BST_FindElement+0x88>
			if(((current -> leaf_state) == BST_NODE_LEAF) || ((current -> leaf_state) == BST_NODE_RIGHT_CHILD)){
    104a:	e9 81       	ldd	r30, Y+1	; 0x01
    104c:	fa 81       	ldd	r31, Y+2	; 0x02
    104e:	87 81       	ldd	r24, Z+7	; 0x07
    1050:	88 23       	and	r24, r24
    1052:	29 f0       	breq	.+10     	; 0x105e <BST_FindElement+0x74>
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	87 81       	ldd	r24, Z+7	; 0x07
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	19 f4       	brne	.+6      	; 0x1064 <BST_FindElement+0x7a>
				return NULL;
    105e:	1f 82       	std	Y+7, r1	; 0x07
    1060:	1e 82       	std	Y+6, r1	; 0x06
    1062:	36 c0       	rjmp	.+108    	; 0x10d0 <BST_FindElement+0xe6>
			}
			else{
				current = current -> PtrToLeftNode;
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <BST_FindElement+0xae>
			}
		}
		else{
			if(((current -> leaf_state) == BST_NODE_LEAF) || ((current -> leaf_state) == BST_NODE_LEFT_CHILD)){
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	87 81       	ldd	r24, Z+7	; 0x07
    1078:	88 23       	and	r24, r24
    107a:	29 f0       	breq	.+10     	; 0x1086 <BST_FindElement+0x9c>
    107c:	e9 81       	ldd	r30, Y+1	; 0x01
    107e:	fa 81       	ldd	r31, Y+2	; 0x02
    1080:	87 81       	ldd	r24, Z+7	; 0x07
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	19 f4       	brne	.+6      	; 0x108c <BST_FindElement+0xa2>
				return NULL;
    1086:	1f 82       	std	Y+7, r1	; 0x07
    1088:	1e 82       	std	Y+6, r1	; 0x06
    108a:	22 c0       	rjmp	.+68     	; 0x10d0 <BST_FindElement+0xe6>
			}
			else{
				current = current -> PtrToRightNode;
    108c:	e9 81       	ldd	r30, Y+1	; 0x01
    108e:	fa 81       	ldd	r31, Y+2	; 0x02
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
BST_node* BST_FindElement(BST* BST_ptr, BST_DataSize data){
	BST_node* current = BST_ptr -> Root;
	if(current == NULL){
		return current;
	}
	while(!((((current -> PtrToLeftNode) == NULL) && (data < (current -> Data))) || ((((current -> PtrToRightNode) == NULL) && (data > (current -> Data)))))){
    1098:	e9 81       	ldd	r30, Y+1	; 0x01
    109a:	fa 81       	ldd	r31, Y+2	; 0x02
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <BST_FindElement+0xc6>
    10a4:	e9 81       	ldd	r30, Y+1	; 0x01
    10a6:	fa 81       	ldd	r31, Y+2	; 0x02
    10a8:	94 81       	ldd	r25, Z+4	; 0x04
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	89 17       	cp	r24, r25
    10ae:	70 f0       	brcs	.+28     	; 0x10cc <BST_FindElement+0xe2>
    10b0:	e9 81       	ldd	r30, Y+1	; 0x01
    10b2:	fa 81       	ldd	r31, Y+2	; 0x02
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <BST_FindElement+0xd4>
    10bc:	b5 cf       	rjmp	.-150    	; 0x1028 <BST_FindElement+0x3e>
    10be:	e9 81       	ldd	r30, Y+1	; 0x01
    10c0:	fa 81       	ldd	r31, Y+2	; 0x02
    10c2:	94 81       	ldd	r25, Z+4	; 0x04
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	98 17       	cp	r25, r24
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <BST_FindElement+0xe2>
    10ca:	ae cf       	rjmp	.-164    	; 0x1028 <BST_FindElement+0x3e>
			else{
				current = current -> PtrToRightNode;
			}
		}
	}
	return NULL;
    10cc:	1f 82       	std	Y+7, r1	; 0x07
    10ce:	1e 82       	std	Y+6, r1	; 0x06
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
}
    10d4:	27 96       	adiw	r28, 0x07	; 7
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <BST_Free>:

void BST_Free(BST_node* PtrToNode){
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <BST_Free+0x6>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
	PtrToNode -> Data = 0;
    10f4:	e9 81       	ldd	r30, Y+1	; 0x01
    10f6:	fa 81       	ldd	r31, Y+2	; 0x02
    10f8:	14 82       	std	Z+4, r1	; 0x04
	PtrToNode -> PtrToLeftNode = NULL;
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	10 82       	st	Z, r1
	PtrToNode -> PtrToRightNode = NULL;
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	13 82       	std	Z+3, r1	; 0x03
    1108:	12 82       	std	Z+2, r1	; 0x02
	PtrToNode -> State = BST_NODE_EMPTY;
    110a:	e9 81       	ldd	r30, Y+1	; 0x01
    110c:	fa 81       	ldd	r31, Y+2	; 0x02
    110e:	16 82       	std	Z+6, r1	; 0x06
	PtrToNode -> Index = MAX_Index;
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	85 83       	std	Z+5, r24	; 0x05
	PtrToNode -> leaf_state = BST_NODE_NULL;
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	84 e0       	ldi	r24, 0x04	; 4
    111e:	87 83       	std	Z+7, r24	; 0x07
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <BST_UpdateIndex>:

void BST_UpdateIndex(BST_node* current, BST_node* prev, uint8 direction){
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <BST_UpdateIndex+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <BST_UpdateIndex+0x8>
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	7c 83       	std	Y+4, r23	; 0x04
    113e:	6b 83       	std	Y+3, r22	; 0x03
    1140:	4d 83       	std	Y+5, r20	; 0x05
	if(current == NULL){
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	e1 f1       	breq	.+120    	; 0x11c2 <BST_UpdateIndex+0x98>
		return;
	}
	if(prev == NULL){
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	21 f4       	brne	.+8      	; 0x115a <BST_UpdateIndex+0x30>
		current -> Index = 0;
    1152:	e9 81       	ldd	r30, Y+1	; 0x01
    1154:	fa 81       	ldd	r31, Y+2	; 0x02
    1156:	15 82       	std	Z+5, r1	; 0x05
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <BST_UpdateIndex+0x58>
	}

	else{
		if(direction == BST_LEFT)
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	88 23       	and	r24, r24
    115e:	49 f4       	brne	.+18     	; 0x1172 <BST_UpdateIndex+0x48>
			current -> Index = ((prev -> Index) << 1) + 1;
    1160:	eb 81       	ldd	r30, Y+3	; 0x03
    1162:	fc 81       	ldd	r31, Y+4	; 0x04
    1164:	85 81       	ldd	r24, Z+5	; 0x05
    1166:	88 0f       	add	r24, r24
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	e9 81       	ldd	r30, Y+1	; 0x01
    116c:	fa 81       	ldd	r31, Y+2	; 0x02
    116e:	85 83       	std	Z+5, r24	; 0x05
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <BST_UpdateIndex+0x58>
		else
			current -> Index = ((prev -> Index) << 1) + 2;
    1172:	eb 81       	ldd	r30, Y+3	; 0x03
    1174:	fc 81       	ldd	r31, Y+4	; 0x04
    1176:	85 81       	ldd	r24, Z+5	; 0x05
    1178:	88 0f       	add	r24, r24
    117a:	8e 5f       	subi	r24, 0xFE	; 254
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	85 83       	std	Z+5, r24	; 0x05
	}
	if(((current -> PtrToLeftNode) == NULL) && ((current -> PtrToRightNode) == NULL)){
    1182:	e9 81       	ldd	r30, Y+1	; 0x01
    1184:	fa 81       	ldd	r31, Y+2	; 0x02
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	31 f4       	brne	.+12     	; 0x119a <BST_UpdateIndex+0x70>
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	a1 f0       	breq	.+40     	; 0x11c2 <BST_UpdateIndex+0x98>
		return;
	}
	BST_UpdateIndex(current -> PtrToLeftNode, current, BST_LEFT);
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	80 81       	ld	r24, Z
    11a0:	91 81       	ldd	r25, Z+1	; 0x01
    11a2:	29 81       	ldd	r18, Y+1	; 0x01
    11a4:	3a 81       	ldd	r19, Y+2	; 0x02
    11a6:	b9 01       	movw	r22, r18
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	0e 94 95 08 	call	0x112a	; 0x112a <BST_UpdateIndex>
	BST_UpdateIndex(current -> PtrToRightNode, current, BST_RIGHT);
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	93 81       	ldd	r25, Z+3	; 0x03
    11b6:	29 81       	ldd	r18, Y+1	; 0x01
    11b8:	3a 81       	ldd	r19, Y+2	; 0x02
    11ba:	b9 01       	movw	r22, r18
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 95 08 	call	0x112a	; 0x112a <BST_UpdateIndex>
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <BST_Find_Parent>:

BST_node* BST_Find_Parent(BST_node* root, uint8 index){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <BST_Find_Parent+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <BST_Find_Parent+0x8>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <BST_Find_Parent+0xa>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9d 83       	std	Y+5, r25	; 0x05
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	6e 83       	std	Y+6, r22	; 0x06
	index += 1;
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	8e 83       	std	Y+6, r24	; 0x06
	index = index >> 1;
    11ec:	8e 81       	ldd	r24, Y+6	; 0x06
    11ee:	86 95       	lsr	r24
    11f0:	8e 83       	std	Y+6, r24	; 0x06
	uint8 temp = index;
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	8b 83       	std	Y+3, r24	; 0x03
	uint8 count = 0;
    11f6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 sum = 0;
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	18 c0       	rjmp	.+48     	; 0x122c <BST_Find_Parent+0x5a>
	while(temp != 1){
		sum = (temp % 2) + (sum << count);
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	48 2f       	mov	r20, r24
    1200:	41 70       	andi	r20, 0x01	; 1
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	b9 01       	movw	r22, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <BST_Find_Parent+0x44>
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <BST_Find_Parent+0x40>
    121a:	cb 01       	movw	r24, r22
    121c:	84 0f       	add	r24, r20
    121e:	89 83       	std	Y+1, r24	; 0x01
		count++;
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	8a 83       	std	Y+2, r24	; 0x02
		temp = temp >> 1;
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	86 95       	lsr	r24
    122a:	8b 83       	std	Y+3, r24	; 0x03
	index += 1;
	index = index >> 1;
	uint8 temp = index;
	uint8 count = 0;
	uint8 sum = 0;
	while(temp != 1){
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	29 f7       	brne	.-54     	; 0x11fc <BST_Find_Parent+0x2a>
    1232:	1a c0       	rjmp	.+52     	; 0x1268 <BST_Find_Parent+0x96>
		sum = (temp % 2) + (sum << count);
		count++;
		temp = temp >> 1;
	}
	while(count != 0){
		if(sum & 1){
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	90 70       	andi	r25, 0x00	; 0
    123e:	88 23       	and	r24, r24
    1240:	39 f0       	breq	.+14     	; 0x1250 <BST_Find_Parent+0x7e>
			root = root -> PtrToRightNode;
    1242:	ec 81       	ldd	r30, Y+4	; 0x04
    1244:	fd 81       	ldd	r31, Y+5	; 0x05
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	9d 83       	std	Y+5, r25	; 0x05
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	06 c0       	rjmp	.+12     	; 0x125c <BST_Find_Parent+0x8a>
		}
		else{
			root = root -> PtrToLeftNode;
    1250:	ec 81       	ldd	r30, Y+4	; 0x04
    1252:	fd 81       	ldd	r31, Y+5	; 0x05
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	9d 83       	std	Y+5, r25	; 0x05
    125a:	8c 83       	std	Y+4, r24	; 0x04
		}
		sum = sum >> 1;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	86 95       	lsr	r24
    1260:	89 83       	std	Y+1, r24	; 0x01
		count--;
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	81 50       	subi	r24, 0x01	; 1
    1266:	8a 83       	std	Y+2, r24	; 0x02
	while(temp != 1){
		sum = (temp % 2) + (sum << count);
		count++;
		temp = temp >> 1;
	}
	while(count != 0){
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	88 23       	and	r24, r24
    126c:	19 f7       	brne	.-58     	; 0x1234 <BST_Find_Parent+0x62>
			root = root -> PtrToLeftNode;
		}
		sum = sum >> 1;
		count--;
	}
	return root;
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
}
    1272:	26 96       	adiw	r28, 0x06	; 6
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <BST_Delete>:

BST_ErrorType BST_Delete(BST* BST_ptr, BST_DataSize data){
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	2e 97       	sbiw	r28, 0x0e	; 14
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	9c 87       	std	Y+12, r25	; 0x0c
    129a:	8b 87       	std	Y+11, r24	; 0x0b
    129c:	6d 87       	std	Y+13, r22	; 0x0d
	BST_node* current = BST_ptr -> Root;
    129e:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a2:	fc 01       	movw	r30, r24
    12a4:	e8 56       	subi	r30, 0x68	; 104
    12a6:	f9 4f       	sbci	r31, 0xF9	; 249
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	9a 87       	std	Y+10, r25	; 0x0a
    12ae:	89 87       	std	Y+9, r24	; 0x09
	BST_node* prev = BST_ptr -> Root;
    12b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b4:	fc 01       	movw	r30, r24
    12b6:	e8 56       	subi	r30, 0x68	; 104
    12b8:	f9 4f       	sbci	r31, 0xF9	; 249
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	98 87       	std	Y+8, r25	; 0x08
    12c0:	8f 83       	std	Y+7, r24	; 0x07
	uint8 index = 0;
    12c2:	1e 82       	std	Y+6, r1	; 0x06
	uint8 direction_flag = 0;
    12c4:	1d 82       	std	Y+5, r1	; 0x05
	BST_node* temp_add = prev;
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	8b 83       	std	Y+3, r24	; 0x03
	BST_NODE_LeafOrNot temp_child;
	BST_DataSize temp;
	if(current == NULL){
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <BST_Delete+0x54>
    12d6:	95 c1       	rjmp	.+810    	; 0x1602 <BST_Delete+0x37e>
		return BST_Empty;
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	8e 87       	std	Y+14, r24	; 0x0e
    12dc:	ae c1       	rjmp	.+860    	; 0x163a <BST_Delete+0x3b6>
	}
	while(!((((current -> PtrToLeftNode) == NULL) && (data < (current -> Data))) || ((((current -> PtrToRightNode) == NULL) && (data > (current -> Data)))))){
		if(data == (current -> Data)){
    12de:	e9 85       	ldd	r30, Y+9	; 0x09
    12e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    12e2:	94 81       	ldd	r25, Z+4	; 0x04
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	98 17       	cp	r25, r24
    12e8:	09 f0       	breq	.+2      	; 0x12ec <BST_Delete+0x68>
    12ea:	56 c1       	rjmp	.+684    	; 0x1598 <BST_Delete+0x314>
			if(((current -> PtrToLeftNode) == NULL) && ((current -> PtrToRightNode) == NULL)){
    12ec:	e9 85       	ldd	r30, Y+9	; 0x09
    12ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	09 f0       	breq	.+2      	; 0x12fa <BST_Delete+0x76>
    12f8:	41 c0       	rjmp	.+130    	; 0x137c <BST_Delete+0xf8>
    12fa:	e9 85       	ldd	r30, Y+9	; 0x09
    12fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	d9 f5       	brne	.+118    	; 0x137c <BST_Delete+0xf8>
				if(current == prev){
    1306:	29 85       	ldd	r18, Y+9	; 0x09
    1308:	3a 85       	ldd	r19, Y+10	; 0x0a
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	28 17       	cp	r18, r24
    1310:	39 07       	cpc	r19, r25
    1312:	71 f4       	brne	.+28     	; 0x1330 <BST_Delete+0xac>
					BST_ptr -> Root = NULL;
    1314:	8b 85       	ldd	r24, Y+11	; 0x0b
    1316:	9c 85       	ldd	r25, Y+12	; 0x0c
    1318:	fc 01       	movw	r30, r24
    131a:	e8 56       	subi	r30, 0x68	; 104
    131c:	f9 4f       	sbci	r31, 0xF9	; 249
    131e:	11 82       	std	Z+1, r1	; 0x01
    1320:	10 82       	st	Z, r1
					BST_Free(current);
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
					return BST_NoError;
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	8e 87       	std	Y+14, r24	; 0x0e
    132e:	85 c1       	rjmp	.+778    	; 0x163a <BST_Delete+0x3b6>
				}
				if((current -> Data) <= (prev -> Data)){
    1330:	e9 85       	ldd	r30, Y+9	; 0x09
    1332:	fa 85       	ldd	r31, Y+10	; 0x0a
    1334:	94 81       	ldd	r25, Z+4	; 0x04
    1336:	ef 81       	ldd	r30, Y+7	; 0x07
    1338:	f8 85       	ldd	r31, Y+8	; 0x08
    133a:	84 81       	ldd	r24, Z+4	; 0x04
    133c:	89 17       	cp	r24, r25
    133e:	60 f0       	brcs	.+24     	; 0x1358 <BST_Delete+0xd4>
					prev -> PtrToLeftNode = NULL;
    1340:	ef 81       	ldd	r30, Y+7	; 0x07
    1342:	f8 85       	ldd	r31, Y+8	; 0x08
    1344:	11 82       	std	Z+1, r1	; 0x01
    1346:	10 82       	st	Z, r1
					prev -> leaf_state -= BST_NODE_LEFT_CHILD;
    1348:	ef 81       	ldd	r30, Y+7	; 0x07
    134a:	f8 85       	ldd	r31, Y+8	; 0x08
    134c:	87 81       	ldd	r24, Z+7	; 0x07
    134e:	81 50       	subi	r24, 0x01	; 1
    1350:	ef 81       	ldd	r30, Y+7	; 0x07
    1352:	f8 85       	ldd	r31, Y+8	; 0x08
    1354:	87 83       	std	Z+7, r24	; 0x07
    1356:	0b c0       	rjmp	.+22     	; 0x136e <BST_Delete+0xea>
				}
				else{
					prev -> PtrToRightNode = NULL;
    1358:	ef 81       	ldd	r30, Y+7	; 0x07
    135a:	f8 85       	ldd	r31, Y+8	; 0x08
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	12 82       	std	Z+2, r1	; 0x02
					prev -> leaf_state -= BST_NODE_RIGHT_CHILD;
    1360:	ef 81       	ldd	r30, Y+7	; 0x07
    1362:	f8 85       	ldd	r31, Y+8	; 0x08
    1364:	87 81       	ldd	r24, Z+7	; 0x07
    1366:	82 50       	subi	r24, 0x02	; 2
    1368:	ef 81       	ldd	r30, Y+7	; 0x07
    136a:	f8 85       	ldd	r31, Y+8	; 0x08
    136c:	87 83       	std	Z+7, r24	; 0x07
				}
				BST_Free(current);
    136e:	89 85       	ldd	r24, Y+9	; 0x09
    1370:	9a 85       	ldd	r25, Y+10	; 0x0a
    1372:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
				return BST_NoError;
    1376:	84 e0       	ldi	r24, 0x04	; 4
    1378:	8e 87       	std	Y+14, r24	; 0x0e
    137a:	5f c1       	rjmp	.+702    	; 0x163a <BST_Delete+0x3b6>
			}
			else if(((current -> PtrToLeftNode) == NULL)){
    137c:	e9 85       	ldd	r30, Y+9	; 0x09
    137e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	09 f0       	breq	.+2      	; 0x138a <BST_Delete+0x106>
    1388:	45 c0       	rjmp	.+138    	; 0x1414 <BST_Delete+0x190>
				if(current == prev){
    138a:	29 85       	ldd	r18, Y+9	; 0x09
    138c:	3a 85       	ldd	r19, Y+10	; 0x0a
    138e:	8f 81       	ldd	r24, Y+7	; 0x07
    1390:	98 85       	ldd	r25, Y+8	; 0x08
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	91 f4       	brne	.+36     	; 0x13bc <BST_Delete+0x138>
					BST_ptr -> Root = current -> PtrToRightNode;
    1398:	e9 85       	ldd	r30, Y+9	; 0x09
    139a:	fa 85       	ldd	r31, Y+10	; 0x0a
    139c:	22 81       	ldd	r18, Z+2	; 0x02
    139e:	33 81       	ldd	r19, Z+3	; 0x03
    13a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a4:	fc 01       	movw	r30, r24
    13a6:	e8 56       	subi	r30, 0x68	; 104
    13a8:	f9 4f       	sbci	r31, 0xF9	; 249
    13aa:	31 83       	std	Z+1, r19	; 0x01
    13ac:	20 83       	st	Z, r18
					BST_Free(current);
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
					return BST_NoError;
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	8e 87       	std	Y+14, r24	; 0x0e
    13ba:	3f c1       	rjmp	.+638    	; 0x163a <BST_Delete+0x3b6>
				}
				if((current -> Data) <= (prev -> Data)){
    13bc:	e9 85       	ldd	r30, Y+9	; 0x09
    13be:	fa 85       	ldd	r31, Y+10	; 0x0a
    13c0:	94 81       	ldd	r25, Z+4	; 0x04
    13c2:	ef 81       	ldd	r30, Y+7	; 0x07
    13c4:	f8 85       	ldd	r31, Y+8	; 0x08
    13c6:	84 81       	ldd	r24, Z+4	; 0x04
    13c8:	89 17       	cp	r24, r25
    13ca:	48 f0       	brcs	.+18     	; 0x13de <BST_Delete+0x15a>
					prev -> PtrToLeftNode = current -> PtrToRightNode;
    13cc:	e9 85       	ldd	r30, Y+9	; 0x09
    13ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	ef 81       	ldd	r30, Y+7	; 0x07
    13d6:	f8 85       	ldd	r31, Y+8	; 0x08
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <BST_Delete+0x16a>
				}
				else{
					prev -> PtrToRightNode = current -> PtrToRightNode;
    13de:	e9 85       	ldd	r30, Y+9	; 0x09
    13e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	ef 81       	ldd	r30, Y+7	; 0x07
    13e8:	f8 85       	ldd	r31, Y+8	; 0x08
    13ea:	93 83       	std	Z+3, r25	; 0x03
    13ec:	82 83       	std	Z+2, r24	; 0x02
				}
				BST_Free(current);
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
				BST_UpdateIndex(BST_ptr -> Root, NULL, BST_LEFT);
    13f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    13fa:	fc 01       	movw	r30, r24
    13fc:	e8 56       	subi	r30, 0x68	; 104
    13fe:	f9 4f       	sbci	r31, 0xF9	; 249
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 95 08 	call	0x112a	; 0x112a <BST_UpdateIndex>
				return BST_NoError;
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	8e 87       	std	Y+14, r24	; 0x0e
    1412:	13 c1       	rjmp	.+550    	; 0x163a <BST_Delete+0x3b6>
			}
			else if(((current -> PtrToRightNode) == NULL)){
    1414:	e9 85       	ldd	r30, Y+9	; 0x09
    1416:	fa 85       	ldd	r31, Y+10	; 0x0a
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	09 f0       	breq	.+2      	; 0x1422 <BST_Delete+0x19e>
    1420:	45 c0       	rjmp	.+138    	; 0x14ac <BST_Delete+0x228>
				if(current == prev){
    1422:	29 85       	ldd	r18, Y+9	; 0x09
    1424:	3a 85       	ldd	r19, Y+10	; 0x0a
    1426:	8f 81       	ldd	r24, Y+7	; 0x07
    1428:	98 85       	ldd	r25, Y+8	; 0x08
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	91 f4       	brne	.+36     	; 0x1454 <BST_Delete+0x1d0>
					BST_ptr -> Root = current -> PtrToLeftNode;
    1430:	e9 85       	ldd	r30, Y+9	; 0x09
    1432:	fa 85       	ldd	r31, Y+10	; 0x0a
    1434:	20 81       	ld	r18, Z
    1436:	31 81       	ldd	r19, Z+1	; 0x01
    1438:	8b 85       	ldd	r24, Y+11	; 0x0b
    143a:	9c 85       	ldd	r25, Y+12	; 0x0c
    143c:	fc 01       	movw	r30, r24
    143e:	e8 56       	subi	r30, 0x68	; 104
    1440:	f9 4f       	sbci	r31, 0xF9	; 249
    1442:	31 83       	std	Z+1, r19	; 0x01
    1444:	20 83       	st	Z, r18
					BST_Free(current);
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
					return BST_NoError;
    144e:	84 e0       	ldi	r24, 0x04	; 4
    1450:	8e 87       	std	Y+14, r24	; 0x0e
    1452:	f3 c0       	rjmp	.+486    	; 0x163a <BST_Delete+0x3b6>
				}
				if((current -> Data) <= (prev -> Data)){
    1454:	e9 85       	ldd	r30, Y+9	; 0x09
    1456:	fa 85       	ldd	r31, Y+10	; 0x0a
    1458:	94 81       	ldd	r25, Z+4	; 0x04
    145a:	ef 81       	ldd	r30, Y+7	; 0x07
    145c:	f8 85       	ldd	r31, Y+8	; 0x08
    145e:	84 81       	ldd	r24, Z+4	; 0x04
    1460:	89 17       	cp	r24, r25
    1462:	48 f0       	brcs	.+18     	; 0x1476 <BST_Delete+0x1f2>
					prev -> PtrToLeftNode = current -> PtrToLeftNode;
    1464:	e9 85       	ldd	r30, Y+9	; 0x09
    1466:	fa 85       	ldd	r31, Y+10	; 0x0a
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	ef 81       	ldd	r30, Y+7	; 0x07
    146e:	f8 85       	ldd	r31, Y+8	; 0x08
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <BST_Delete+0x202>
				}
				else{
					prev -> PtrToRightNode = current -> PtrToLeftNode;
    1476:	e9 85       	ldd	r30, Y+9	; 0x09
    1478:	fa 85       	ldd	r31, Y+10	; 0x0a
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	ef 81       	ldd	r30, Y+7	; 0x07
    1480:	f8 85       	ldd	r31, Y+8	; 0x08
    1482:	93 83       	std	Z+3, r25	; 0x03
    1484:	82 83       	std	Z+2, r24	; 0x02
				}
				BST_Free(current);
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
				BST_UpdateIndex(BST_ptr -> Root, NULL, BST_LEFT);
    148e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1490:	9c 85       	ldd	r25, Y+12	; 0x0c
    1492:	fc 01       	movw	r30, r24
    1494:	e8 56       	subi	r30, 0x68	; 104
    1496:	f9 4f       	sbci	r31, 0xF9	; 249
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	0e 94 95 08 	call	0x112a	; 0x112a <BST_UpdateIndex>
				return BST_NoError;
    14a6:	84 e0       	ldi	r24, 0x04	; 4
    14a8:	8e 87       	std	Y+14, r24	; 0x0e
    14aa:	c7 c0       	rjmp	.+398    	; 0x163a <BST_Delete+0x3b6>
			}
			else{
				prev = current;
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	98 87       	std	Y+8, r25	; 0x08
    14b2:	8f 83       	std	Y+7, r24	; 0x07
				current = current -> PtrToRightNode;
    14b4:	e9 85       	ldd	r30, Y+9	; 0x09
    14b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	9a 87       	std	Y+10, r25	; 0x0a
    14be:	89 87       	std	Y+9, r24	; 0x09
    14c0:	08 c0       	rjmp	.+16     	; 0x14d2 <BST_Delete+0x24e>
				while((current -> PtrToLeftNode) != NULL){
					current = current -> PtrToLeftNode;
    14c2:	e9 85       	ldd	r30, Y+9	; 0x09
    14c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	9a 87       	std	Y+10, r25	; 0x0a
    14cc:	89 87       	std	Y+9, r24	; 0x09
					direction_flag = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	8d 83       	std	Y+5, r24	; 0x05
				return BST_NoError;
			}
			else{
				prev = current;
				current = current -> PtrToRightNode;
				while((current -> PtrToLeftNode) != NULL){
    14d2:	e9 85       	ldd	r30, Y+9	; 0x09
    14d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	91 f7       	brne	.-28     	; 0x14c2 <BST_Delete+0x23e>
					current = current -> PtrToLeftNode;
					direction_flag = 1;
				}
				temp_add = current -> PtrToRightNode;
    14de:	e9 85       	ldd	r30, Y+9	; 0x09
    14e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	9c 83       	std	Y+4, r25	; 0x04
    14e8:	8b 83       	std	Y+3, r24	; 0x03
				temp = current -> Data;
    14ea:	e9 85       	ldd	r30, Y+9	; 0x09
    14ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	89 83       	std	Y+1, r24	; 0x01
				current -> Data = prev -> Data;
    14f2:	ef 81       	ldd	r30, Y+7	; 0x07
    14f4:	f8 85       	ldd	r31, Y+8	; 0x08
    14f6:	84 81       	ldd	r24, Z+4	; 0x04
    14f8:	e9 85       	ldd	r30, Y+9	; 0x09
    14fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    14fc:	84 83       	std	Z+4, r24	; 0x04
				prev -> Data = temp;
    14fe:	ef 81       	ldd	r30, Y+7	; 0x07
    1500:	f8 85       	ldd	r31, Y+8	; 0x08
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	84 83       	std	Z+4, r24	; 0x04
				//prev -> leaf_state = current -> leaf_state;
				temp_child = current -> leaf_state;
    1506:	e9 85       	ldd	r30, Y+9	; 0x09
    1508:	fa 85       	ldd	r31, Y+10	; 0x0a
    150a:	87 81       	ldd	r24, Z+7	; 0x07
    150c:	8a 83       	std	Y+2, r24	; 0x02
				index = current -> Index;
    150e:	e9 85       	ldd	r30, Y+9	; 0x09
    1510:	fa 85       	ldd	r31, Y+10	; 0x0a
    1512:	85 81       	ldd	r24, Z+5	; 0x05
    1514:	8e 83       	std	Y+6, r24	; 0x06
				BST_Free(current);
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <BST_Free>
				current = BST_Find_Parent(BST_ptr -> Root, index);
    151e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1520:	9c 85       	ldd	r25, Y+12	; 0x0c
    1522:	fc 01       	movw	r30, r24
    1524:	e8 56       	subi	r30, 0x68	; 104
    1526:	f9 4f       	sbci	r31, 0xF9	; 249
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	6e 81       	ldd	r22, Y+6	; 0x06
    152e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <BST_Find_Parent>
    1532:	9a 87       	std	Y+10, r25	; 0x0a
    1534:	89 87       	std	Y+9, r24	; 0x09
				if(direction_flag){
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	88 23       	and	r24, r24
    153a:	81 f0       	breq	.+32     	; 0x155c <BST_Delete+0x2d8>
					current -> PtrToLeftNode = temp_add;
    153c:	e9 85       	ldd	r30, Y+9	; 0x09
    153e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
					current -> leaf_state = (current -> leaf_state) - BST_NODE_LEFT_CHILD + temp_child;
    1548:	e9 85       	ldd	r30, Y+9	; 0x09
    154a:	fa 85       	ldd	r31, Y+10	; 0x0a
    154c:	97 81       	ldd	r25, Z+7	; 0x07
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	89 0f       	add	r24, r25
    1552:	81 50       	subi	r24, 0x01	; 1
    1554:	e9 85       	ldd	r30, Y+9	; 0x09
    1556:	fa 85       	ldd	r31, Y+10	; 0x0a
    1558:	87 83       	std	Z+7, r24	; 0x07
    155a:	0f c0       	rjmp	.+30     	; 0x157a <BST_Delete+0x2f6>
				}
				else{
					current -> PtrToRightNode = temp_add;
    155c:	e9 85       	ldd	r30, Y+9	; 0x09
    155e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	93 83       	std	Z+3, r25	; 0x03
    1566:	82 83       	std	Z+2, r24	; 0x02
					current -> leaf_state = (current -> leaf_state) - BST_NODE_RIGHT_CHILD + temp_child;
    1568:	e9 85       	ldd	r30, Y+9	; 0x09
    156a:	fa 85       	ldd	r31, Y+10	; 0x0a
    156c:	97 81       	ldd	r25, Z+7	; 0x07
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	89 0f       	add	r24, r25
    1572:	82 50       	subi	r24, 0x02	; 2
    1574:	e9 85       	ldd	r30, Y+9	; 0x09
    1576:	fa 85       	ldd	r31, Y+10	; 0x0a
    1578:	87 83       	std	Z+7, r24	; 0x07
				}
				BST_UpdateIndex(BST_ptr -> Root, NULL, BST_LEFT);
    157a:	8b 85       	ldd	r24, Y+11	; 0x0b
    157c:	9c 85       	ldd	r25, Y+12	; 0x0c
    157e:	fc 01       	movw	r30, r24
    1580:	e8 56       	subi	r30, 0x68	; 104
    1582:	f9 4f       	sbci	r31, 0xF9	; 249
    1584:	80 81       	ld	r24, Z
    1586:	91 81       	ldd	r25, Z+1	; 0x01
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 95 08 	call	0x112a	; 0x112a <BST_UpdateIndex>
				return BST_NoError;
    1592:	84 e0       	ldi	r24, 0x04	; 4
    1594:	8e 87       	std	Y+14, r24	; 0x0e
    1596:	51 c0       	rjmp	.+162    	; 0x163a <BST_Delete+0x3b6>

			}
		}
		if(data < (current -> Data)){
    1598:	e9 85       	ldd	r30, Y+9	; 0x09
    159a:	fa 85       	ldd	r31, Y+10	; 0x0a
    159c:	94 81       	ldd	r25, Z+4	; 0x04
    159e:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a0:	89 17       	cp	r24, r25
    15a2:	c0 f4       	brcc	.+48     	; 0x15d4 <BST_Delete+0x350>
			if(((current -> leaf_state) == BST_NODE_LEAF) || ((current -> leaf_state) == BST_NODE_RIGHT_CHILD)){
    15a4:	e9 85       	ldd	r30, Y+9	; 0x09
    15a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    15a8:	87 81       	ldd	r24, Z+7	; 0x07
    15aa:	88 23       	and	r24, r24
    15ac:	29 f0       	breq	.+10     	; 0x15b8 <BST_Delete+0x334>
    15ae:	e9 85       	ldd	r30, Y+9	; 0x09
    15b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    15b2:	87 81       	ldd	r24, Z+7	; 0x07
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	19 f4       	brne	.+6      	; 0x15be <BST_Delete+0x33a>
				return BST_ElementNotFound;
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	8e 87       	std	Y+14, r24	; 0x0e
    15bc:	3e c0       	rjmp	.+124    	; 0x163a <BST_Delete+0x3b6>
			}
			else{
				prev = current;
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	98 87       	std	Y+8, r25	; 0x08
    15c4:	8f 83       	std	Y+7, r24	; 0x07
				current = current -> PtrToLeftNode;
    15c6:	e9 85       	ldd	r30, Y+9	; 0x09
    15c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	9a 87       	std	Y+10, r25	; 0x0a
    15d0:	89 87       	std	Y+9, r24	; 0x09
    15d2:	17 c0       	rjmp	.+46     	; 0x1602 <BST_Delete+0x37e>
			}
		}
		else{
			if(((current -> leaf_state) == BST_NODE_LEAF) || ((current -> leaf_state) == BST_NODE_LEFT_CHILD)){
    15d4:	e9 85       	ldd	r30, Y+9	; 0x09
    15d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    15d8:	87 81       	ldd	r24, Z+7	; 0x07
    15da:	88 23       	and	r24, r24
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <BST_Delete+0x364>
    15de:	e9 85       	ldd	r30, Y+9	; 0x09
    15e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    15e2:	87 81       	ldd	r24, Z+7	; 0x07
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	19 f4       	brne	.+6      	; 0x15ee <BST_Delete+0x36a>
				return BST_ElementNotFound;
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	8e 87       	std	Y+14, r24	; 0x0e
    15ec:	26 c0       	rjmp	.+76     	; 0x163a <BST_Delete+0x3b6>
			}
			else{
				prev = current;
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	98 87       	std	Y+8, r25	; 0x08
    15f4:	8f 83       	std	Y+7, r24	; 0x07
				current = current -> PtrToRightNode;
    15f6:	e9 85       	ldd	r30, Y+9	; 0x09
    15f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	9a 87       	std	Y+10, r25	; 0x0a
    1600:	89 87       	std	Y+9, r24	; 0x09
	BST_NODE_LeafOrNot temp_child;
	BST_DataSize temp;
	if(current == NULL){
		return BST_Empty;
	}
	while(!((((current -> PtrToLeftNode) == NULL) && (data < (current -> Data))) || ((((current -> PtrToRightNode) == NULL) && (data > (current -> Data)))))){
    1602:	e9 85       	ldd	r30, Y+9	; 0x09
    1604:	fa 85       	ldd	r31, Y+10	; 0x0a
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	31 f4       	brne	.+12     	; 0x161a <BST_Delete+0x396>
    160e:	e9 85       	ldd	r30, Y+9	; 0x09
    1610:	fa 85       	ldd	r31, Y+10	; 0x0a
    1612:	94 81       	ldd	r25, Z+4	; 0x04
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	89 17       	cp	r24, r25
    1618:	70 f0       	brcs	.+28     	; 0x1636 <BST_Delete+0x3b2>
    161a:	e9 85       	ldd	r30, Y+9	; 0x09
    161c:	fa 85       	ldd	r31, Y+10	; 0x0a
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	09 f0       	breq	.+2      	; 0x1628 <BST_Delete+0x3a4>
    1626:	5b ce       	rjmp	.-842    	; 0x12de <BST_Delete+0x5a>
    1628:	e9 85       	ldd	r30, Y+9	; 0x09
    162a:	fa 85       	ldd	r31, Y+10	; 0x0a
    162c:	94 81       	ldd	r25, Z+4	; 0x04
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	98 17       	cp	r25, r24
    1632:	08 f0       	brcs	.+2      	; 0x1636 <BST_Delete+0x3b2>
    1634:	54 ce       	rjmp	.-856    	; 0x12de <BST_Delete+0x5a>
				prev = current;
				current = current -> PtrToRightNode;
			}
		}
	}
	return BST_ElementNotFound;
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	8e 87       	std	Y+14, r24	; 0x0e
    163a:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    163c:	2e 96       	adiw	r28, 0x0e	; 14
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <DIO_DefinePinsDirections>:

#include"DIO.h"


void DIO_DefinePinsDirections(void)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	PORTA_direction = CONC(PA0_Direction, PA1_Direction, PA2_Direction, PA3_Direction, PA4_Direction, PA5_Direction, PA6_Direction, PA7_Direction);
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 83       	st	Z, r24
	PORTB_direction = CONC(PB0_Direction, PB1_Direction, PB2_Direction, PB3_Direction, PB4_Direction, PB5_Direction, PB6_Direction, PB7_Direction);
    165e:	e7 e3       	ldi	r30, 0x37	; 55
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	10 82       	st	Z, r1
	PORTC_direction = CONC(PC0_Direction, PC1_Direction, PC2_Direction, PC3_Direction, PC4_Direction, PC5_Direction, PC6_Direction, PC7_Direction);
    1664:	e4 e3       	ldi	r30, 0x34	; 52
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	80 83       	st	Z, r24
	PORTD_direction = CONC(PD0_Direction, PD1_Direction, PD2_Direction, PD3_Direction, PD4_Direction, PD5_Direction, PD6_Direction, PD7_Direction);
    166c:	e1 e3       	ldi	r30, 0x31	; 49
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	80 83       	st	Z, r24
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <DIO_ReadChannel>:

uint8 DIO_ReadChannel(volatile const uint8 a_PIN){
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <DIO_ReadChannel+0x6>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_Data = 0;
    1686:	19 82       	std	Y+1, r1	; 0x01
	if(a_PIN/8 == 0){
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	88 30       	cpi	r24, 0x08	; 8
    168c:	f8 f4       	brcc	.+62     	; 0x16cc <DIO_ReadChannel+0x52>
		a_Data = (PORTA_input & (1 << a_PIN));
    168e:	e9 e3       	ldi	r30, 0x39	; 57
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_ReadChannel+0x2c>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	2a 95       	dec	r18
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_ReadChannel+0x28>
    16aa:	84 23       	and	r24, r20
    16ac:	89 83       	std	Y+1, r24	; 0x01
		a_Data = a_Data >> a_PIN;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a9 01       	movw	r20, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_ReadChannel+0x48>
    16be:	55 95       	asr	r21
    16c0:	47 95       	ror	r20
    16c2:	8a 95       	dec	r24
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_ReadChannel+0x44>
    16c6:	ca 01       	movw	r24, r20
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	6d c0       	rjmp	.+218    	; 0x17a6 <DIO_ReadChannel+0x12c>
	}
	else if(a_PIN/8 == 1)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	88 50       	subi	r24, 0x08	; 8
    16d0:	88 30       	cpi	r24, 0x08	; 8
    16d2:	10 f5       	brcc	.+68     	; 0x1718 <DIO_ReadChannel+0x9e>
		a_Data = ((PORTB_input&(1 << (a_PIN-8))) >> (a_PIN-8));
    16d4:	e6 e3       	ldi	r30, 0x36	; 54
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9c 01       	movw	r18, r24
    16e6:	28 50       	subi	r18, 0x08	; 8
    16e8:	30 40       	sbci	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_ReadChannel+0x7a>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	2a 95       	dec	r18
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_ReadChannel+0x76>
    16f8:	9a 01       	movw	r18, r20
    16fa:	28 23       	and	r18, r24
    16fc:	39 23       	and	r19, r25
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	08 97       	sbiw	r24, 0x08	; 8
    1706:	a9 01       	movw	r20, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_ReadChannel+0x94>
    170a:	55 95       	asr	r21
    170c:	47 95       	ror	r20
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_ReadChannel+0x90>
    1712:	ca 01       	movw	r24, r20
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	47 c0       	rjmp	.+142    	; 0x17a6 <DIO_ReadChannel+0x12c>
	else if(a_PIN/8 == 2)
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	80 51       	subi	r24, 0x10	; 16
    171c:	88 30       	cpi	r24, 0x08	; 8
    171e:	10 f5       	brcc	.+68     	; 0x1764 <DIO_ReadChannel+0xea>
		a_Data = ((PORTC_input&(1 << (a_PIN-16))) >> (a_PIN-16));
    1720:	e3 e3       	ldi	r30, 0x33	; 51
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9c 01       	movw	r18, r24
    1732:	20 51       	subi	r18, 0x10	; 16
    1734:	30 40       	sbci	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_ReadChannel+0xc6>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	2a 95       	dec	r18
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_ReadChannel+0xc2>
    1744:	9a 01       	movw	r18, r20
    1746:	28 23       	and	r18, r24
    1748:	39 23       	and	r19, r25
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	40 97       	sbiw	r24, 0x10	; 16
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_ReadChannel+0xe0>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_ReadChannel+0xdc>
    175e:	ca 01       	movw	r24, r20
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	21 c0       	rjmp	.+66     	; 0x17a6 <DIO_ReadChannel+0x12c>
	else
		a_Data = ((PORTD_input&(1 << (a_PIN-24))) >> (a_PIN-24));
    1764:	e0 e3       	ldi	r30, 0x30	; 48
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9c 01       	movw	r18, r24
    1776:	28 51       	subi	r18, 0x18	; 24
    1778:	30 40       	sbci	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_ReadChannel+0x10a>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	2a 95       	dec	r18
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_ReadChannel+0x106>
    1788:	9a 01       	movw	r18, r20
    178a:	28 23       	and	r18, r24
    178c:	39 23       	and	r19, r25
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	48 97       	sbiw	r24, 0x18	; 24
    1796:	a9 01       	movw	r20, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_ReadChannel+0x124>
    179a:	55 95       	asr	r21
    179c:	47 95       	ror	r20
    179e:	8a 95       	dec	r24
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_ReadChannel+0x120>
    17a2:	ca 01       	movw	r24, r20
    17a4:	89 83       	std	Y+1, r24	; 0x01

	return a_Data;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DIO_WriteChannel>:

void DIO_WriteChannel(volatile const uint8 a_PIN){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0){
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	88 30       	cpi	r24, 0x08	; 8
    17c2:	a0 f4       	brcc	.+40     	; 0x17ec <DIO_WriteChannel+0x3a>
		PORTA_output |= (1<<a_PIN);
    17c4:	ab e3       	ldi	r26, 0x3B	; 59
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	eb e3       	ldi	r30, 0x3B	; 59
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_WriteChannel+0x30>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_WriteChannel+0x2c>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	4c c0       	rjmp	.+152    	; 0x1884 <DIO_WriteChannel+0xd2>
	}
	else if(a_PIN/8 == 1){
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	88 50       	subi	r24, 0x08	; 8
    17f0:	88 30       	cpi	r24, 0x08	; 8
    17f2:	b8 f4       	brcc	.+46     	; 0x1822 <DIO_WriteChannel+0x70>
		PORTB_output |= (1<<(a_PIN-8));
    17f4:	a8 e3       	ldi	r26, 0x38	; 56
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e8 e3       	ldi	r30, 0x38	; 56
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 01       	movw	r18, r24
    1808:	28 50       	subi	r18, 0x08	; 8
    180a:	30 40       	sbci	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_WriteChannel+0x66>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_WriteChannel+0x62>
    181c:	84 2b       	or	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	31 c0       	rjmp	.+98     	; 0x1884 <DIO_WriteChannel+0xd2>
	}
	else if(a_PIN/8 == 2){
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	80 51       	subi	r24, 0x10	; 16
    1826:	88 30       	cpi	r24, 0x08	; 8
    1828:	b8 f4       	brcc	.+46     	; 0x1858 <DIO_WriteChannel+0xa6>
		PORTC_output |= (1<<(a_PIN-16));
    182a:	a5 e3       	ldi	r26, 0x35	; 53
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 01       	movw	r18, r24
    183e:	20 51       	subi	r18, 0x10	; 16
    1840:	30 40       	sbci	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_WriteChannel+0x9c>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_WriteChannel+0x98>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	16 c0       	rjmp	.+44     	; 0x1884 <DIO_WriteChannel+0xd2>
	}
	else{
		PORTD_output |= (1<<(a_PIN-24));
    1858:	a2 e3       	ldi	r26, 0x32	; 50
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c 01       	movw	r18, r24
    186c:	28 51       	subi	r18, 0x18	; 24
    186e:	30 40       	sbci	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_WriteChannel+0xca>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_WriteChannel+0xc6>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
	}
}
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <DIO_ClearChannel>:

void DIO_ClearChannel(volatile const uint8 a_PIN){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 30       	cpi	r24, 0x08	; 8
    189c:	a8 f4       	brcc	.+42     	; 0x18c8 <DIO_ClearChannel+0x3c>
		PORTA_output &= ~(1 << a_PIN);
    189e:	ab e3       	ldi	r26, 0x3B	; 59
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	eb e3       	ldi	r30, 0x3B	; 59
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_ClearChannel+0x30>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_ClearChannel+0x2c>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	4f c0       	rjmp	.+158    	; 0x1966 <DIO_ClearChannel+0xda>
	else if(a_PIN/8 == 1)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	88 50       	subi	r24, 0x08	; 8
    18cc:	88 30       	cpi	r24, 0x08	; 8
    18ce:	c0 f4       	brcc	.+48     	; 0x1900 <DIO_ClearChannel+0x74>
		PORTB_output &= ~(1 << (a_PIN - 8));
    18d0:	a8 e3       	ldi	r26, 0x38	; 56
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9c 01       	movw	r18, r24
    18e4:	28 50       	subi	r18, 0x08	; 8
    18e6:	30 40       	sbci	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_ClearChannel+0x68>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_ClearChannel+0x64>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	33 c0       	rjmp	.+102    	; 0x1966 <DIO_ClearChannel+0xda>
	else if(a_PIN/8 == 2)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	80 51       	subi	r24, 0x10	; 16
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	c0 f4       	brcc	.+48     	; 0x1938 <DIO_ClearChannel+0xac>
		PORTC_output &= ~(1 << (a_PIN - 16));
    1908:	a5 e3       	ldi	r26, 0x35	; 53
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e3       	ldi	r30, 0x35	; 53
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9c 01       	movw	r18, r24
    191c:	20 51       	subi	r18, 0x10	; 16
    191e:	30 40       	sbci	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_ClearChannel+0xa0>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_ClearChannel+0x9c>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	17 c0       	rjmp	.+46     	; 0x1966 <DIO_ClearChannel+0xda>
	else
		PORTD_output &= ~(1 << (a_PIN - 24));
    1938:	a2 e3       	ldi	r26, 0x32	; 50
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e2 e3       	ldi	r30, 0x32	; 50
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9c 01       	movw	r18, r24
    194c:	28 51       	subi	r18, 0x18	; 24
    194e:	30 40       	sbci	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_ClearChannel+0xd0>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_ClearChannel+0xcc>
    1960:	80 95       	com	r24
    1962:	84 23       	and	r24, r20
    1964:	8c 93       	st	X, r24
}
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <DIO_WritePins>:

void DIO_WritePins(volatile const uint8 port, volatile const uint8 value, volatile const uint8 filter)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	28 97       	sbiw	r28, 0x08	; 8
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	8c 83       	std	Y+4, r24	; 0x04
    1984:	6d 83       	std	Y+5, r22	; 0x05
    1986:	4e 83       	std	Y+6, r20	; 0x06
	uint8 shift = 0, temp_filter = filter;
    1988:	1b 82       	std	Y+3, r1	; 0x03
    198a:	8e 81       	ldd	r24, Y+6	; 0x06
    198c:	8a 83       	std	Y+2, r24	; 0x02

	for(uint8 count = 0; count < 8; count++)
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	10 c0       	rjmp	.+32     	; 0x19b2 <DIO_WritePins+0x44>
	{
		if((temp_filter & 1) == 1){
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	88 23       	and	r24, r24
    199e:	19 f0       	breq	.+6      	; 0x19a6 <DIO_WritePins+0x38>
			shift = count;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	09 c0       	rjmp	.+18     	; 0x19b8 <DIO_WritePins+0x4a>
			break;
		}

		temp_filter = temp_filter >>1;
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	86 95       	lsr	r24
    19aa:	8a 83       	std	Y+2, r24	; 0x02

void DIO_WritePins(volatile const uint8 port, volatile const uint8 value, volatile const uint8 filter)
{
	uint8 shift = 0, temp_filter = filter;

	for(uint8 count = 0; count < 8; count++)
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	68 f3       	brcs	.-38     	; 0x1992 <DIO_WritePins+0x24>
		}

		temp_filter = temp_filter >>1;
	}

	switch(port)
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	38 87       	std	Y+8, r19	; 0x08
    19c0:	2f 83       	std	Y+7, r18	; 0x07
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	61 30       	cpi	r22, 0x01	; 1
    19c8:	71 05       	cpc	r23, r1
    19ca:	a9 f1       	breq	.+106    	; 0x1a36 <DIO_WritePins+0xc8>
    19cc:	8f 81       	ldd	r24, Y+7	; 0x07
    19ce:	98 85       	ldd	r25, Y+8	; 0x08
    19d0:	82 30       	cpi	r24, 0x02	; 2
    19d2:	91 05       	cpc	r25, r1
    19d4:	34 f4       	brge	.+12     	; 0x19e2 <DIO_WritePins+0x74>
    19d6:	2f 81       	ldd	r18, Y+7	; 0x07
    19d8:	38 85       	ldd	r19, Y+8	; 0x08
    19da:	21 15       	cp	r18, r1
    19dc:	31 05       	cpc	r19, r1
    19de:	71 f0       	breq	.+28     	; 0x19fc <DIO_WritePins+0x8e>
    19e0:	80 c0       	rjmp	.+256    	; 0x1ae2 <DIO_WritePins+0x174>
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	62 30       	cpi	r22, 0x02	; 2
    19e8:	71 05       	cpc	r23, r1
    19ea:	09 f4       	brne	.+2      	; 0x19ee <DIO_WritePins+0x80>
    19ec:	41 c0       	rjmp	.+130    	; 0x1a70 <DIO_WritePins+0x102>
    19ee:	8f 81       	ldd	r24, Y+7	; 0x07
    19f0:	98 85       	ldd	r25, Y+8	; 0x08
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <DIO_WritePins+0x8c>
    19f8:	58 c0       	rjmp	.+176    	; 0x1aaa <DIO_WritePins+0x13c>
    19fa:	73 c0       	rjmp	.+230    	; 0x1ae2 <DIO_WritePins+0x174>
	{
	case DIO_PORTA:
		PORTA_output = (PORTA_output & (~filter)) | ((value << shift) & (filter));
    19fc:	ab e3       	ldi	r26, 0x3B	; 59
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	eb e3       	ldi	r30, 0x3B	; 59
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	98 2f       	mov	r25, r24
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	80 95       	com	r24
    1a0c:	49 2f       	mov	r20, r25
    1a0e:	48 23       	and	r20, r24
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <DIO_WritePins+0xb6>
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	8a 95       	dec	r24
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <DIO_WritePins+0xb2>
    1a28:	cb 01       	movw	r24, r22
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	89 23       	and	r24, r25
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	56 c0       	rjmp	.+172    	; 0x1ae2 <DIO_WritePins+0x174>
		break;
	case DIO_PORTB:
		PORTB_output = (PORTB_output & (~filter)) | ((value << shift) & (filter));
    1a36:	a8 e3       	ldi	r26, 0x38	; 56
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e8 e3       	ldi	r30, 0x38	; 56
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	98 2f       	mov	r25, r24
    1a42:	8e 81       	ldd	r24, Y+6	; 0x06
    1a44:	80 95       	com	r24
    1a46:	49 2f       	mov	r20, r25
    1a48:	48 23       	and	r20, r24
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b9 01       	movw	r22, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_WritePins+0xf0>
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_WritePins+0xec>
    1a62:	cb 01       	movw	r24, r22
    1a64:	98 2f       	mov	r25, r24
    1a66:	8e 81       	ldd	r24, Y+6	; 0x06
    1a68:	89 23       	and	r24, r25
    1a6a:	84 2b       	or	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	39 c0       	rjmp	.+114    	; 0x1ae2 <DIO_WritePins+0x174>
		break;
	case DIO_PORTC:
		PORTC_output = (PORTC_output & (~filter)) | ((value << shift) & (filter));
    1a70:	a5 e3       	ldi	r26, 0x35	; 53
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e5 e3       	ldi	r30, 0x35	; 53
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	80 95       	com	r24
    1a80:	49 2f       	mov	r20, r25
    1a82:	48 23       	and	r20, r24
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	b9 01       	movw	r22, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_WritePins+0x12a>
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	8a 95       	dec	r24
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_WritePins+0x126>
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa2:	89 23       	and	r24, r25
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	1c c0       	rjmp	.+56     	; 0x1ae2 <DIO_WritePins+0x174>
		break;
	case DIO_PORTD:
		PORTD_output = (PORTD_output & (~filter)) | ((value << shift) & (filter));
    1aaa:	a2 e3       	ldi	r26, 0x32	; 50
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e2 e3       	ldi	r30, 0x32	; 50
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	80 95       	com	r24
    1aba:	49 2f       	mov	r20, r25
    1abc:	48 23       	and	r20, r24
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	b9 01       	movw	r22, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_WritePins+0x164>
    1ace:	66 0f       	add	r22, r22
    1ad0:	77 1f       	adc	r23, r23
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_WritePins+0x160>
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	98 2f       	mov	r25, r24
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	89 23       	and	r24, r25
    1ade:	84 2b       	or	r24, r20
    1ae0:	8c 93       	st	X, r24
		break;
	default:
		//error
		break;
	}
}
    1ae2:	28 96       	adiw	r28, 0x08	; 8
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <DIO_MakeInput>:

void DIO_MakeInput(volatile const uint8 a_PIN){
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	88 30       	cpi	r24, 0x08	; 8
    1b04:	a8 f4       	brcc	.+42     	; 0x1b30 <DIO_MakeInput+0x3c>
		PORTA_direction &= ~(1 << a_PIN);
    1b06:	aa e3       	ldi	r26, 0x3A	; 58
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ea e3       	ldi	r30, 0x3A	; 58
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_MakeInput+0x30>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_MakeInput+0x2c>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	4f c0       	rjmp	.+158    	; 0x1bce <DIO_MakeInput+0xda>
	else if(a_PIN/8 == 1)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	88 50       	subi	r24, 0x08	; 8
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	c0 f4       	brcc	.+48     	; 0x1b68 <DIO_MakeInput+0x74>
		PORTB_direction &= ~(1 << (a_PIN - 8));
    1b38:	a7 e3       	ldi	r26, 0x37	; 55
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e7 e3       	ldi	r30, 0x37	; 55
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	28 50       	subi	r18, 0x08	; 8
    1b4e:	30 40       	sbci	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <DIO_MakeInput+0x68>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <DIO_MakeInput+0x64>
    1b60:	80 95       	com	r24
    1b62:	84 23       	and	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	33 c0       	rjmp	.+102    	; 0x1bce <DIO_MakeInput+0xda>
	else if(a_PIN/8 == 2)
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	80 51       	subi	r24, 0x10	; 16
    1b6c:	88 30       	cpi	r24, 0x08	; 8
    1b6e:	c0 f4       	brcc	.+48     	; 0x1ba0 <DIO_MakeInput+0xac>
		PORTC_direction &= ~(1 << (a_PIN - 16));
    1b70:	a4 e3       	ldi	r26, 0x34	; 52
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e4 e3       	ldi	r30, 0x34	; 52
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9c 01       	movw	r18, r24
    1b84:	20 51       	subi	r18, 0x10	; 16
    1b86:	30 40       	sbci	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_MakeInput+0xa0>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_MakeInput+0x9c>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	17 c0       	rjmp	.+46     	; 0x1bce <DIO_MakeInput+0xda>
	else
		PORTD_direction &= ~(1 << (a_PIN - 24));
    1ba0:	a1 e3       	ldi	r26, 0x31	; 49
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e1 e3       	ldi	r30, 0x31	; 49
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c 01       	movw	r18, r24
    1bb4:	28 51       	subi	r18, 0x18	; 24
    1bb6:	30 40       	sbci	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_MakeInput+0xd0>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_MakeInput+0xcc>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
}
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <DIO_MakeOutput>:

void DIO_MakeOutput(volatile const uint8 a_PIN){
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	88 30       	cpi	r24, 0x08	; 8
    1be6:	a0 f4       	brcc	.+40     	; 0x1c10 <DIO_MakeOutput+0x3a>
		PORTA_direction |= (1 << a_PIN);
    1be8:	aa e3       	ldi	r26, 0x3A	; 58
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_MakeOutput+0x30>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_MakeOutput+0x2c>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	4c c0       	rjmp	.+152    	; 0x1ca8 <DIO_MakeOutput+0xd2>
	else if(a_PIN/8 == 1)
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	88 50       	subi	r24, 0x08	; 8
    1c14:	88 30       	cpi	r24, 0x08	; 8
    1c16:	b8 f4       	brcc	.+46     	; 0x1c46 <DIO_MakeOutput+0x70>
		PORTB_direction |= (1 << (a_PIN - 8));
    1c18:	a7 e3       	ldi	r26, 0x37	; 55
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e7 e3       	ldi	r30, 0x37	; 55
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9c 01       	movw	r18, r24
    1c2c:	28 50       	subi	r18, 0x08	; 8
    1c2e:	30 40       	sbci	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_MakeOutput+0x66>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_MakeOutput+0x62>
    1c40:	84 2b       	or	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	31 c0       	rjmp	.+98     	; 0x1ca8 <DIO_MakeOutput+0xd2>
	else if(a_PIN/8 == 2)
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	80 51       	subi	r24, 0x10	; 16
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	b8 f4       	brcc	.+46     	; 0x1c7c <DIO_MakeOutput+0xa6>
		PORTC_direction |= (1 << (a_PIN - 16));
    1c4e:	a4 e3       	ldi	r26, 0x34	; 52
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e4 e3       	ldi	r30, 0x34	; 52
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9c 01       	movw	r18, r24
    1c62:	20 51       	subi	r18, 0x10	; 16
    1c64:	30 40       	sbci	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <DIO_MakeOutput+0x9c>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <DIO_MakeOutput+0x98>
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	16 c0       	rjmp	.+44     	; 0x1ca8 <DIO_MakeOutput+0xd2>
	else
		PORTD_direction |= (1 << (a_PIN - 24));
    1c7c:	a1 e3       	ldi	r26, 0x31	; 49
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e1 e3       	ldi	r30, 0x31	; 49
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 01       	movw	r18, r24
    1c90:	28 51       	subi	r18, 0x18	; 24
    1c92:	30 40       	sbci	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_MakeOutput+0xca>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_MakeOutput+0xc6>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
}
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <DIO_ToggleChannel>:

void DIO_ToggleChannel(volatile const uint8 a_PIN){
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	89 83       	std	Y+1, r24	; 0x01
	if(a_PIN/8 == 0)
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	88 30       	cpi	r24, 0x08	; 8
    1cc0:	a0 f4       	brcc	.+40     	; 0x1cea <DIO_ToggleChannel+0x3a>
		PORTA_output ^= (1 << a_PIN);
    1cc2:	ab e3       	ldi	r26, 0x3B	; 59
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	eb e3       	ldi	r30, 0x3B	; 59
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_ToggleChannel+0x30>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_ToggleChannel+0x2c>
    1ce4:	84 27       	eor	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	4c c0       	rjmp	.+152    	; 0x1d82 <DIO_ToggleChannel+0xd2>
	else if(a_PIN/8 == 1)
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	88 50       	subi	r24, 0x08	; 8
    1cee:	88 30       	cpi	r24, 0x08	; 8
    1cf0:	b8 f4       	brcc	.+46     	; 0x1d20 <DIO_ToggleChannel+0x70>
		PORTB_output ^= (1 << (a_PIN - 8));
    1cf2:	a8 e3       	ldi	r26, 0x38	; 56
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e8 e3       	ldi	r30, 0x38	; 56
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 01       	movw	r18, r24
    1d06:	28 50       	subi	r18, 0x08	; 8
    1d08:	30 40       	sbci	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_ToggleChannel+0x66>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_ToggleChannel+0x62>
    1d1a:	84 27       	eor	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	31 c0       	rjmp	.+98     	; 0x1d82 <DIO_ToggleChannel+0xd2>
	else if(a_PIN/8 == 2)
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	80 51       	subi	r24, 0x10	; 16
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	b8 f4       	brcc	.+46     	; 0x1d56 <DIO_ToggleChannel+0xa6>
		PORTC_output ^= (1 << (a_PIN - 16));
    1d28:	a5 e3       	ldi	r26, 0x35	; 53
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e5 e3       	ldi	r30, 0x35	; 53
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9c 01       	movw	r18, r24
    1d3c:	20 51       	subi	r18, 0x10	; 16
    1d3e:	30 40       	sbci	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_ToggleChannel+0x9c>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_ToggleChannel+0x98>
    1d50:	84 27       	eor	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	16 c0       	rjmp	.+44     	; 0x1d82 <DIO_ToggleChannel+0xd2>
	else
		PORTD_output ^= (1 << (a_PIN - 24));
    1d56:	a2 e3       	ldi	r26, 0x32	; 50
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e2 e3       	ldi	r30, 0x32	; 50
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 01       	movw	r18, r24
    1d6a:	28 51       	subi	r18, 0x18	; 24
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_ToggleChannel+0xca>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_ToggleChannel+0xc6>
    1d7e:	84 27       	eor	r24, r20
    1d80:	8c 93       	st	X, r24
}
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <DIO_PortOutput>:

void DIO_PortOutput(volatile const uint8 port)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <DIO_PortOutput+0x6>
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3b 83       	std	Y+3, r19	; 0x03
    1da0:	2a 83       	std	Y+2, r18	; 0x02
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	d1 f0       	breq	.+52     	; 0x1de0 <DIO_PortOutput+0x56>
    1dac:	2a 81       	ldd	r18, Y+2	; 0x02
    1dae:	3b 81       	ldd	r19, Y+3	; 0x03
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <DIO_PortOutput+0x36>
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <DIO_PortOutput+0x4c>
    1dbe:	1e c0       	rjmp	.+60     	; 0x1dfc <DIO_PortOutput+0x72>
    1dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	81 f0       	breq	.+32     	; 0x1dea <DIO_PortOutput+0x60>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	81 f0       	breq	.+32     	; 0x1df4 <DIO_PortOutput+0x6a>
    1dd4:	13 c0       	rjmp	.+38     	; 0x1dfc <DIO_PortOutput+0x72>
	{
	case DIO_PORTA:
		PORTA_direction = 0xFF;
    1dd6:	ea e3       	ldi	r30, 0x3A	; 58
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	80 83       	st	Z, r24
    1dde:	0e c0       	rjmp	.+28     	; 0x1dfc <DIO_PortOutput+0x72>
		break;
	case DIO_PORTB:
		PORTB_direction = 0xFF;
    1de0:	e7 e3       	ldi	r30, 0x37	; 55
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	80 83       	st	Z, r24
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <DIO_PortOutput+0x72>
		break;
	case DIO_PORTC:
		PORTC_direction = 0xFF;
    1dea:	e4 e3       	ldi	r30, 0x34	; 52
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	80 83       	st	Z, r24
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <DIO_PortOutput+0x72>
		break;
	case DIO_PORTD:
		PORTD_direction = 0xFF;
    1df4:	e1 e3       	ldi	r30, 0x31	; 49
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	80 83       	st	Z, r24
		break;
	default:
		//error
		break;
	}
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <DIO_PortInput>:

void DIO_PortInput(volatile const uint8 port)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <DIO_PortInput+0x6>
    1e0e:	0f 92       	push	r0
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	3b 83       	std	Y+3, r19	; 0x03
    1e1e:	2a 83       	std	Y+2, r18	; 0x02
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	91 05       	cpc	r25, r1
    1e28:	c9 f0       	breq	.+50     	; 0x1e5c <DIO_PortInput+0x54>
    1e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	31 05       	cpc	r19, r1
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <DIO_PortInput+0x36>
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	9b 81       	ldd	r25, Y+3	; 0x03
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <DIO_PortInput+0x4c>
    1e3c:	1a c0       	rjmp	.+52     	; 0x1e72 <DIO_PortInput+0x6a>
    1e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e40:	3b 81       	ldd	r19, Y+3	; 0x03
    1e42:	22 30       	cpi	r18, 0x02	; 2
    1e44:	31 05       	cpc	r19, r1
    1e46:	71 f0       	breq	.+28     	; 0x1e64 <DIO_PortInput+0x5c>
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	91 05       	cpc	r25, r1
    1e50:	69 f0       	breq	.+26     	; 0x1e6c <DIO_PortInput+0x64>
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <DIO_PortInput+0x6a>
	{
	case DIO_PORTA:
		PORTA_direction = 0;
    1e54:	ea e3       	ldi	r30, 0x3A	; 58
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	10 82       	st	Z, r1
    1e5a:	0b c0       	rjmp	.+22     	; 0x1e72 <DIO_PortInput+0x6a>
		break;
	case DIO_PORTB:
		PORTB_direction = 0;
    1e5c:	e7 e3       	ldi	r30, 0x37	; 55
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	10 82       	st	Z, r1
    1e62:	07 c0       	rjmp	.+14     	; 0x1e72 <DIO_PortInput+0x6a>
		break;
	case DIO_PORTC:
		PORTC_direction = 0;
    1e64:	e4 e3       	ldi	r30, 0x34	; 52
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	10 82       	st	Z, r1
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <DIO_PortInput+0x6a>
		break;
	case DIO_PORTD:
		PORTD_direction = 0;
    1e6c:	e1 e3       	ldi	r30, 0x31	; 49
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	10 82       	st	Z, r1
		break;
	default:
		//error
		break;
	}
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <DIO_WritePort>:

void DIO_WritePort(volatile const uint8 port, volatile const uint8 value)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <DIO_WritePort+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <DIO_WritePort+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3c 83       	std	Y+4, r19	; 0x04
    1e96:	2b 83       	std	Y+3, r18	; 0x03
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	d1 f0       	breq	.+52     	; 0x1ed6 <DIO_WritePort+0x58>
    1ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <DIO_WritePort+0x38>
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	61 f0       	breq	.+24     	; 0x1ecc <DIO_WritePort+0x4e>
    1eb4:	1e c0       	rjmp	.+60     	; 0x1ef2 <DIO_WritePort+0x74>
    1eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	81 f0       	breq	.+32     	; 0x1ee0 <DIO_WritePort+0x62>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	81 f0       	breq	.+32     	; 0x1eea <DIO_WritePort+0x6c>
    1eca:	13 c0       	rjmp	.+38     	; 0x1ef2 <DIO_WritePort+0x74>
	{
	case DIO_PORTA:
		PORTA_output = value;
    1ecc:	eb e3       	ldi	r30, 0x3B	; 59
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	80 83       	st	Z, r24
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <DIO_WritePort+0x74>
		break;
	case DIO_PORTB:
		PORTB_output = value;
    1ed6:	e8 e3       	ldi	r30, 0x38	; 56
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	80 83       	st	Z, r24
    1ede:	09 c0       	rjmp	.+18     	; 0x1ef2 <DIO_WritePort+0x74>
		break;
	case DIO_PORTC:
		PORTC_output = value;
    1ee0:	e5 e3       	ldi	r30, 0x35	; 53
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	80 83       	st	Z, r24
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <DIO_WritePort+0x74>
		break;
	case DIO_PORTD:
		PORTD_output = value;
    1eea:	e2 e3       	ldi	r30, 0x32	; 50
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	80 83       	st	Z, r24
		break;
	default:
		//error
		break;
	}
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_Init>:
 *  Created on: 5 Apr 2019
 *      Author: Yahia
 */
#include"LCD.h"

void LCD_Init(volatile const uint8 a_NumBits, volatile const uint8 a_Cursor){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_Init+0x6>
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	6a 83       	std	Y+2, r22	; 0x02
	 * a_Cursor for defining the status of the cursor, you can also
	   use CursorOff, CursorOn, CursorBlinking OR 0x0C, 0x0E, 0x0F respectively.
	 * a_NumBits for defining the number of bits(data to be transmitted 4/8 bits)
	   you can also use LCD_4Bit, LCD_4Bit OR 0x28, 0x38 respectively.
	 * */
	DIO_PortOutput(DataPort);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <DIO_PortOutput>
	DIO_MakeOutput(RS);
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <DIO_MakeOutput>
	DIO_MakeOutput(RW);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <DIO_MakeOutput>
	DIO_MakeOutput(Enable);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <DIO_MakeOutput>
	LCD_SendCommand(a_NumBits);
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_SendCommand>
	LCD_SendCommand(a_Cursor);
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_SendCommand>
	LCD_SendCommand(Clear_LCD);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_SendCommand>
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <LCD_SendCommand>:

void LCD_SendCommand(volatile const uint8 a_Command){
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	e9 97       	sbiw	r28, 0x39	; 57
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	89 af       	std	Y+57, r24	; 0x39
	DIO_ClearChannel(RS); //RS = 0 ===> command mode.
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ClearChannel>
	DIO_ClearChannel(RW); //RW = 0 ===> Write Data.
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ClearChannel>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e8       	ldi	r26, 0x80	; 128
    1f6a:	bf e3       	ldi	r27, 0x3F	; 63
    1f6c:	8d ab       	std	Y+53, r24	; 0x35
    1f6e:	9e ab       	std	Y+54, r25	; 0x36
    1f70:	af ab       	std	Y+55, r26	; 0x37
    1f72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	6d a9       	ldd	r22, Y+53	; 0x35
    1f76:	7e a9       	ldd	r23, Y+54	; 0x36
    1f78:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7c:	2d ec       	ldi	r18, 0xCD	; 205
    1f7e:	3c ec       	ldi	r19, 0xCC	; 204
    1f80:	4c e2       	ldi	r20, 0x2C	; 44
    1f82:	55 e4       	ldi	r21, 0x45	; 69
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	89 ab       	std	Y+49, r24	; 0x31
    1f8e:	9a ab       	std	Y+50, r25	; 0x32
    1f90:	ab ab       	std	Y+51, r26	; 0x33
    1f92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f94:	69 a9       	ldd	r22, Y+49	; 0x31
    1f96:	7a a9       	ldd	r23, Y+50	; 0x32
    1f98:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_SendCommand+0x74>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	98 ab       	std	Y+48, r25	; 0x30
    1fb2:	8f a7       	std	Y+47, r24	; 0x2f
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_SendCommand+0xf2>
	else if (__tmp > 65535)
    1fb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fba:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_SendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	98 ab       	std	Y+48, r25	; 0x30
    1ff4:	8f a7       	std	Y+47, r24	; 0x2f
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_SendCommand+0xd4>
    1ff8:	84 e1       	ldi	r24, 0x14	; 20
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	9e a7       	std	Y+46, r25	; 0x2e
    1ffe:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2000:	8d a5       	ldd	r24, Y+45	; 0x2d
    2002:	9e a5       	ldd	r25, Y+46	; 0x2e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_SendCommand+0xc2>
    2008:	9e a7       	std	Y+46, r25	; 0x2e
    200a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8f a5       	ldd	r24, Y+47	; 0x2f
    200e:	98 a9       	ldd	r25, Y+48	; 0x30
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	98 ab       	std	Y+48, r25	; 0x30
    2014:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8f a5       	ldd	r24, Y+47	; 0x2f
    2018:	98 a9       	ldd	r25, Y+48	; 0x30
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_SendCommand+0xb6>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_SendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	69 a9       	ldd	r22, Y+49	; 0x31
    2022:	7a a9       	ldd	r23, Y+50	; 0x32
    2024:	8b a9       	ldd	r24, Y+51	; 0x33
    2026:	9c a9       	ldd	r25, Y+52	; 0x34
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	98 ab       	std	Y+48, r25	; 0x30
    2032:	8f a7       	std	Y+47, r24	; 0x2f
    2034:	8f a5       	ldd	r24, Y+47	; 0x2f
    2036:	98 a9       	ldd	r25, Y+48	; 0x30
    2038:	9c a7       	std	Y+44, r25	; 0x2c
    203a:	8b a7       	std	Y+43, r24	; 0x2b
    203c:	8b a5       	ldd	r24, Y+43	; 0x2b
    203e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_SendCommand+0xfe>
    2044:	9c a7       	std	Y+44, r25	; 0x2c
    2046:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_WriteChannel(Enable);
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_WriteChannel>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e8       	ldi	r26, 0x80	; 128
    2054:	bf e3       	ldi	r27, 0x3F	; 63
    2056:	8f a3       	std	Y+39, r24	; 0x27
    2058:	98 a7       	std	Y+40, r25	; 0x28
    205a:	a9 a7       	std	Y+41, r26	; 0x29
    205c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6f a1       	ldd	r22, Y+39	; 0x27
    2060:	78 a5       	ldd	r23, Y+40	; 0x28
    2062:	89 a5       	ldd	r24, Y+41	; 0x29
    2064:	9a a5       	ldd	r25, Y+42	; 0x2a
    2066:	2d ec       	ldi	r18, 0xCD	; 205
    2068:	3c ec       	ldi	r19, 0xCC	; 204
    206a:	4c e2       	ldi	r20, 0x2C	; 44
    206c:	55 e4       	ldi	r21, 0x45	; 69
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8b a3       	std	Y+35, r24	; 0x23
    2078:	9c a3       	std	Y+36, r25	; 0x24
    207a:	ad a3       	std	Y+37, r26	; 0x25
    207c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207e:	6b a1       	ldd	r22, Y+35	; 0x23
    2080:	7c a1       	ldd	r23, Y+36	; 0x24
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	9e a1       	ldd	r25, Y+38	; 0x26
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <LCD_SendCommand+0x15e>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	3f c0       	rjmp	.+126    	; 0x211e <LCD_SendCommand+0x1dc>
	else if (__tmp > 65535)
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <LCD_SendCommand+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ba:	78 a5       	ldd	r23, Y+40	; 0x28
    20bc:	89 a5       	ldd	r24, Y+41	; 0x29
    20be:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_SendCommand+0x1be>
    20e2:	84 e1       	ldi	r24, 0x14	; 20
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	98 a3       	std	Y+32, r25	; 0x20
    20e8:	8f 8f       	std	Y+31, r24	; 0x1f
    20ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ec:	98 a1       	ldd	r25, Y+32	; 0x20
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_SendCommand+0x1ac>
    20f2:	98 a3       	std	Y+32, r25	; 0x20
    20f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	89 a1       	ldd	r24, Y+33	; 0x21
    20f8:	9a a1       	ldd	r25, Y+34	; 0x22
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	89 a1       	ldd	r24, Y+33	; 0x21
    2102:	9a a1       	ldd	r25, Y+34	; 0x22
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <LCD_SendCommand+0x1a0>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <LCD_SendCommand+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6b a1       	ldd	r22, Y+35	; 0x23
    210c:	7c a1       	ldd	r23, Y+36	; 0x24
    210e:	8d a1       	ldd	r24, Y+37	; 0x25
    2110:	9e a1       	ldd	r25, Y+38	; 0x26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9a a3       	std	Y+34, r25	; 0x22
    211c:	89 a3       	std	Y+33, r24	; 0x21
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	9e 8f       	std	Y+30, r25	; 0x1e
    2124:	8d 8f       	std	Y+29, r24	; 0x1d
    2126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_SendCommand+0x1e8>
    212e:	9e 8f       	std	Y+30, r25	; 0x1e
    2130:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
	DIO_WritePort(DataPort, a_Command);
    2132:	99 ad       	ldd	r25, Y+57	; 0x39
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	69 2f       	mov	r22, r25
    2138:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <DIO_WritePort>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e8       	ldi	r26, 0x80	; 128
    2142:	bf e3       	ldi	r27, 0x3F	; 63
    2144:	89 8f       	std	Y+25, r24	; 0x19
    2146:	9a 8f       	std	Y+26, r25	; 0x1a
    2148:	ab 8f       	std	Y+27, r26	; 0x1b
    214a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	69 8d       	ldd	r22, Y+25	; 0x19
    214e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2154:	2d ec       	ldi	r18, 0xCD	; 205
    2156:	3c ec       	ldi	r19, 0xCC	; 204
    2158:	4c e2       	ldi	r20, 0x2C	; 44
    215a:	55 e4       	ldi	r21, 0x45	; 69
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8d 8b       	std	Y+21, r24	; 0x15
    2166:	9e 8b       	std	Y+22, r25	; 0x16
    2168:	af 8b       	std	Y+23, r26	; 0x17
    216a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    216c:	6d 89       	ldd	r22, Y+21	; 0x15
    216e:	7e 89       	ldd	r23, Y+22	; 0x16
    2170:	8f 89       	ldd	r24, Y+23	; 0x17
    2172:	98 8d       	ldd	r25, Y+24	; 0x18
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_SendCommand+0x24c>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
    218c:	3f c0       	rjmp	.+126    	; 0x220c <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    218e:	6d 89       	ldd	r22, Y+21	; 0x15
    2190:	7e 89       	ldd	r23, Y+22	; 0x16
    2192:	8f 89       	ldd	r24, Y+23	; 0x17
    2194:	98 8d       	ldd	r25, Y+24	; 0x18
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	69 8d       	ldd	r22, Y+25	; 0x19
    21a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9c 8b       	std	Y+20, r25	; 0x14
    21cc:	8b 8b       	std	Y+19, r24	; 0x13
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_SendCommand+0x2ac>
    21d0:	84 e1       	ldi	r24, 0x14	; 20
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	9a 8b       	std	Y+18, r25	; 0x12
    21d6:	89 8b       	std	Y+17, r24	; 0x11
    21d8:	89 89       	ldd	r24, Y+17	; 0x11
    21da:	9a 89       	ldd	r25, Y+18	; 0x12
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_SendCommand+0x29a>
    21e0:	9a 8b       	std	Y+18, r25	; 0x12
    21e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9c 8b       	std	Y+20, r25	; 0x14
    21ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8b 89       	ldd	r24, Y+19	; 0x13
    21f0:	9c 89       	ldd	r25, Y+20	; 0x14
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <LCD_SendCommand+0x28e>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9c 8b       	std	Y+20, r25	; 0x14
    220a:	8b 8b       	std	Y+19, r24	; 0x13
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	98 8b       	std	Y+16, r25	; 0x10
    2212:	8f 87       	std	Y+15, r24	; 0x0f
    2214:	8f 85       	ldd	r24, Y+15	; 0x0f
    2216:	98 89       	ldd	r25, Y+16	; 0x10
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_SendCommand+0x2d6>
    221c:	98 8b       	std	Y+16, r25	; 0x10
    221e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_ClearChannel(Enable);
    2220:	82 e0       	ldi	r24, 0x02	; 2
    2222:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ClearChannel>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a0 e8       	ldi	r26, 0x80	; 128
    222c:	bf e3       	ldi	r27, 0x3F	; 63
    222e:	8b 87       	std	Y+11, r24	; 0x0b
    2230:	9c 87       	std	Y+12, r25	; 0x0c
    2232:	ad 87       	std	Y+13, r26	; 0x0d
    2234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	2d ec       	ldi	r18, 0xCD	; 205
    2240:	3c ec       	ldi	r19, 0xCC	; 204
    2242:	4c e2       	ldi	r20, 0x2C	; 44
    2244:	55 e4       	ldi	r21, 0x45	; 69
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8f 83       	std	Y+7, r24	; 0x07
    2250:	98 87       	std	Y+8, r25	; 0x08
    2252:	a9 87       	std	Y+9, r26	; 0x09
    2254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <LCD_SendCommand+0x336>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <LCD_SendCommand+0x3b4>
	else if (__tmp > 65535)
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <LCD_SendCommand+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_SendCommand+0x396>
    22ba:	84 e1       	ldi	r24, 0x14	; 20
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_SendCommand+0x384>
    22ca:	9c 83       	std	Y+4, r25	; 0x04
    22cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_SendCommand+0x378>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <LCD_SendCommand+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	6f 81       	ldd	r22, Y+7	; 0x07
    22e4:	78 85       	ldd	r23, Y+8	; 0x08
    22e6:	89 85       	ldd	r24, Y+9	; 0x09
    22e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_SendCommand+0x3c0>
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    230a:	e9 96       	adiw	r28, 0x39	; 57
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <LCD_SendCharacter>:

void LCD_SendCharacter(volatile const uint8 a_Character){
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	e9 97       	sbiw	r28, 0x39	; 57
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	89 af       	std	Y+57, r24	; 0x39
	DIO_WriteChannel(RS); //RS = 1 ===> data mode.
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_WriteChannel>
	DIO_ClearChannel(RW); //RW = 0 ===> Write Data.
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ClearChannel>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e8       	ldi	r26, 0x80	; 128
    2344:	bf e3       	ldi	r27, 0x3F	; 63
    2346:	8d ab       	std	Y+53, r24	; 0x35
    2348:	9e ab       	std	Y+54, r25	; 0x36
    234a:	af ab       	std	Y+55, r26	; 0x37
    234c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6d a9       	ldd	r22, Y+53	; 0x35
    2350:	7e a9       	ldd	r23, Y+54	; 0x36
    2352:	8f a9       	ldd	r24, Y+55	; 0x37
    2354:	98 ad       	ldd	r25, Y+56	; 0x38
    2356:	2d ec       	ldi	r18, 0xCD	; 205
    2358:	3c ec       	ldi	r19, 0xCC	; 204
    235a:	4c e2       	ldi	r20, 0x2C	; 44
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	89 ab       	std	Y+49, r24	; 0x31
    2368:	9a ab       	std	Y+50, r25	; 0x32
    236a:	ab ab       	std	Y+51, r26	; 0x33
    236c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    236e:	69 a9       	ldd	r22, Y+49	; 0x31
    2370:	7a a9       	ldd	r23, Y+50	; 0x32
    2372:	8b a9       	ldd	r24, Y+51	; 0x33
    2374:	9c a9       	ldd	r25, Y+52	; 0x34
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_SendCharacter+0x74>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
    238e:	3f c0       	rjmp	.+126    	; 0x240e <LCD_SendCharacter+0xf2>
	else if (__tmp > 65535)
    2390:	69 a9       	ldd	r22, Y+49	; 0x31
    2392:	7a a9       	ldd	r23, Y+50	; 0x32
    2394:	8b a9       	ldd	r24, Y+51	; 0x33
    2396:	9c a9       	ldd	r25, Y+52	; 0x34
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <LCD_SendCharacter+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6d a9       	ldd	r22, Y+53	; 0x35
    23aa:	7e a9       	ldd	r23, Y+54	; 0x36
    23ac:	8f a9       	ldd	r24, Y+55	; 0x37
    23ae:	98 ad       	ldd	r25, Y+56	; 0x38
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	98 ab       	std	Y+48, r25	; 0x30
    23ce:	8f a7       	std	Y+47, r24	; 0x2f
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <LCD_SendCharacter+0xd4>
    23d2:	84 e1       	ldi	r24, 0x14	; 20
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	9e a7       	std	Y+46, r25	; 0x2e
    23d8:	8d a7       	std	Y+45, r24	; 0x2d
    23da:	8d a5       	ldd	r24, Y+45	; 0x2d
    23dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_SendCharacter+0xc2>
    23e2:	9e a7       	std	Y+46, r25	; 0x2e
    23e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	98 ab       	std	Y+48, r25	; 0x30
    23ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f2:	98 a9       	ldd	r25, Y+48	; 0x30
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <LCD_SendCharacter+0xb6>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <LCD_SendCharacter+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	69 a9       	ldd	r22, Y+49	; 0x31
    23fc:	7a a9       	ldd	r23, Y+50	; 0x32
    23fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2400:	9c a9       	ldd	r25, Y+52	; 0x34
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	98 ab       	std	Y+48, r25	; 0x30
    240c:	8f a7       	std	Y+47, r24	; 0x2f
    240e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2410:	98 a9       	ldd	r25, Y+48	; 0x30
    2412:	9c a7       	std	Y+44, r25	; 0x2c
    2414:	8b a7       	std	Y+43, r24	; 0x2b
    2416:	8b a5       	ldd	r24, Y+43	; 0x2b
    2418:	9c a5       	ldd	r25, Y+44	; 0x2c
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_SendCharacter+0xfe>
    241e:	9c a7       	std	Y+44, r25	; 0x2c
    2420:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_WriteChannel(Enable);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_WriteChannel>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a0 e8       	ldi	r26, 0x80	; 128
    242e:	bf e3       	ldi	r27, 0x3F	; 63
    2430:	8f a3       	std	Y+39, r24	; 0x27
    2432:	98 a7       	std	Y+40, r25	; 0x28
    2434:	a9 a7       	std	Y+41, r26	; 0x29
    2436:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2438:	6f a1       	ldd	r22, Y+39	; 0x27
    243a:	78 a5       	ldd	r23, Y+40	; 0x28
    243c:	89 a5       	ldd	r24, Y+41	; 0x29
    243e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2440:	2d ec       	ldi	r18, 0xCD	; 205
    2442:	3c ec       	ldi	r19, 0xCC	; 204
    2444:	4c e2       	ldi	r20, 0x2C	; 44
    2446:	55 e4       	ldi	r21, 0x45	; 69
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	8b a3       	std	Y+35, r24	; 0x23
    2452:	9c a3       	std	Y+36, r25	; 0x24
    2454:	ad a3       	std	Y+37, r26	; 0x25
    2456:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2458:	6b a1       	ldd	r22, Y+35	; 0x23
    245a:	7c a1       	ldd	r23, Y+36	; 0x24
    245c:	8d a1       	ldd	r24, Y+37	; 0x25
    245e:	9e a1       	ldd	r25, Y+38	; 0x26
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	2c f4       	brge	.+10     	; 0x247a <LCD_SendCharacter+0x15e>
		__ticks = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9a a3       	std	Y+34, r25	; 0x22
    2476:	89 a3       	std	Y+33, r24	; 0x21
    2478:	3f c0       	rjmp	.+126    	; 0x24f8 <LCD_SendCharacter+0x1dc>
	else if (__tmp > 65535)
    247a:	6b a1       	ldd	r22, Y+35	; 0x23
    247c:	7c a1       	ldd	r23, Y+36	; 0x24
    247e:	8d a1       	ldd	r24, Y+37	; 0x25
    2480:	9e a1       	ldd	r25, Y+38	; 0x26
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	3f ef       	ldi	r19, 0xFF	; 255
    2486:	4f e7       	ldi	r20, 0x7F	; 127
    2488:	57 e4       	ldi	r21, 0x47	; 71
    248a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248e:	18 16       	cp	r1, r24
    2490:	4c f5       	brge	.+82     	; 0x24e4 <LCD_SendCharacter+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2492:	6f a1       	ldd	r22, Y+39	; 0x27
    2494:	78 a5       	ldd	r23, Y+40	; 0x28
    2496:	89 a5       	ldd	r24, Y+41	; 0x29
    2498:	9a a5       	ldd	r25, Y+42	; 0x2a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e2       	ldi	r20, 0x20	; 32
    24a0:	51 e4       	ldi	r21, 0x41	; 65
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <LCD_SendCharacter+0x1be>
    24bc:	84 e1       	ldi	r24, 0x14	; 20
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	98 a3       	std	Y+32, r25	; 0x20
    24c2:	8f 8f       	std	Y+31, r24	; 0x1f
    24c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c6:	98 a1       	ldd	r25, Y+32	; 0x20
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_SendCharacter+0x1ac>
    24cc:	98 a3       	std	Y+32, r25	; 0x20
    24ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d0:	89 a1       	ldd	r24, Y+33	; 0x21
    24d2:	9a a1       	ldd	r25, Y+34	; 0x22
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	9a a3       	std	Y+34, r25	; 0x22
    24d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24da:	89 a1       	ldd	r24, Y+33	; 0x21
    24dc:	9a a1       	ldd	r25, Y+34	; 0x22
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	69 f7       	brne	.-38     	; 0x24bc <LCD_SendCharacter+0x1a0>
    24e2:	14 c0       	rjmp	.+40     	; 0x250c <LCD_SendCharacter+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	6b a1       	ldd	r22, Y+35	; 0x23
    24e6:	7c a1       	ldd	r23, Y+36	; 0x24
    24e8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ea:	9e a1       	ldd	r25, Y+38	; 0x26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9a a3       	std	Y+34, r25	; 0x22
    24f6:	89 a3       	std	Y+33, r24	; 0x21
    24f8:	89 a1       	ldd	r24, Y+33	; 0x21
    24fa:	9a a1       	ldd	r25, Y+34	; 0x22
    24fc:	9e 8f       	std	Y+30, r25	; 0x1e
    24fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2500:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2502:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_SendCharacter+0x1e8>
    2508:	9e 8f       	std	Y+30, r25	; 0x1e
    250a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
	DIO_WritePort(DataPort, a_Character);
    250c:	99 ad       	ldd	r25, Y+57	; 0x39
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	69 2f       	mov	r22, r25
    2512:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <DIO_WritePort>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	89 8f       	std	Y+25, r24	; 0x19
    2520:	9a 8f       	std	Y+26, r25	; 0x1a
    2522:	ab 8f       	std	Y+27, r26	; 0x1b
    2524:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	69 8d       	ldd	r22, Y+25	; 0x19
    2528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    252e:	2d ec       	ldi	r18, 0xCD	; 205
    2530:	3c ec       	ldi	r19, 0xCC	; 204
    2532:	4c e2       	ldi	r20, 0x2C	; 44
    2534:	55 e4       	ldi	r21, 0x45	; 69
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8d 8b       	std	Y+21, r24	; 0x15
    2540:	9e 8b       	std	Y+22, r25	; 0x16
    2542:	af 8b       	std	Y+23, r26	; 0x17
    2544:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2546:	6d 89       	ldd	r22, Y+21	; 0x15
    2548:	7e 89       	ldd	r23, Y+22	; 0x16
    254a:	8f 89       	ldd	r24, Y+23	; 0x17
    254c:	98 8d       	ldd	r25, Y+24	; 0x18
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_SendCharacter+0x24c>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 8b       	std	Y+20, r25	; 0x14
    2564:	8b 8b       	std	Y+19, r24	; 0x13
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_SendCharacter+0x2ca>
	else if (__tmp > 65535)
    2568:	6d 89       	ldd	r22, Y+21	; 0x15
    256a:	7e 89       	ldd	r23, Y+22	; 0x16
    256c:	8f 89       	ldd	r24, Y+23	; 0x17
    256e:	98 8d       	ldd	r25, Y+24	; 0x18
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_SendCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	69 8d       	ldd	r22, Y+25	; 0x19
    2582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_SendCharacter+0x2ac>
    25aa:	84 e1       	ldi	r24, 0x14	; 20
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	9a 8b       	std	Y+18, r25	; 0x12
    25b0:	89 8b       	std	Y+17, r24	; 0x11
    25b2:	89 89       	ldd	r24, Y+17	; 0x11
    25b4:	9a 89       	ldd	r25, Y+18	; 0x12
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_SendCharacter+0x29a>
    25ba:	9a 8b       	std	Y+18, r25	; 0x12
    25bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8b 89       	ldd	r24, Y+19	; 0x13
    25c0:	9c 89       	ldd	r25, Y+20	; 0x14
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_SendCharacter+0x28e>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_SendCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	6d 89       	ldd	r22, Y+21	; 0x15
    25d4:	7e 89       	ldd	r23, Y+22	; 0x16
    25d6:	8f 89       	ldd	r24, Y+23	; 0x17
    25d8:	98 8d       	ldd	r25, Y+24	; 0x18
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9c 8b       	std	Y+20, r25	; 0x14
    25e4:	8b 8b       	std	Y+19, r24	; 0x13
    25e6:	8b 89       	ldd	r24, Y+19	; 0x13
    25e8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ea:	98 8b       	std	Y+16, r25	; 0x10
    25ec:	8f 87       	std	Y+15, r24	; 0x0f
    25ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f0:	98 89       	ldd	r25, Y+16	; 0x10
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_SendCharacter+0x2d6>
    25f6:	98 8b       	std	Y+16, r25	; 0x10
    25f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_ClearChannel(Enable);
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ClearChannel>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	8b 87       	std	Y+11, r24	; 0x0b
    260a:	9c 87       	std	Y+12, r25	; 0x0c
    260c:	ad 87       	std	Y+13, r26	; 0x0d
    260e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	6b 85       	ldd	r22, Y+11	; 0x0b
    2612:	7c 85       	ldd	r23, Y+12	; 0x0c
    2614:	8d 85       	ldd	r24, Y+13	; 0x0d
    2616:	9e 85       	ldd	r25, Y+14	; 0x0e
    2618:	2d ec       	ldi	r18, 0xCD	; 205
    261a:	3c ec       	ldi	r19, 0xCC	; 204
    261c:	4c e2       	ldi	r20, 0x2C	; 44
    261e:	55 e4       	ldi	r21, 0x45	; 69
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8f 83       	std	Y+7, r24	; 0x07
    262a:	98 87       	std	Y+8, r25	; 0x08
    262c:	a9 87       	std	Y+9, r26	; 0x09
    262e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_SendCharacter+0x336>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_SendCharacter+0x3b4>
	else if (__tmp > 65535)
    2652:	6f 81       	ldd	r22, Y+7	; 0x07
    2654:	78 85       	ldd	r23, Y+8	; 0x08
    2656:	89 85       	ldd	r24, Y+9	; 0x09
    2658:	9a 85       	ldd	r25, Y+10	; 0x0a
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_SendCharacter+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	6b 85       	ldd	r22, Y+11	; 0x0b
    266c:	7c 85       	ldd	r23, Y+12	; 0x0c
    266e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2670:	9e 85       	ldd	r25, Y+14	; 0x0e
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9e 83       	std	Y+6, r25	; 0x06
    2690:	8d 83       	std	Y+5, r24	; 0x05
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_SendCharacter+0x396>
    2694:	84 e1       	ldi	r24, 0x14	; 20
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	9c 83       	std	Y+4, r25	; 0x04
    269a:	8b 83       	std	Y+3, r24	; 0x03
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_SendCharacter+0x384>
    26a4:	9c 83       	std	Y+4, r25	; 0x04
    26a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_SendCharacter+0x378>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_SendCharacter+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_SendCharacter+0x3c0>
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    26e4:	e9 96       	adiw	r28, 0x39	; 57
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <LCD_SendString>:

void LCD_SendString(const uint8 *String){
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <LCD_SendString+0x6>
    26fc:	0f 92       	push	r0
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    2706:	19 82       	std	Y+1, r1	; 0x01
    2708:	0e c0       	rjmp	.+28     	; 0x2726 <LCD_SendString+0x30>
	while(String[count] != '\0'){
		LCD_SendCharacter(String[count]);
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	9b 81       	ldd	r25, Y+3	; 0x03
    2714:	fc 01       	movw	r30, r24
    2716:	e2 0f       	add	r30, r18
    2718:	f3 1f       	adc	r31, r19
    271a:	80 81       	ld	r24, Z
    271c:	0e 94 8e 11 	call	0x231c	; 0x231c <LCD_SendCharacter>
		count++;
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	8f 5f       	subi	r24, 0xFF	; 255
    2724:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}

void LCD_SendString(const uint8 *String){
	uint8 count = 0;
	while(String[count] != '\0'){
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 81       	ld	r24, Z
    2738:	88 23       	and	r24, r24
    273a:	39 f7       	brne	.-50     	; 0x270a <LCD_SendString+0x14>
		LCD_SendCharacter(String[count]);
		count++;
	}
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <LCD_SetCursor>:

void LCD_SetCursor(uint8 a_Row, uint8 a_Column){
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	00 d0       	rcall	.+0      	; 0x274e <LCD_SetCursor+0x6>
    274e:	00 d0       	rcall	.+0      	; 0x2750 <LCD_SetCursor+0x8>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	8a 83       	std	Y+2, r24	; 0x02
    2758:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_Command;
	switch(a_Row){
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	3d 83       	std	Y+5, r19	; 0x05
    2762:	2c 83       	std	Y+4, r18	; 0x04
    2764:	8c 81       	ldd	r24, Y+4	; 0x04
    2766:	9d 81       	ldd	r25, Y+5	; 0x05
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	91 05       	cpc	r25, r1
    276c:	c9 f0       	breq	.+50     	; 0x27a0 <LCD_SetCursor+0x58>
    276e:	2c 81       	ldd	r18, Y+4	; 0x04
    2770:	3d 81       	ldd	r19, Y+5	; 0x05
    2772:	22 30       	cpi	r18, 0x02	; 2
    2774:	31 05       	cpc	r19, r1
    2776:	2c f4       	brge	.+10     	; 0x2782 <LCD_SetCursor+0x3a>
    2778:	8c 81       	ldd	r24, Y+4	; 0x04
    277a:	9d 81       	ldd	r25, Y+5	; 0x05
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	61 f0       	breq	.+24     	; 0x2798 <LCD_SetCursor+0x50>
    2780:	1a c0       	rjmp	.+52     	; 0x27b6 <LCD_SetCursor+0x6e>
    2782:	2c 81       	ldd	r18, Y+4	; 0x04
    2784:	3d 81       	ldd	r19, Y+5	; 0x05
    2786:	22 30       	cpi	r18, 0x02	; 2
    2788:	31 05       	cpc	r19, r1
    278a:	71 f0       	breq	.+28     	; 0x27a8 <LCD_SetCursor+0x60>
    278c:	8c 81       	ldd	r24, Y+4	; 0x04
    278e:	9d 81       	ldd	r25, Y+5	; 0x05
    2790:	83 30       	cpi	r24, 0x03	; 3
    2792:	91 05       	cpc	r25, r1
    2794:	69 f0       	breq	.+26     	; 0x27b0 <LCD_SetCursor+0x68>
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <LCD_SetCursor+0x6e>
	case(0):
		a_Command = 0x80 + a_Column;
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	80 58       	subi	r24, 0x80	; 128
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	0b c0       	rjmp	.+22     	; 0x27b6 <LCD_SetCursor+0x6e>
	break;
	case(1):
		a_Command = 0x80 + 0x40 + a_Column;
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	80 54       	subi	r24, 0x40	; 64
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	07 c0       	rjmp	.+14     	; 0x27b6 <LCD_SetCursor+0x6e>
	break;
	case(2):
		a_Command = 0x80 + 0x10 + a_Column;
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	80 57       	subi	r24, 0x70	; 112
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <LCD_SetCursor+0x6e>
	break;
	case(3):
		a_Command = 0x80 + 0x50 + a_Column;
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	80 53       	subi	r24, 0x30	; 48
    27b4:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	LCD_SendCommand(a_Command);
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_SendCommand>
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <LCD_DisplayInteger>:

void LCD_DisplayInteger(sint32 a_Int){
    27cc:	0f 93       	push	r16
    27ce:	1f 93       	push	r17
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	62 97       	sbiw	r28, 0x12	; 18
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	6f 87       	std	Y+15, r22	; 0x0f
    27e6:	78 8b       	std	Y+16, r23	; 0x10
    27e8:	89 8b       	std	Y+17, r24	; 0x11
    27ea:	9a 8b       	std	Y+18, r25	; 0x12
	uint8 Integer[10];
	uint8 count = 0;
    27ec:	1c 82       	std	Y+4, r1	; 0x04
	uint8 count_ = 0;
    27ee:	1b 82       	std	Y+3, r1	; 0x03
	uint8 temp = 0;
    27f0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 flag = 0;
    27f2:	19 82       	std	Y+1, r1	; 0x01
	if(a_Int < 0){
    27f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f6:	98 89       	ldd	r25, Y+16	; 0x10
    27f8:	a9 89       	ldd	r26, Y+17	; 0x11
    27fa:	ba 89       	ldd	r27, Y+18	; 0x12
    27fc:	bb 23       	and	r27, r27
    27fe:	0c f5       	brge	.+66     	; 0x2842 <LCD_DisplayInteger+0x76>
		Integer[count] = '-';
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	ce 01       	movw	r24, r28
    2808:	05 96       	adiw	r24, 0x05	; 5
    280a:	fc 01       	movw	r30, r24
    280c:	e2 0f       	add	r30, r18
    280e:	f3 1f       	adc	r31, r19
    2810:	8d e2       	ldi	r24, 0x2D	; 45
    2812:	80 83       	st	Z, r24
		a_Int = a_Int*-1;
    2814:	8f 85       	ldd	r24, Y+15	; 0x0f
    2816:	98 89       	ldd	r25, Y+16	; 0x10
    2818:	a9 89       	ldd	r26, Y+17	; 0x11
    281a:	ba 89       	ldd	r27, Y+18	; 0x12
    281c:	b0 95       	com	r27
    281e:	a0 95       	com	r26
    2820:	90 95       	com	r25
    2822:	81 95       	neg	r24
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	af 4f       	sbci	r26, 0xFF	; 255
    2828:	bf 4f       	sbci	r27, 0xFF	; 255
    282a:	8f 87       	std	Y+15, r24	; 0x0f
    282c:	98 8b       	std	Y+16, r25	; 0x10
    282e:	a9 8b       	std	Y+17, r26	; 0x11
    2830:	ba 8b       	std	Y+18, r27	; 0x12
		count ++;
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	8c 83       	std	Y+4, r24	; 0x04
		count_ ++;
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	8b 83       	std	Y+3, r24	; 0x03
		flag = 1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	89 83       	std	Y+1, r24	; 0x01
	}
	if(a_Int == 0){
    2842:	8f 85       	ldd	r24, Y+15	; 0x0f
    2844:	98 89       	ldd	r25, Y+16	; 0x10
    2846:	a9 89       	ldd	r26, Y+17	; 0x11
    2848:	ba 89       	ldd	r27, Y+18	; 0x12
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	a1 05       	cpc	r26, r1
    284e:	b1 05       	cpc	r27, r1
    2850:	09 f0       	breq	.+2      	; 0x2854 <LCD_DisplayInteger+0x88>
    2852:	44 c0       	rjmp	.+136    	; 0x28dc <LCD_DisplayInteger+0x110>
		Integer[count] = 48;
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	ce 01       	movw	r24, r28
    285c:	05 96       	adiw	r24, 0x05	; 5
    285e:	fc 01       	movw	r30, r24
    2860:	e2 0f       	add	r30, r18
    2862:	f3 1f       	adc	r31, r19
    2864:	80 e3       	ldi	r24, 0x30	; 48
    2866:	80 83       	st	Z, r24
		Integer[count + 1] = '\0';
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9c 01       	movw	r18, r24
    2870:	2f 5f       	subi	r18, 0xFF	; 255
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	ce 01       	movw	r24, r28
    2876:	05 96       	adiw	r24, 0x05	; 5
    2878:	fc 01       	movw	r30, r24
    287a:	e2 0f       	add	r30, r18
    287c:	f3 1f       	adc	r31, r19
    287e:	10 82       	st	Z, r1
    2880:	9c c0       	rjmp	.+312    	; 0x29ba <LCD_DisplayInteger+0x1ee>
	}
	else{
		while(a_Int != 0){
			Integer[count] = a_Int % 10;
    2882:	8c 81       	ldd	r24, Y+4	; 0x04
    2884:	08 2f       	mov	r16, r24
    2886:	10 e0       	ldi	r17, 0x00	; 0
    2888:	8f 85       	ldd	r24, Y+15	; 0x0f
    288a:	98 89       	ldd	r25, Y+16	; 0x10
    288c:	a9 89       	ldd	r26, Y+17	; 0x11
    288e:	ba 89       	ldd	r27, Y+18	; 0x12
    2890:	2a e0       	ldi	r18, 0x0A	; 10
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__divmodsi4>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	28 2f       	mov	r18, r24
    28a6:	ce 01       	movw	r24, r28
    28a8:	05 96       	adiw	r24, 0x05	; 5
    28aa:	fc 01       	movw	r30, r24
    28ac:	e0 0f       	add	r30, r16
    28ae:	f1 1f       	adc	r31, r17
    28b0:	20 83       	st	Z, r18
			a_Int = a_Int / 10;
    28b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b4:	98 89       	ldd	r25, Y+16	; 0x10
    28b6:	a9 89       	ldd	r26, Y+17	; 0x11
    28b8:	ba 89       	ldd	r27, Y+18	; 0x12
    28ba:	2a e0       	ldi	r18, 0x0A	; 10
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__divmodsi4>
    28ca:	da 01       	movw	r26, r20
    28cc:	c9 01       	movw	r24, r18
    28ce:	8f 87       	std	Y+15, r24	; 0x0f
    28d0:	98 8b       	std	Y+16, r25	; 0x10
    28d2:	a9 8b       	std	Y+17, r26	; 0x11
    28d4:	ba 8b       	std	Y+18, r27	; 0x12
			count ++;
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	8f 5f       	subi	r24, 0xFF	; 255
    28da:	8c 83       	std	Y+4, r24	; 0x04
	if(a_Int == 0){
		Integer[count] = 48;
		Integer[count + 1] = '\0';
	}
	else{
		while(a_Int != 0){
    28dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28de:	98 89       	ldd	r25, Y+16	; 0x10
    28e0:	a9 89       	ldd	r26, Y+17	; 0x11
    28e2:	ba 89       	ldd	r27, Y+18	; 0x12
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	a1 05       	cpc	r26, r1
    28e8:	b1 05       	cpc	r27, r1
    28ea:	59 f6       	brne	.-106    	; 0x2882 <LCD_DisplayInteger+0xb6>
    28ec:	36 c0       	rjmp	.+108    	; 0x295a <LCD_DisplayInteger+0x18e>
			Integer[count] = a_Int % 10;
			a_Int = a_Int / 10;
			count ++;
		}
		while((count-1) >= count_){
			temp = Integer[count_];
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	ce 01       	movw	r24, r28
    28f6:	05 96       	adiw	r24, 0x05	; 5
    28f8:	fc 01       	movw	r30, r24
    28fa:	e2 0f       	add	r30, r18
    28fc:	f3 1f       	adc	r31, r19
    28fe:	80 81       	ld	r24, Z
    2900:	8a 83       	std	Y+2, r24	; 0x02
			Integer[count_] = Integer[count - 1] + '0';
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	48 2f       	mov	r20, r24
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	8c 81       	ldd	r24, Y+4	; 0x04
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 01       	movw	r18, r24
    2910:	21 50       	subi	r18, 0x01	; 1
    2912:	30 40       	sbci	r19, 0x00	; 0
    2914:	ce 01       	movw	r24, r28
    2916:	05 96       	adiw	r24, 0x05	; 5
    2918:	fc 01       	movw	r30, r24
    291a:	e2 0f       	add	r30, r18
    291c:	f3 1f       	adc	r31, r19
    291e:	80 81       	ld	r24, Z
    2920:	28 2f       	mov	r18, r24
    2922:	20 5d       	subi	r18, 0xD0	; 208
    2924:	ce 01       	movw	r24, r28
    2926:	05 96       	adiw	r24, 0x05	; 5
    2928:	fc 01       	movw	r30, r24
    292a:	e4 0f       	add	r30, r20
    292c:	f5 1f       	adc	r31, r21
    292e:	20 83       	st	Z, r18
			Integer[count - 1] = temp + '0';
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9c 01       	movw	r18, r24
    2938:	21 50       	subi	r18, 0x01	; 1
    293a:	30 40       	sbci	r19, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	48 2f       	mov	r20, r24
    2940:	40 5d       	subi	r20, 0xD0	; 208
    2942:	ce 01       	movw	r24, r28
    2944:	05 96       	adiw	r24, 0x05	; 5
    2946:	fc 01       	movw	r30, r24
    2948:	e2 0f       	add	r30, r18
    294a:	f3 1f       	adc	r31, r19
    294c:	40 83       	st	Z, r20
			count--;
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	81 50       	subi	r24, 0x01	; 1
    2952:	8c 83       	std	Y+4, r24	; 0x04
			count_++;
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	8f 5f       	subi	r24, 0xFF	; 255
    2958:	8b 83       	std	Y+3, r24	; 0x03
		while(a_Int != 0){
			Integer[count] = a_Int % 10;
			a_Int = a_Int / 10;
			count ++;
		}
		while((count-1) >= count_){
    295a:	8c 81       	ldd	r24, Y+4	; 0x04
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9c 01       	movw	r18, r24
    2962:	21 50       	subi	r18, 0x01	; 1
    2964:	30 40       	sbci	r19, 0x00	; 0
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	28 17       	cp	r18, r24
    296e:	39 07       	cpc	r19, r25
    2970:	0c f0       	brlt	.+2      	; 0x2974 <LCD_DisplayInteger+0x1a8>
    2972:	bd cf       	rjmp	.-134    	; 0x28ee <LCD_DisplayInteger+0x122>
			Integer[count_] = Integer[count - 1] + '0';
			Integer[count - 1] = temp + '0';
			count--;
			count_++;
		}
		if(flag == 0)
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	88 23       	and	r24, r24
    2978:	79 f4       	brne	.+30     	; 0x2998 <LCD_DisplayInteger+0x1cc>
			Integer[count + count_] = '\0';
    297a:	8c 81       	ldd	r24, Y+4	; 0x04
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	28 0f       	add	r18, r24
    2988:	39 1f       	adc	r19, r25
    298a:	ce 01       	movw	r24, r28
    298c:	05 96       	adiw	r24, 0x05	; 5
    298e:	fc 01       	movw	r30, r24
    2990:	e2 0f       	add	r30, r18
    2992:	f3 1f       	adc	r31, r19
    2994:	10 82       	st	Z, r1
    2996:	11 c0       	rjmp	.+34     	; 0x29ba <LCD_DisplayInteger+0x1ee>
		else
			Integer[count + count_ - 1] = '\0';
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	82 0f       	add	r24, r18
    29a6:	93 1f       	adc	r25, r19
    29a8:	9c 01       	movw	r18, r24
    29aa:	21 50       	subi	r18, 0x01	; 1
    29ac:	30 40       	sbci	r19, 0x00	; 0
    29ae:	ce 01       	movw	r24, r28
    29b0:	05 96       	adiw	r24, 0x05	; 5
    29b2:	fc 01       	movw	r30, r24
    29b4:	e2 0f       	add	r30, r18
    29b6:	f3 1f       	adc	r31, r19
    29b8:	10 82       	st	Z, r1
	}
	LCD_SendString(Integer);
    29ba:	ce 01       	movw	r24, r28
    29bc:	05 96       	adiw	r24, 0x05	; 5
    29be:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <LCD_SendString>
}
    29c2:	62 96       	adiw	r28, 0x12	; 18
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <LCD_ClearScreen>:

void LCD_ClearScreen(void){
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(Clear_LCD);
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_SendCommand>
	LCD_SetCursor(0, 0);
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_SetCursor>
}
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <Server_MC_Init>:
#include "common_macros.h"
#include "MCAL.h"
#include "Abstraction.h"

void Server_MC_Init(void)
{
    29f4:	0f 93       	push	r16
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    IO_INIT;
    29fe:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_DefinePinsDirections>
    COM_INIT;
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	2a e0       	ldi	r18, 0x0A	; 10
    2a0a:	00 e0       	ldi	r16, 0x00	; 0
    2a0c:	0e 94 1d 22 	call	0x443a	; 0x443a <UART_Init>
    2a10:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <TWI_init>
}
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	0f 91       	pop	r16
    2a1a:	08 95       	ret

00002a1c <Server_Init>:
BST Server_BinarySearchTree;
uint8 Tree_Counter;


void Server_Init(void)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
	Server_MC_Init();
    2a24:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Server_MC_Init>
	GetServerTree(&Server_BinarySearchTree);
    2a28:	8a e6       	ldi	r24, 0x6A	; 106
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <GetServerTree>
}
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <GetServerTree>:

static void GetServerTree(BST* tree)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	c1 54       	subi	r28, 0x41	; 65
    2a40:	d0 40       	sbci	r29, 0x00	; 0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e0 5c       	subi	r30, 0xC0	; 192
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
	uint8* NodePTR = (uint8*)&(tree -> Tree);
    2a56:	fe 01       	movw	r30, r28
    2a58:	e0 5c       	subi	r30, 0xC0	; 192
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	9e af       	std	Y+62, r25	; 0x3e
    2a62:	8d af       	std	Y+61, r24	; 0x3d
	uint8 RootIndex;
	uint16 StartAddress = TreeStartAddr;
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9c af       	std	Y+60, r25	; 0x3c
    2a6a:	8b af       	std	Y+59, r24	; 0x3b

	SetDemultiplexerBST();
    2a6c:	83 e0       	ldi	r24, 0x03	; 3
    2a6e:	67 e0       	ldi	r22, 0x07	; 7
    2a70:	40 ee       	ldi	r20, 0xE0	; 224
    2a72:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_WritePins>

	_ReadByteIn(TreeCounterAdd, Tree_Counter);
    2a76:	24 e0       	ldi	r18, 0x04	; 4
    2a78:	37 e0       	ldi	r19, 0x07	; 7
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	b9 01       	movw	r22, r18
    2a80:	0e 94 dd 26 	call	0x4dba	; 0x4dba <EEPROM_readByte>
    2a84:	81 30       	cpi	r24, 0x01	; 1
    2a86:	b9 f7       	brne	.-18     	; 0x2a76 <GetServerTree+0x40>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e2       	ldi	r26, 0x20	; 32
    2a8e:	b1 e4       	ldi	r27, 0x41	; 65
    2a90:	8d ab       	std	Y+53, r24	; 0x35
    2a92:	9e ab       	std	Y+54, r25	; 0x36
    2a94:	af ab       	std	Y+55, r26	; 0x37
    2a96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa0:	2d ec       	ldi	r18, 0xCD	; 205
    2aa2:	3c ec       	ldi	r19, 0xCC	; 204
    2aa4:	4c e2       	ldi	r20, 0x2C	; 44
    2aa6:	55 e4       	ldi	r21, 0x45	; 69
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	89 ab       	std	Y+49, r24	; 0x31
    2ab2:	9a ab       	std	Y+50, r25	; 0x32
    2ab4:	ab ab       	std	Y+51, r26	; 0x33
    2ab6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aba:	7a a9       	ldd	r23, Y+50	; 0x32
    2abc:	8b a9       	ldd	r24, Y+51	; 0x33
    2abe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	5f e3       	ldi	r21, 0x3F	; 63
    2ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	2c f4       	brge	.+10     	; 0x2ada <GetServerTree+0xa4>
		__ticks = 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	98 ab       	std	Y+48, r25	; 0x30
    2ad6:	8f a7       	std	Y+47, r24	; 0x2f
    2ad8:	3f c0       	rjmp	.+126    	; 0x2b58 <GetServerTree+0x122>
	else if (__tmp > 65535)
    2ada:	69 a9       	ldd	r22, Y+49	; 0x31
    2adc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ade:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	4c f5       	brge	.+82     	; 0x2b44 <GetServerTree+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	6d a9       	ldd	r22, Y+53	; 0x35
    2af4:	7e a9       	ldd	r23, Y+54	; 0x36
    2af6:	8f a9       	ldd	r24, Y+55	; 0x37
    2af8:	98 ad       	ldd	r25, Y+56	; 0x38
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	98 ab       	std	Y+48, r25	; 0x30
    2b18:	8f a7       	std	Y+47, r24	; 0x2f
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <GetServerTree+0x104>
    2b1c:	84 e1       	ldi	r24, 0x14	; 20
    2b1e:	91 e0       	ldi	r25, 0x01	; 1
    2b20:	9e a7       	std	Y+46, r25	; 0x2e
    2b22:	8d a7       	std	Y+45, r24	; 0x2d
    2b24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <GetServerTree+0xf2>
    2b2c:	9e a7       	std	Y+46, r25	; 0x2e
    2b2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b32:	98 a9       	ldd	r25, Y+48	; 0x30
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	98 ab       	std	Y+48, r25	; 0x30
    2b38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <GetServerTree+0xe6>
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <GetServerTree+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	69 a9       	ldd	r22, Y+49	; 0x31
    2b46:	7a a9       	ldd	r23, Y+50	; 0x32
    2b48:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	98 ab       	std	Y+48, r25	; 0x30
    2b56:	8f a7       	std	Y+47, r24	; 0x2f
    2b58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5c:	9c a7       	std	Y+44, r25	; 0x2c
    2b5e:	8b a7       	std	Y+43, r24	; 0x2b
    2b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <GetServerTree+0x12e>
    2b68:	9c a7       	std	Y+44, r25	; 0x2c
    2b6a:	8b a7       	std	Y+43, r24	; 0x2b
	_ReadByteIn(RootIndexAdd, RootIndex);
    2b6c:	9e 01       	movw	r18, r28
    2b6e:	21 5c       	subi	r18, 0xC1	; 193
    2b70:	3f 4f       	sbci	r19, 0xFF	; 255
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	b9 01       	movw	r22, r18
    2b78:	0e 94 dd 26 	call	0x4dba	; 0x4dba <EEPROM_readByte>
    2b7c:	81 30       	cpi	r24, 0x01	; 1
    2b7e:	b1 f7       	brne	.-20     	; 0x2b6c <GetServerTree+0x136>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e2       	ldi	r26, 0x20	; 32
    2b86:	b1 e4       	ldi	r27, 0x41	; 65
    2b88:	8f a3       	std	Y+39, r24	; 0x27
    2b8a:	98 a7       	std	Y+40, r25	; 0x28
    2b8c:	a9 a7       	std	Y+41, r26	; 0x29
    2b8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	6f a1       	ldd	r22, Y+39	; 0x27
    2b92:	78 a5       	ldd	r23, Y+40	; 0x28
    2b94:	89 a5       	ldd	r24, Y+41	; 0x29
    2b96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b98:	2d ec       	ldi	r18, 0xCD	; 205
    2b9a:	3c ec       	ldi	r19, 0xCC	; 204
    2b9c:	4c e2       	ldi	r20, 0x2C	; 44
    2b9e:	55 e4       	ldi	r21, 0x45	; 69
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8b a3       	std	Y+35, r24	; 0x23
    2baa:	9c a3       	std	Y+36, r25	; 0x24
    2bac:	ad a3       	std	Y+37, r26	; 0x25
    2bae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <GetServerTree+0x19c>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9a a3       	std	Y+34, r25	; 0x22
    2bce:	89 a3       	std	Y+33, r24	; 0x21
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <GetServerTree+0x21a>
	else if (__tmp > 65535)
    2bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <GetServerTree+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	6f a1       	ldd	r22, Y+39	; 0x27
    2bec:	78 a5       	ldd	r23, Y+40	; 0x28
    2bee:	89 a5       	ldd	r24, Y+41	; 0x29
    2bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9a a3       	std	Y+34, r25	; 0x22
    2c10:	89 a3       	std	Y+33, r24	; 0x21
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <GetServerTree+0x1fc>
    2c14:	84 e1       	ldi	r24, 0x14	; 20
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	98 a3       	std	Y+32, r25	; 0x20
    2c1a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <GetServerTree+0x1ea>
    2c24:	98 a3       	std	Y+32, r25	; 0x20
    2c26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	9a a3       	std	Y+34, r25	; 0x22
    2c30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	89 a1       	ldd	r24, Y+33	; 0x21
    2c34:	9a a1       	ldd	r25, Y+34	; 0x22
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <GetServerTree+0x1de>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <GetServerTree+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c40:	8d a1       	ldd	r24, Y+37	; 0x25
    2c42:	9e a1       	ldd	r25, Y+38	; 0x26
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9a a3       	std	Y+34, r25	; 0x22
    2c4e:	89 a3       	std	Y+33, r24	; 0x21
    2c50:	89 a1       	ldd	r24, Y+33	; 0x21
    2c52:	9a a1       	ldd	r25, Y+34	; 0x22
    2c54:	9e 8f       	std	Y+30, r25	; 0x1e
    2c56:	8d 8f       	std	Y+29, r24	; 0x1d
    2c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <GetServerTree+0x226>
    2c60:	9e 8f       	std	Y+30, r25	; 0x1e
    2c62:	8d 8f       	std	Y+29, r24	; 0x1d

	if(Tree_Counter == 0xFF)
    2c64:	80 91 04 07 	lds	r24, 0x0704
    2c68:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <GetServerTree+0x238>
    2c6c:	82 c0       	rjmp	.+260    	; 0x2d72 <GetServerTree+0x33c>
	{
		Tree_Counter = 0;
    2c6e:	10 92 04 07 	sts	0x0704, r1
		_StoreByte(TreeCounterAdd, Tree_Counter);
    2c72:	20 91 04 07 	lds	r18, 0x0704
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	62 2f       	mov	r22, r18
    2c7c:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	b9 f7       	brne	.-18     	; 0x2c72 <GetServerTree+0x23c>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e2       	ldi	r26, 0x20	; 32
    2c8a:	b1 e4       	ldi	r27, 0x41	; 65
    2c8c:	89 8f       	std	Y+25, r24	; 0x19
    2c8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c90:	ab 8f       	std	Y+27, r26	; 0x1b
    2c92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	69 8d       	ldd	r22, Y+25	; 0x19
    2c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9c:	2d ec       	ldi	r18, 0xCD	; 205
    2c9e:	3c ec       	ldi	r19, 0xCC	; 204
    2ca0:	4c e2       	ldi	r20, 0x2C	; 44
    2ca2:	55 e4       	ldi	r21, 0x45	; 69
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8d 8b       	std	Y+21, r24	; 0x15
    2cae:	9e 8b       	std	Y+22, r25	; 0x16
    2cb0:	af 8b       	std	Y+23, r26	; 0x17
    2cb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cba:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e8       	ldi	r20, 0x80	; 128
    2cc2:	5f e3       	ldi	r21, 0x3F	; 63
    2cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc8:	88 23       	and	r24, r24
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <GetServerTree+0x2a0>
		__ticks = 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9c 8b       	std	Y+20, r25	; 0x14
    2cd2:	8b 8b       	std	Y+19, r24	; 0x13
    2cd4:	3f c0       	rjmp	.+126    	; 0x2d54 <GetServerTree+0x31e>
	else if (__tmp > 65535)
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	4c f5       	brge	.+82     	; 0x2d40 <GetServerTree+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <GetServerTree+0x300>
    2d18:	84 e1       	ldi	r24, 0x14	; 20
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
    2d20:	89 89       	ldd	r24, Y+17	; 0x11
    2d22:	9a 89       	ldd	r25, Y+18	; 0x12
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <GetServerTree+0x2ee>
    2d28:	9a 8b       	std	Y+18, r25	; 0x12
    2d2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	9c 8b       	std	Y+20, r25	; 0x14
    2d34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d36:	8b 89       	ldd	r24, Y+19	; 0x13
    2d38:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	69 f7       	brne	.-38     	; 0x2d18 <GetServerTree+0x2e2>
    2d3e:	14 c0       	rjmp	.+40     	; 0x2d68 <GetServerTree+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d40:	6d 89       	ldd	r22, Y+21	; 0x15
    2d42:	7e 89       	ldd	r23, Y+22	; 0x16
    2d44:	8f 89       	ldd	r24, Y+23	; 0x17
    2d46:	98 8d       	ldd	r25, Y+24	; 0x18
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9c 8b       	std	Y+20, r25	; 0x14
    2d52:	8b 8b       	std	Y+19, r24	; 0x13
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f
    2d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5e:	98 89       	ldd	r25, Y+16	; 0x10
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <GetServerTree+0x32a>
    2d64:	98 8b       	std	Y+16, r25	; 0x10
    2d66:	8f 87       	std	Y+15, r24	; 0x0f
		BST_Init(&Server_BinarySearchTree);
    2d68:	8a e6       	ldi	r24, 0x6A	; 106
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <BST_Init>
    2d70:	bb c0       	rjmp	.+374    	; 0x2ee8 <GetServerTree+0x4b2>
		return;
	}
	else if(Tree_Counter == 0)
    2d72:	80 91 04 07 	lds	r24, 0x0704
    2d76:	88 23       	and	r24, r24
    2d78:	29 f4       	brne	.+10     	; 0x2d84 <GetServerTree+0x34e>
	{
		BST_Init(&Server_BinarySearchTree);
    2d7a:	8a e6       	ldi	r24, 0x6A	; 106
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <BST_Init>
    2d82:	b2 c0       	rjmp	.+356    	; 0x2ee8 <GetServerTree+0x4b2>
		return;
	}
	else
	{
		BST_Init(&Server_BinarySearchTree);
    2d84:	8a e6       	ldi	r24, 0x6A	; 106
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 a3 05 	call	0xb46	; 0xb46 <BST_Init>
	}

	for(uint8 count1 = 0; count1 < Tree_Counter; count1++)
    2d8c:	1a ae       	std	Y+58, r1	; 0x3a
    2d8e:	97 c0       	rjmp	.+302    	; 0x2ebe <GetServerTree+0x488>
	{
		for(uint8 count2 = 0; count2 < NodeSize; count2++)
    2d90:	19 ae       	std	Y+57, r1	; 0x39
    2d92:	89 c0       	rjmp	.+274    	; 0x2ea6 <GetServerTree+0x470>
		{
			_ReadByteIn(StartAddress++, NodePTR[count2]);
    2d94:	4b ad       	ldd	r20, Y+59	; 0x3b
    2d96:	5c ad       	ldd	r21, Y+60	; 0x3c
    2d98:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	9c af       	std	Y+60, r25	; 0x3c
    2da0:	8b af       	std	Y+59, r24	; 0x3b
    2da2:	89 ad       	ldd	r24, Y+57	; 0x39
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2daa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dac:	28 0f       	add	r18, r24
    2dae:	39 1f       	adc	r19, r25
    2db0:	ca 01       	movw	r24, r20
    2db2:	b9 01       	movw	r22, r18
    2db4:	0e 94 dd 26 	call	0x4dba	; 0x4dba <EEPROM_readByte>
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	61 f7       	brne	.-40     	; 0x2d94 <GetServerTree+0x35e>
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	a0 e2       	ldi	r26, 0x20	; 32
    2dc2:	b1 e4       	ldi	r27, 0x41	; 65
    2dc4:	8b 87       	std	Y+11, r24	; 0x0b
    2dc6:	9c 87       	std	Y+12, r25	; 0x0c
    2dc8:	ad 87       	std	Y+13, r26	; 0x0d
    2dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd4:	2d ec       	ldi	r18, 0xCD	; 205
    2dd6:	3c ec       	ldi	r19, 0xCC	; 204
    2dd8:	4c e2       	ldi	r20, 0x2C	; 44
    2dda:	55 e4       	ldi	r21, 0x45	; 69
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8f 83       	std	Y+7, r24	; 0x07
    2de6:	98 87       	std	Y+8, r25	; 0x08
    2de8:	a9 87       	std	Y+9, r26	; 0x09
    2dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dec:	6f 81       	ldd	r22, Y+7	; 0x07
    2dee:	78 85       	ldd	r23, Y+8	; 0x08
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e8       	ldi	r20, 0x80	; 128
    2dfa:	5f e3       	ldi	r21, 0x3F	; 63
    2dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e00:	88 23       	and	r24, r24
    2e02:	2c f4       	brge	.+10     	; 0x2e0e <GetServerTree+0x3d8>
		__ticks = 1;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	9e 83       	std	Y+6, r25	; 0x06
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
    2e0c:	3f c0       	rjmp	.+126    	; 0x2e8c <GetServerTree+0x456>
	else if (__tmp > 65535)
    2e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e10:	78 85       	ldd	r23, Y+8	; 0x08
    2e12:	89 85       	ldd	r24, Y+9	; 0x09
    2e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	4f e7       	ldi	r20, 0x7F	; 127
    2e1c:	57 e4       	ldi	r21, 0x47	; 71
    2e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e22:	18 16       	cp	r1, r24
    2e24:	4c f5       	brge	.+82     	; 0x2e78 <GetServerTree+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e2       	ldi	r20, 0x20	; 32
    2e34:	51 e4       	ldi	r21, 0x41	; 65
    2e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
    2e4e:	0f c0       	rjmp	.+30     	; 0x2e6e <GetServerTree+0x438>
    2e50:	84 e1       	ldi	r24, 0x14	; 20
    2e52:	91 e0       	ldi	r25, 0x01	; 1
    2e54:	9c 83       	std	Y+4, r25	; 0x04
    2e56:	8b 83       	std	Y+3, r24	; 0x03
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <GetServerTree+0x426>
    2e60:	9c 83       	std	Y+4, r25	; 0x04
    2e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e64:	8d 81       	ldd	r24, Y+5	; 0x05
    2e66:	9e 81       	ldd	r25, Y+6	; 0x06
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	69 f7       	brne	.-38     	; 0x2e50 <GetServerTree+0x41a>
    2e76:	14 c0       	rjmp	.+40     	; 0x2ea0 <GetServerTree+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	8d 83       	std	Y+5, r24	; 0x05
    2e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	89 83       	std	Y+1, r24	; 0x01
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <GetServerTree+0x462>
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	89 83       	std	Y+1, r24	; 0x01
		BST_Init(&Server_BinarySearchTree);
	}

	for(uint8 count1 = 0; count1 < Tree_Counter; count1++)
	{
		for(uint8 count2 = 0; count2 < NodeSize; count2++)
    2ea0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ea2:	8f 5f       	subi	r24, 0xFF	; 255
    2ea4:	89 af       	std	Y+57, r24	; 0x39
    2ea6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ea8:	88 30       	cpi	r24, 0x08	; 8
    2eaa:	08 f4       	brcc	.+2      	; 0x2eae <GetServerTree+0x478>
    2eac:	73 cf       	rjmp	.-282    	; 0x2d94 <GetServerTree+0x35e>
		{
			_ReadByteIn(StartAddress++, NodePTR[count2]);
		}

		NodePTR += NodeSize;
    2eae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb2:	08 96       	adiw	r24, 0x08	; 8
    2eb4:	9e af       	std	Y+62, r25	; 0x3e
    2eb6:	8d af       	std	Y+61, r24	; 0x3d
	else
	{
		BST_Init(&Server_BinarySearchTree);
	}

	for(uint8 count1 = 0; count1 < Tree_Counter; count1++)
    2eb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	8a af       	std	Y+58, r24	; 0x3a
    2ebe:	90 91 04 07 	lds	r25, 0x0704
    2ec2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ec4:	89 17       	cp	r24, r25
    2ec6:	08 f4       	brcc	.+2      	; 0x2eca <GetServerTree+0x494>
    2ec8:	63 cf       	rjmp	.-314    	; 0x2d90 <GetServerTree+0x35a>
		}

		NodePTR += NodeSize;
	}

	Server_BinarySearchTree.Root = &(Server_BinarySearchTree.Tree[RootIndex]);
    2eca:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ecc:	88 2f       	mov	r24, r24
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	86 59       	subi	r24, 0x96	; 150
    2ede:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee0:	90 93 03 07 	sts	0x0703, r25
    2ee4:	80 93 02 07 	sts	0x0702, r24
}
    2ee8:	cf 5b       	subi	r28, 0xBF	; 191
    2eea:	df 4f       	sbci	r29, 0xFF	; 255
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <StoreBST>:

void StoreBST(BST* tree)
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	e7 97       	sbiw	r28, 0x37	; 55
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	9f ab       	std	Y+55, r25	; 0x37
    2f12:	8e ab       	std	Y+54, r24	; 0x36
	uint8 Node_Counter = 0;
    2f14:	1d aa       	std	Y+53, r1	; 0x35
	uint8* Ptr_Node;
	uint16 StartAddress = TreeStartAddr;
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9a ab       	std	Y+50, r25	; 0x32
    2f1c:	89 ab       	std	Y+49, r24	; 0x31
	BST_node* Ptr_Elemnets = (BST_node*)&(tree -> Tree[0]);
    2f1e:	8e a9       	ldd	r24, Y+54	; 0x36
    2f20:	9f a9       	ldd	r25, Y+55	; 0x37
    2f22:	98 ab       	std	Y+48, r25	; 0x30
    2f24:	8f a7       	std	Y+47, r24	; 0x2f
	BST_node* TreeRoot = tree -> Root;
    2f26:	8e a9       	ldd	r24, Y+54	; 0x36
    2f28:	9f a9       	ldd	r25, Y+55	; 0x37
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	e8 56       	subi	r30, 0x68	; 104
    2f2e:	f9 4f       	sbci	r31, 0xF9	; 249
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	9e a7       	std	Y+46, r25	; 0x2e
    2f36:	8d a7       	std	Y+45, r24	; 0x2d

	SetDemultiplexerBST();
    2f38:	83 e0       	ldi	r24, 0x03	; 3
    2f3a:	67 e0       	ldi	r22, 0x07	; 7
    2f3c:	40 ee       	ldi	r20, 0xE0	; 224
    2f3e:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_WritePins>
	if(TreeRoot == NULL)
    2f42:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f44:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <StoreBST+0x50>
    2f4a:	b9 c1       	rjmp	.+882    	; 0x32be <StoreBST+0x3c2>
	{
		return;
	}

	_StoreByte(RootIndexAdd, (TreeRoot -> Index));
    2f4c:	ed a5       	ldd	r30, Y+45	; 0x2d
    2f4e:	fe a5       	ldd	r31, Y+46	; 0x2e
    2f50:	25 81       	ldd	r18, Z+5	; 0x05
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	62 2f       	mov	r22, r18
    2f58:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	b1 f7       	brne	.-20     	; 0x2f4c <StoreBST+0x50>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e2       	ldi	r26, 0x20	; 32
    2f66:	b1 e4       	ldi	r27, 0x41	; 65
    2f68:	8f a3       	std	Y+39, r24	; 0x27
    2f6a:	98 a7       	std	Y+40, r25	; 0x28
    2f6c:	a9 a7       	std	Y+41, r26	; 0x29
    2f6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6f a1       	ldd	r22, Y+39	; 0x27
    2f72:	78 a5       	ldd	r23, Y+40	; 0x28
    2f74:	89 a5       	ldd	r24, Y+41	; 0x29
    2f76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f78:	2d ec       	ldi	r18, 0xCD	; 205
    2f7a:	3c ec       	ldi	r19, 0xCC	; 204
    2f7c:	4c e2       	ldi	r20, 0x2C	; 44
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8b a3       	std	Y+35, r24	; 0x23
    2f8a:	9c a3       	std	Y+36, r25	; 0x24
    2f8c:	ad a3       	std	Y+37, r26	; 0x25
    2f8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f90:	6b a1       	ldd	r22, Y+35	; 0x23
    2f92:	7c a1       	ldd	r23, Y+36	; 0x24
    2f94:	8d a1       	ldd	r24, Y+37	; 0x25
    2f96:	9e a1       	ldd	r25, Y+38	; 0x26
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <StoreBST+0xb6>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9a a3       	std	Y+34, r25	; 0x22
    2fae:	89 a3       	std	Y+33, r24	; 0x21
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <StoreBST+0x134>
	else if (__tmp > 65535)
    2fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <StoreBST+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6f a1       	ldd	r22, Y+39	; 0x27
    2fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2fce:	89 a5       	ldd	r24, Y+41	; 0x29
    2fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9a a3       	std	Y+34, r25	; 0x22
    2ff0:	89 a3       	std	Y+33, r24	; 0x21
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <StoreBST+0x116>
    2ff4:	84 e1       	ldi	r24, 0x14	; 20
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	98 a3       	std	Y+32, r25	; 0x20
    2ffa:	8f 8f       	std	Y+31, r24	; 0x1f
    2ffc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ffe:	98 a1       	ldd	r25, Y+32	; 0x20
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <StoreBST+0x104>
    3004:	98 a3       	std	Y+32, r25	; 0x20
    3006:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	89 a1       	ldd	r24, Y+33	; 0x21
    300a:	9a a1       	ldd	r25, Y+34	; 0x22
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9a a3       	std	Y+34, r25	; 0x22
    3010:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	89 a1       	ldd	r24, Y+33	; 0x21
    3014:	9a a1       	ldd	r25, Y+34	; 0x22
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <StoreBST+0xf8>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <StoreBST+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6b a1       	ldd	r22, Y+35	; 0x23
    301e:	7c a1       	ldd	r23, Y+36	; 0x24
    3020:	8d a1       	ldd	r24, Y+37	; 0x25
    3022:	9e a1       	ldd	r25, Y+38	; 0x26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9a a3       	std	Y+34, r25	; 0x22
    302e:	89 a3       	std	Y+33, r24	; 0x21
    3030:	89 a1       	ldd	r24, Y+33	; 0x21
    3032:	9a a1       	ldd	r25, Y+34	; 0x22
    3034:	9e 8f       	std	Y+30, r25	; 0x1e
    3036:	8d 8f       	std	Y+29, r24	; 0x1d
    3038:	8d 8d       	ldd	r24, Y+29	; 0x1d
    303a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <StoreBST+0x140>
    3040:	9e 8f       	std	Y+30, r25	; 0x1e
    3042:	8d 8f       	std	Y+29, r24	; 0x1d

	for(uint8 count = 0; count < BST_Max_Elements; count++)
    3044:	1c a6       	std	Y+44, r1	; 0x2c
    3046:	b9 c0       	rjmp	.+370    	; 0x31ba <StoreBST+0x2be>
	{
		if(Ptr_Elemnets[count].State == BST_NODE_OCCUPIED)
    3048:	8c a5       	ldd	r24, Y+44	; 0x2c
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9c 01       	movw	r18, r24
    3050:	22 0f       	add	r18, r18
    3052:	33 1f       	adc	r19, r19
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	22 0f       	add	r18, r18
    305a:	33 1f       	adc	r19, r19
    305c:	8f a5       	ldd	r24, Y+47	; 0x2f
    305e:	98 a9       	ldd	r25, Y+48	; 0x30
    3060:	fc 01       	movw	r30, r24
    3062:	e2 0f       	add	r30, r18
    3064:	f3 1f       	adc	r31, r19
    3066:	86 81       	ldd	r24, Z+6	; 0x06
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	09 f0       	breq	.+2      	; 0x306e <StoreBST+0x172>
    306c:	a3 c0       	rjmp	.+326    	; 0x31b4 <StoreBST+0x2b8>
		{
			Ptr_Node = (uint8*)&Ptr_Elemnets[count];
    306e:	2f a5       	ldd	r18, Y+47	; 0x2f
    3070:	38 a9       	ldd	r19, Y+48	; 0x30
    3072:	8c a5       	ldd	r24, Y+44	; 0x2c
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	82 0f       	add	r24, r18
    3086:	93 1f       	adc	r25, r19
    3088:	9c ab       	std	Y+52, r25	; 0x34
    308a:	8b ab       	std	Y+51, r24	; 0x33
			for(uint8 count2 = 0; count2 < NodeSize; count2++)
    308c:	1b a6       	std	Y+43, r1	; 0x2b
    308e:	8b c0       	rjmp	.+278    	; 0x31a6 <StoreBST+0x2aa>
			{
				_StoreByte(StartAddress++, Ptr_Node[count2]);
    3090:	49 a9       	ldd	r20, Y+49	; 0x31
    3092:	5a a9       	ldd	r21, Y+50	; 0x32
    3094:	89 a9       	ldd	r24, Y+49	; 0x31
    3096:	9a a9       	ldd	r25, Y+50	; 0x32
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	9a ab       	std	Y+50, r25	; 0x32
    309c:	89 ab       	std	Y+49, r24	; 0x31
    309e:	8b a5       	ldd	r24, Y+43	; 0x2b
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	8b a9       	ldd	r24, Y+51	; 0x33
    30a6:	9c a9       	ldd	r25, Y+52	; 0x34
    30a8:	fc 01       	movw	r30, r24
    30aa:	e2 0f       	add	r30, r18
    30ac:	f3 1f       	adc	r31, r19
    30ae:	20 81       	ld	r18, Z
    30b0:	ca 01       	movw	r24, r20
    30b2:	62 2f       	mov	r22, r18
    30b4:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	51 f7       	brne	.-44     	; 0x3090 <StoreBST+0x194>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	a0 e2       	ldi	r26, 0x20	; 32
    30c2:	b1 e4       	ldi	r27, 0x41	; 65
    30c4:	89 8f       	std	Y+25, r24	; 0x19
    30c6:	9a 8f       	std	Y+26, r25	; 0x1a
    30c8:	ab 8f       	std	Y+27, r26	; 0x1b
    30ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30cc:	69 8d       	ldd	r22, Y+25	; 0x19
    30ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d4:	2d ec       	ldi	r18, 0xCD	; 205
    30d6:	3c ec       	ldi	r19, 0xCC	; 204
    30d8:	4c e2       	ldi	r20, 0x2C	; 44
    30da:	55 e4       	ldi	r21, 0x45	; 69
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	8d 8b       	std	Y+21, r24	; 0x15
    30e6:	9e 8b       	std	Y+22, r25	; 0x16
    30e8:	af 8b       	std	Y+23, r26	; 0x17
    30ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ec:	6d 89       	ldd	r22, Y+21	; 0x15
    30ee:	7e 89       	ldd	r23, Y+22	; 0x16
    30f0:	8f 89       	ldd	r24, Y+23	; 0x17
    30f2:	98 8d       	ldd	r25, Y+24	; 0x18
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e8       	ldi	r20, 0x80	; 128
    30fa:	5f e3       	ldi	r21, 0x3F	; 63
    30fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3100:	88 23       	and	r24, r24
    3102:	2c f4       	brge	.+10     	; 0x310e <StoreBST+0x212>
		__ticks = 1;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	9c 8b       	std	Y+20, r25	; 0x14
    310a:	8b 8b       	std	Y+19, r24	; 0x13
    310c:	3f c0       	rjmp	.+126    	; 0x318c <StoreBST+0x290>
	else if (__tmp > 65535)
    310e:	6d 89       	ldd	r22, Y+21	; 0x15
    3110:	7e 89       	ldd	r23, Y+22	; 0x16
    3112:	8f 89       	ldd	r24, Y+23	; 0x17
    3114:	98 8d       	ldd	r25, Y+24	; 0x18
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	3f ef       	ldi	r19, 0xFF	; 255
    311a:	4f e7       	ldi	r20, 0x7F	; 127
    311c:	57 e4       	ldi	r21, 0x47	; 71
    311e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3122:	18 16       	cp	r1, r24
    3124:	4c f5       	brge	.+82     	; 0x3178 <StoreBST+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3126:	69 8d       	ldd	r22, Y+25	; 0x19
    3128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    312a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    312c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e2       	ldi	r20, 0x20	; 32
    3134:	51 e4       	ldi	r21, 0x41	; 65
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
    314e:	0f c0       	rjmp	.+30     	; 0x316e <StoreBST+0x272>
    3150:	84 e1       	ldi	r24, 0x14	; 20
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	9a 8b       	std	Y+18, r25	; 0x12
    3156:	89 8b       	std	Y+17, r24	; 0x11
    3158:	89 89       	ldd	r24, Y+17	; 0x11
    315a:	9a 89       	ldd	r25, Y+18	; 0x12
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <StoreBST+0x260>
    3160:	9a 8b       	std	Y+18, r25	; 0x12
    3162:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3164:	8b 89       	ldd	r24, Y+19	; 0x13
    3166:	9c 89       	ldd	r25, Y+20	; 0x14
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	9c 8b       	std	Y+20, r25	; 0x14
    316c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316e:	8b 89       	ldd	r24, Y+19	; 0x13
    3170:	9c 89       	ldd	r25, Y+20	; 0x14
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	69 f7       	brne	.-38     	; 0x3150 <StoreBST+0x254>
    3176:	14 c0       	rjmp	.+40     	; 0x31a0 <StoreBST+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3178:	6d 89       	ldd	r22, Y+21	; 0x15
    317a:	7e 89       	ldd	r23, Y+22	; 0x16
    317c:	8f 89       	ldd	r24, Y+23	; 0x17
    317e:	98 8d       	ldd	r25, Y+24	; 0x18
    3180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	9c 8b       	std	Y+20, r25	; 0x14
    318a:	8b 8b       	std	Y+19, r24	; 0x13
    318c:	8b 89       	ldd	r24, Y+19	; 0x13
    318e:	9c 89       	ldd	r25, Y+20	; 0x14
    3190:	98 8b       	std	Y+16, r25	; 0x10
    3192:	8f 87       	std	Y+15, r24	; 0x0f
    3194:	8f 85       	ldd	r24, Y+15	; 0x0f
    3196:	98 89       	ldd	r25, Y+16	; 0x10
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <StoreBST+0x29c>
    319c:	98 8b       	std	Y+16, r25	; 0x10
    319e:	8f 87       	std	Y+15, r24	; 0x0f
	for(uint8 count = 0; count < BST_Max_Elements; count++)
	{
		if(Ptr_Elemnets[count].State == BST_NODE_OCCUPIED)
		{
			Ptr_Node = (uint8*)&Ptr_Elemnets[count];
			for(uint8 count2 = 0; count2 < NodeSize; count2++)
    31a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	8b a7       	std	Y+43, r24	; 0x2b
    31a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a8:	88 30       	cpi	r24, 0x08	; 8
    31aa:	08 f4       	brcc	.+2      	; 0x31ae <StoreBST+0x2b2>
    31ac:	71 cf       	rjmp	.-286    	; 0x3090 <StoreBST+0x194>
			{
				_StoreByte(StartAddress++, Ptr_Node[count2]);
			}
			Node_Counter++;
    31ae:	8d a9       	ldd	r24, Y+53	; 0x35
    31b0:	8f 5f       	subi	r24, 0xFF	; 255
    31b2:	8d ab       	std	Y+53, r24	; 0x35
		return;
	}

	_StoreByte(RootIndexAdd, (TreeRoot -> Index));

	for(uint8 count = 0; count < BST_Max_Elements; count++)
    31b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	8c a7       	std	Y+44, r24	; 0x2c
    31ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    31bc:	83 3d       	cpi	r24, 0xD3	; 211
    31be:	08 f4       	brcc	.+2      	; 0x31c2 <StoreBST+0x2c6>
    31c0:	43 cf       	rjmp	.-378    	; 0x3048 <StoreBST+0x14c>
			}
			Node_Counter++;
		}
	}

	Tree_Counter = Node_Counter;
    31c2:	8d a9       	ldd	r24, Y+53	; 0x35
    31c4:	80 93 04 07 	sts	0x0704, r24
	_StoreByte(TreeCounterAdd, Tree_Counter);
    31c8:	20 91 04 07 	lds	r18, 0x0704
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	62 2f       	mov	r22, r18
    31d2:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	b9 f7       	brne	.-18     	; 0x31c8 <StoreBST+0x2cc>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	a0 e2       	ldi	r26, 0x20	; 32
    31e0:	b1 e4       	ldi	r27, 0x41	; 65
    31e2:	8b 87       	std	Y+11, r24	; 0x0b
    31e4:	9c 87       	std	Y+12, r25	; 0x0c
    31e6:	ad 87       	std	Y+13, r26	; 0x0d
    31e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f2:	2d ec       	ldi	r18, 0xCD	; 205
    31f4:	3c ec       	ldi	r19, 0xCC	; 204
    31f6:	4c e2       	ldi	r20, 0x2C	; 44
    31f8:	55 e4       	ldi	r21, 0x45	; 69
    31fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	8f 83       	std	Y+7, r24	; 0x07
    3204:	98 87       	std	Y+8, r25	; 0x08
    3206:	a9 87       	std	Y+9, r26	; 0x09
    3208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    320a:	6f 81       	ldd	r22, Y+7	; 0x07
    320c:	78 85       	ldd	r23, Y+8	; 0x08
    320e:	89 85       	ldd	r24, Y+9	; 0x09
    3210:	9a 85       	ldd	r25, Y+10	; 0x0a
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e8       	ldi	r20, 0x80	; 128
    3218:	5f e3       	ldi	r21, 0x3F	; 63
    321a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321e:	88 23       	and	r24, r24
    3220:	2c f4       	brge	.+10     	; 0x322c <StoreBST+0x330>
		__ticks = 1;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9e 83       	std	Y+6, r25	; 0x06
    3228:	8d 83       	std	Y+5, r24	; 0x05
    322a:	3f c0       	rjmp	.+126    	; 0x32aa <StoreBST+0x3ae>
	else if (__tmp > 65535)
    322c:	6f 81       	ldd	r22, Y+7	; 0x07
    322e:	78 85       	ldd	r23, Y+8	; 0x08
    3230:	89 85       	ldd	r24, Y+9	; 0x09
    3232:	9a 85       	ldd	r25, Y+10	; 0x0a
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	3f ef       	ldi	r19, 0xFF	; 255
    3238:	4f e7       	ldi	r20, 0x7F	; 127
    323a:	57 e4       	ldi	r21, 0x47	; 71
    323c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3240:	18 16       	cp	r1, r24
    3242:	4c f5       	brge	.+82     	; 0x3296 <StoreBST+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3244:	6b 85       	ldd	r22, Y+11	; 0x0b
    3246:	7c 85       	ldd	r23, Y+12	; 0x0c
    3248:	8d 85       	ldd	r24, Y+13	; 0x0d
    324a:	9e 85       	ldd	r25, Y+14	; 0x0e
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e2       	ldi	r20, 0x20	; 32
    3252:	51 e4       	ldi	r21, 0x41	; 65
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	0f c0       	rjmp	.+30     	; 0x328c <StoreBST+0x390>
    326e:	84 e1       	ldi	r24, 0x14	; 20
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	9c 83       	std	Y+4, r25	; 0x04
    3274:	8b 83       	std	Y+3, r24	; 0x03
    3276:	8b 81       	ldd	r24, Y+3	; 0x03
    3278:	9c 81       	ldd	r25, Y+4	; 0x04
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <StoreBST+0x37e>
    327e:	9c 83       	std	Y+4, r25	; 0x04
    3280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3282:	8d 81       	ldd	r24, Y+5	; 0x05
    3284:	9e 81       	ldd	r25, Y+6	; 0x06
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	69 f7       	brne	.-38     	; 0x326e <StoreBST+0x372>
    3294:	14 c0       	rjmp	.+40     	; 0x32be <StoreBST+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3296:	6f 81       	ldd	r22, Y+7	; 0x07
    3298:	78 85       	ldd	r23, Y+8	; 0x08
    329a:	89 85       	ldd	r24, Y+9	; 0x09
    329c:	9a 85       	ldd	r25, Y+10	; 0x0a
    329e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	9e 83       	std	Y+6, r25	; 0x06
    32a8:	8d 83       	std	Y+5, r24	; 0x05
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	9a 83       	std	Y+2, r25	; 0x02
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	9a 81       	ldd	r25, Y+2	; 0x02
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <StoreBST+0x3ba>
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
}
    32be:	e7 96       	adiw	r28, 0x37	; 55
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <HandleBST>:


void HandleBST(void)
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
	StoreBST(&Server_BinarySearchTree);
    32d8:	8a e6       	ldi	r24, 0x6A	; 106
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <StoreBST>
}
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <WriteClient>:

static void WriteClient(CLIENT_PROFILE* client, uint8 index)
{
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	66 97       	sbiw	r28, 0x16	; 22
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	9d 8b       	std	Y+21, r25	; 0x15
    32fc:	8c 8b       	std	Y+20, r24	; 0x14
    32fe:	6e 8b       	std	Y+22, r22	; 0x16
	uint16 Address;
	uint8* PTR = (uint8*)client;
    3300:	8c 89       	ldd	r24, Y+20	; 0x14
    3302:	9d 89       	ldd	r25, Y+21	; 0x15
    3304:	99 8b       	std	Y+17, r25	; 0x11
    3306:	88 8b       	std	Y+16, r24	; 0x10

	Address = SetStartAddress(index);
    3308:	8e 89       	ldd	r24, Y+22	; 0x16
    330a:	93 ed       	ldi	r25, 0xD3	; 211
    330c:	69 2f       	mov	r22, r25
    330e:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <__udivmodqi4>
    3312:	89 2f       	mov	r24, r25
    3314:	88 2f       	mov	r24, r24
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	82 95       	swap	r24
    331a:	92 95       	swap	r25
    331c:	90 7f       	andi	r25, 0xF0	; 240
    331e:	98 27       	eor	r25, r24
    3320:	80 7f       	andi	r24, 0xF0	; 240
    3322:	98 27       	eor	r25, r24
    3324:	9b 8b       	std	Y+19, r25	; 0x13
    3326:	8a 8b       	std	Y+18, r24	; 0x12
	SetDemultiplexerIndex(index);
    3328:	8e 89       	ldd	r24, Y+22	; 0x16
    332a:	98 2f       	mov	r25, r24
    332c:	99 1f       	adc	r25, r25
    332e:	99 27       	eor	r25, r25
    3330:	99 1f       	adc	r25, r25
    3332:	83 e0       	ldi	r24, 0x03	; 3
    3334:	69 2f       	mov	r22, r25
    3336:	40 ee       	ldi	r20, 0xE0	; 224
    3338:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_WritePins>

	for(uint8 count = 0; count < ClientSize; count++)
    333c:	1f 86       	std	Y+15, r1	; 0x0f
    333e:	8b c0       	rjmp	.+278    	; 0x3456 <WriteClient+0x170>
	{
		_StoreByte(Address++, PTR[count]);
    3340:	4a 89       	ldd	r20, Y+18	; 0x12
    3342:	5b 89       	ldd	r21, Y+19	; 0x13
    3344:	8a 89       	ldd	r24, Y+18	; 0x12
    3346:	9b 89       	ldd	r25, Y+19	; 0x13
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	9b 8b       	std	Y+19, r25	; 0x13
    334c:	8a 8b       	std	Y+18, r24	; 0x12
    334e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	88 89       	ldd	r24, Y+16	; 0x10
    3356:	99 89       	ldd	r25, Y+17	; 0x11
    3358:	fc 01       	movw	r30, r24
    335a:	e2 0f       	add	r30, r18
    335c:	f3 1f       	adc	r31, r19
    335e:	20 81       	ld	r18, Z
    3360:	ca 01       	movw	r24, r20
    3362:	62 2f       	mov	r22, r18
    3364:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	51 f7       	brne	.-44     	; 0x3340 <WriteClient+0x5a>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a0 e2       	ldi	r26, 0x20	; 32
    3372:	b1 e4       	ldi	r27, 0x41	; 65
    3374:	8b 87       	std	Y+11, r24	; 0x0b
    3376:	9c 87       	std	Y+12, r25	; 0x0c
    3378:	ad 87       	std	Y+13, r26	; 0x0d
    337a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	6b 85       	ldd	r22, Y+11	; 0x0b
    337e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3380:	8d 85       	ldd	r24, Y+13	; 0x0d
    3382:	9e 85       	ldd	r25, Y+14	; 0x0e
    3384:	2d ec       	ldi	r18, 0xCD	; 205
    3386:	3c ec       	ldi	r19, 0xCC	; 204
    3388:	4c e2       	ldi	r20, 0x2C	; 44
    338a:	55 e4       	ldi	r21, 0x45	; 69
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8f 83       	std	Y+7, r24	; 0x07
    3396:	98 87       	std	Y+8, r25	; 0x08
    3398:	a9 87       	std	Y+9, r26	; 0x09
    339a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    339c:	6f 81       	ldd	r22, Y+7	; 0x07
    339e:	78 85       	ldd	r23, Y+8	; 0x08
    33a0:	89 85       	ldd	r24, Y+9	; 0x09
    33a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	2c f4       	brge	.+10     	; 0x33be <WriteClient+0xd8>
		__ticks = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9e 83       	std	Y+6, r25	; 0x06
    33ba:	8d 83       	std	Y+5, r24	; 0x05
    33bc:	3f c0       	rjmp	.+126    	; 0x343c <WriteClient+0x156>
	else if (__tmp > 65535)
    33be:	6f 81       	ldd	r22, Y+7	; 0x07
    33c0:	78 85       	ldd	r23, Y+8	; 0x08
    33c2:	89 85       	ldd	r24, Y+9	; 0x09
    33c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	4c f5       	brge	.+82     	; 0x3428 <WriteClient+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33da:	8d 85       	ldd	r24, Y+13	; 0x0d
    33dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e2       	ldi	r20, 0x20	; 32
    33e4:	51 e4       	ldi	r21, 0x41	; 65
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9e 83       	std	Y+6, r25	; 0x06
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	0f c0       	rjmp	.+30     	; 0x341e <WriteClient+0x138>
    3400:	84 e1       	ldi	r24, 0x14	; 20
    3402:	91 e0       	ldi	r25, 0x01	; 1
    3404:	9c 83       	std	Y+4, r25	; 0x04
    3406:	8b 83       	std	Y+3, r24	; 0x03
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <WriteClient+0x126>
    3410:	9c 83       	std	Y+4, r25	; 0x04
    3412:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	8d 81       	ldd	r24, Y+5	; 0x05
    3420:	9e 81       	ldd	r25, Y+6	; 0x06
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f7       	brne	.-38     	; 0x3400 <WriteClient+0x11a>
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <WriteClient+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	9a 83       	std	Y+2, r25	; 0x02
    3442:	89 83       	std	Y+1, r24	; 0x01
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <WriteClient+0x162>
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
	uint8* PTR = (uint8*)client;

	Address = SetStartAddress(index);
	SetDemultiplexerIndex(index);

	for(uint8 count = 0; count < ClientSize; count++)
    3450:	8f 85       	ldd	r24, Y+15	; 0x0f
    3452:	8f 5f       	subi	r24, 0xFF	; 255
    3454:	8f 87       	std	Y+15, r24	; 0x0f
    3456:	8f 85       	ldd	r24, Y+15	; 0x0f
    3458:	80 31       	cpi	r24, 0x10	; 16
    345a:	08 f4       	brcc	.+2      	; 0x345e <WriteClient+0x178>
    345c:	71 cf       	rjmp	.-286    	; 0x3340 <WriteClient+0x5a>
	{
		_StoreByte(Address++, PTR[count]);
	}
}
    345e:	66 96       	adiw	r28, 0x16	; 22
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <ReadClient>:

static void ReadClient(CLIENT_PROFILE* client, uint8 index)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	66 97       	sbiw	r28, 0x16	; 22
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	9d 8b       	std	Y+21, r25	; 0x15
    3486:	8c 8b       	std	Y+20, r24	; 0x14
    3488:	6e 8b       	std	Y+22, r22	; 0x16
	uint16 Address;
	uint8* PTR = (uint8*)client;
    348a:	8c 89       	ldd	r24, Y+20	; 0x14
    348c:	9d 89       	ldd	r25, Y+21	; 0x15
    348e:	99 8b       	std	Y+17, r25	; 0x11
    3490:	88 8b       	std	Y+16, r24	; 0x10

	Address = SetStartAddress(index);
    3492:	8e 89       	ldd	r24, Y+22	; 0x16
    3494:	93 ed       	ldi	r25, 0xD3	; 211
    3496:	69 2f       	mov	r22, r25
    3498:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <__udivmodqi4>
    349c:	89 2f       	mov	r24, r25
    349e:	88 2f       	mov	r24, r24
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	82 95       	swap	r24
    34a4:	92 95       	swap	r25
    34a6:	90 7f       	andi	r25, 0xF0	; 240
    34a8:	98 27       	eor	r25, r24
    34aa:	80 7f       	andi	r24, 0xF0	; 240
    34ac:	98 27       	eor	r25, r24
    34ae:	9b 8b       	std	Y+19, r25	; 0x13
    34b0:	8a 8b       	std	Y+18, r24	; 0x12
	SetDemultiplexerIndex(index);
    34b2:	8e 89       	ldd	r24, Y+22	; 0x16
    34b4:	98 2f       	mov	r25, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	99 27       	eor	r25, r25
    34ba:	99 1f       	adc	r25, r25
    34bc:	83 e0       	ldi	r24, 0x03	; 3
    34be:	69 2f       	mov	r22, r25
    34c0:	40 ee       	ldi	r20, 0xE0	; 224
    34c2:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_WritePins>

	for(uint8 count = 0; count < ClientSize; count++)
    34c6:	1f 86       	std	Y+15, r1	; 0x0f
    34c8:	89 c0       	rjmp	.+274    	; 0x35dc <ReadClient+0x16c>
	{
		_ReadByteIn(Address++, PTR[count]);
    34ca:	4a 89       	ldd	r20, Y+18	; 0x12
    34cc:	5b 89       	ldd	r21, Y+19	; 0x13
    34ce:	8a 89       	ldd	r24, Y+18	; 0x12
    34d0:	9b 89       	ldd	r25, Y+19	; 0x13
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	9b 8b       	std	Y+19, r25	; 0x13
    34d6:	8a 8b       	std	Y+18, r24	; 0x12
    34d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	88 89       	ldd	r24, Y+16	; 0x10
    34e0:	99 89       	ldd	r25, Y+17	; 0x11
    34e2:	28 0f       	add	r18, r24
    34e4:	39 1f       	adc	r19, r25
    34e6:	ca 01       	movw	r24, r20
    34e8:	b9 01       	movw	r22, r18
    34ea:	0e 94 dd 26 	call	0x4dba	; 0x4dba <EEPROM_readByte>
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	61 f7       	brne	.-40     	; 0x34ca <ReadClient+0x5a>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	a0 e2       	ldi	r26, 0x20	; 32
    34f8:	b1 e4       	ldi	r27, 0x41	; 65
    34fa:	8b 87       	std	Y+11, r24	; 0x0b
    34fc:	9c 87       	std	Y+12, r25	; 0x0c
    34fe:	ad 87       	std	Y+13, r26	; 0x0d
    3500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3502:	6b 85       	ldd	r22, Y+11	; 0x0b
    3504:	7c 85       	ldd	r23, Y+12	; 0x0c
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	2d ec       	ldi	r18, 0xCD	; 205
    350c:	3c ec       	ldi	r19, 0xCC	; 204
    350e:	4c e2       	ldi	r20, 0x2C	; 44
    3510:	55 e4       	ldi	r21, 0x45	; 69
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	8f 83       	std	Y+7, r24	; 0x07
    351c:	98 87       	std	Y+8, r25	; 0x08
    351e:	a9 87       	std	Y+9, r26	; 0x09
    3520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3522:	6f 81       	ldd	r22, Y+7	; 0x07
    3524:	78 85       	ldd	r23, Y+8	; 0x08
    3526:	89 85       	ldd	r24, Y+9	; 0x09
    3528:	9a 85       	ldd	r25, Y+10	; 0x0a
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	2c f4       	brge	.+10     	; 0x3544 <ReadClient+0xd4>
		__ticks = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
    3542:	3f c0       	rjmp	.+126    	; 0x35c2 <ReadClient+0x152>
	else if (__tmp > 65535)
    3544:	6f 81       	ldd	r22, Y+7	; 0x07
    3546:	78 85       	ldd	r23, Y+8	; 0x08
    3548:	89 85       	ldd	r24, Y+9	; 0x09
    354a:	9a 85       	ldd	r25, Y+10	; 0x0a
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3558:	18 16       	cp	r1, r24
    355a:	4c f5       	brge	.+82     	; 0x35ae <ReadClient+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355c:	6b 85       	ldd	r22, Y+11	; 0x0b
    355e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3560:	8d 85       	ldd	r24, Y+13	; 0x0d
    3562:	9e 85       	ldd	r25, Y+14	; 0x0e
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e2       	ldi	r20, 0x20	; 32
    356a:	51 e4       	ldi	r21, 0x41	; 65
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <ReadClient+0x134>
    3586:	84 e1       	ldi	r24, 0x14	; 20
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	9c 83       	std	Y+4, r25	; 0x04
    358c:	8b 83       	std	Y+3, r24	; 0x03
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <ReadClient+0x122>
    3596:	9c 83       	std	Y+4, r25	; 0x04
    3598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359a:	8d 81       	ldd	r24, Y+5	; 0x05
    359c:	9e 81       	ldd	r25, Y+6	; 0x06
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	9e 83       	std	Y+6, r25	; 0x06
    35a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a4:	8d 81       	ldd	r24, Y+5	; 0x05
    35a6:	9e 81       	ldd	r25, Y+6	; 0x06
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	69 f7       	brne	.-38     	; 0x3586 <ReadClient+0x116>
    35ac:	14 c0       	rjmp	.+40     	; 0x35d6 <ReadClient+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	6f 81       	ldd	r22, Y+7	; 0x07
    35b0:	78 85       	ldd	r23, Y+8	; 0x08
    35b2:	89 85       	ldd	r24, Y+9	; 0x09
    35b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	9a 81       	ldd	r25, Y+2	; 0x02
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <ReadClient+0x15e>
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	89 83       	std	Y+1, r24	; 0x01
	uint8* PTR = (uint8*)client;

	Address = SetStartAddress(index);
	SetDemultiplexerIndex(index);

	for(uint8 count = 0; count < ClientSize; count++)
    35d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d8:	8f 5f       	subi	r24, 0xFF	; 255
    35da:	8f 87       	std	Y+15, r24	; 0x0f
    35dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    35de:	80 31       	cpi	r24, 0x10	; 16
    35e0:	08 f4       	brcc	.+2      	; 0x35e4 <ReadClient+0x174>
    35e2:	73 cf       	rjmp	.-282    	; 0x34ca <ReadClient+0x5a>
	{
		_ReadByteIn(Address++, PTR[count]);
	}
}
    35e4:	66 96       	adiw	r28, 0x16	; 22
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	08 95       	ret

000035f6 <Server_StoreUpdateClient>:

Std_ReturnType Server_StoreUpdateClient(CLIENT_PROFILE* client, uint8 StoreUpdateVar)
{
    35f6:	df 93       	push	r29
    35f8:	cf 93       	push	r28
    35fa:	cd b7       	in	r28, 0x3d	; 61
    35fc:	de b7       	in	r29, 0x3e	; 62
    35fe:	2c 97       	sbiw	r28, 0x0c	; 12
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	9a 87       	std	Y+10, r25	; 0x0a
    360c:	89 87       	std	Y+9, r24	; 0x09
    360e:	6b 87       	std	Y+11, r22	; 0x0b
	uint8 Index, HashValue;
	BST_node* NodeRef = NULL;
    3610:	1b 82       	std	Y+3, r1	; 0x03
    3612:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ID_String[3] = {client -> ID[0], client -> ID[1]};
    3614:	e9 85       	ldd	r30, Y+9	; 0x09
    3616:	fa 85       	ldd	r31, Y+10	; 0x0a
    3618:	25 85       	ldd	r18, Z+13	; 0x0d
    361a:	e9 85       	ldd	r30, Y+9	; 0x09
    361c:	fa 85       	ldd	r31, Y+10	; 0x0a
    361e:	96 85       	ldd	r25, Z+14	; 0x0e
    3620:	83 e0       	ldi	r24, 0x03	; 3
    3622:	fe 01       	movw	r30, r28
    3624:	36 96       	adiw	r30, 0x06	; 6
    3626:	df 01       	movw	r26, r30
    3628:	38 2f       	mov	r19, r24
    362a:	1d 92       	st	X+, r1
    362c:	3a 95       	dec	r19
    362e:	e9 f7       	brne	.-6      	; 0x362a <Server_StoreUpdateClient+0x34>
    3630:	2e 83       	std	Y+6, r18	; 0x06
    3632:	9f 83       	std	Y+7, r25	; 0x07
	uint8 ID_Number;

	ID_Number = Number(ID_String);
    3634:	8e 81       	ldd	r24, Y+6	; 0x06
    3636:	88 2f       	mov	r24, r24
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9c 01       	movw	r18, r24
    363c:	22 0f       	add	r18, r18
    363e:	33 1f       	adc	r19, r19
    3640:	c9 01       	movw	r24, r18
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	82 0f       	add	r24, r18
    364c:	93 1f       	adc	r25, r19
    364e:	98 2f       	mov	r25, r24
    3650:	8f 81       	ldd	r24, Y+7	; 0x07
    3652:	89 0f       	add	r24, r25
    3654:	80 51       	subi	r24, 0x10	; 16
    3656:	89 83       	std	Y+1, r24	; 0x01
	HashValue = GetHash(ID_Number);
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	87 e5       	ldi	r24, 0x57	; 87
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	ac 01       	movw	r20, r24
    3664:	24 9f       	mul	r18, r20
    3666:	c0 01       	movw	r24, r0
    3668:	25 9f       	mul	r18, r21
    366a:	90 0d       	add	r25, r0
    366c:	34 9f       	mul	r19, r20
    366e:	90 0d       	add	r25, r0
    3670:	11 24       	eor	r1, r1
    3672:	86 5f       	subi	r24, 0xF6	; 246
    3674:	9d 4f       	sbci	r25, 0xFD	; 253
    3676:	23 ed       	ldi	r18, 0xD3	; 211
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	b9 01       	movw	r22, r18
    367c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__divmodhi4>
    3680:	8c 83       	std	Y+4, r24	; 0x04

	if(StoreUpdateVar == Store){
    3682:	8b 85       	ldd	r24, Y+11	; 0x0b
    3684:	81 30       	cpi	r24, 0x01	; 1
    3686:	41 f4       	brne	.+16     	; 0x3698 <Server_StoreUpdateClient+0xa2>
		NodeRef = BST_Insert(&Server_BinarySearchTree, HashValue);
    3688:	8a e6       	ldi	r24, 0x6A	; 106
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	6c 81       	ldd	r22, Y+4	; 0x04
    368e:	0e 94 2c 06 	call	0xc58	; 0xc58 <BST_Insert>
    3692:	9b 83       	std	Y+3, r25	; 0x03
    3694:	8a 83       	std	Y+2, r24	; 0x02
    3696:	0a c0       	rjmp	.+20     	; 0x36ac <Server_StoreUpdateClient+0xb6>
		/*if(NodeRef != NULL){
			InsertOriginalTree(NodeRef);
		}*/
	}
	else if(StoreUpdateVar == Update)
    3698:	8b 85       	ldd	r24, Y+11	; 0x0b
    369a:	88 23       	and	r24, r24
    369c:	39 f4       	brne	.+14     	; 0x36ac <Server_StoreUpdateClient+0xb6>
		NodeRef = BST_FindElement(&Server_BinarySearchTree, HashValue);
    369e:	8a e6       	ldi	r24, 0x6A	; 106
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	6c 81       	ldd	r22, Y+4	; 0x04
    36a4:	0e 94 f5 07 	call	0xfea	; 0xfea <BST_FindElement>
    36a8:	9b 83       	std	Y+3, r25	; 0x03
    36aa:	8a 83       	std	Y+2, r24	; 0x02
	else{
		//error message
	}

	if(NodeRef == NULL)
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	9b 81       	ldd	r25, Y+3	; 0x03
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	19 f4       	brne	.+6      	; 0x36ba <Server_StoreUpdateClient+0xc4>
		return E_NOT_OK;
    36b4:	51 e0       	ldi	r21, 0x01	; 1
    36b6:	5c 87       	std	Y+12, r21	; 0x0c
    36b8:	0a c0       	rjmp	.+20     	; 0x36ce <Server_StoreUpdateClient+0xd8>
	else{
		Index = NodeRef -> Index;
    36ba:	ea 81       	ldd	r30, Y+2	; 0x02
    36bc:	fb 81       	ldd	r31, Y+3	; 0x03
    36be:	85 81       	ldd	r24, Z+5	; 0x05
    36c0:	8d 83       	std	Y+5, r24	; 0x05
		WriteClient(client, Index);
    36c2:	89 85       	ldd	r24, Y+9	; 0x09
    36c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c6:	6d 81       	ldd	r22, Y+5	; 0x05
    36c8:	0e 94 73 19 	call	0x32e6	; 0x32e6 <WriteClient>
	}

	return E_OK;
    36cc:	1c 86       	std	Y+12, r1	; 0x0c
    36ce:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    36d0:	2c 96       	adiw	r28, 0x0c	; 12
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <Server_GetClient>:

CLIENT_PROFILE Server_GetClient(uint8 ID, Std_ReturnType* returnVal)
{
    36e2:	df 93       	push	r29
    36e4:	cf 93       	push	r28
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	a3 97       	sbiw	r28, 0x23	; 35
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	99 8f       	std	Y+25, r25	; 0x19
    36f8:	88 8f       	std	Y+24, r24	; 0x18
    36fa:	6d 8b       	std	Y+21, r22	; 0x15
    36fc:	5f 8b       	std	Y+23, r21	; 0x17
    36fe:	4e 8b       	std	Y+22, r20	; 0x16
	CLIENT_PROFILE client;
	uint8 Index, HashValue;
	BST_node* NodeRef = NULL;
    3700:	1a 82       	std	Y+2, r1	; 0x02
    3702:	19 82       	std	Y+1, r1	; 0x01

	*returnVal = E_NOT_OK;
    3704:	ee 89       	ldd	r30, Y+22	; 0x16
    3706:	ff 89       	ldd	r31, Y+23	; 0x17
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	80 83       	st	Z, r24

	HashValue = GetHash(ID);
    370c:	8d 89       	ldd	r24, Y+21	; 0x15
    370e:	28 2f       	mov	r18, r24
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	87 e5       	ldi	r24, 0x57	; 87
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	ac 01       	movw	r20, r24
    3718:	24 9f       	mul	r18, r20
    371a:	c0 01       	movw	r24, r0
    371c:	25 9f       	mul	r18, r21
    371e:	90 0d       	add	r25, r0
    3720:	34 9f       	mul	r19, r20
    3722:	90 0d       	add	r25, r0
    3724:	11 24       	eor	r1, r1
    3726:	86 5f       	subi	r24, 0xF6	; 246
    3728:	9d 4f       	sbci	r25, 0xFD	; 253
    372a:	23 ed       	ldi	r18, 0xD3	; 211
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	b9 01       	movw	r22, r18
    3730:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__divmodhi4>
    3734:	8b 83       	std	Y+3, r24	; 0x03
	NodeRef = BST_FindElement(&Server_BinarySearchTree, HashValue);
    3736:	8a e6       	ldi	r24, 0x6A	; 106
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	6b 81       	ldd	r22, Y+3	; 0x03
    373c:	0e 94 f5 07 	call	0xfea	; 0xfea <BST_FindElement>
    3740:	9a 83       	std	Y+2, r25	; 0x02
    3742:	89 83       	std	Y+1, r24	; 0x01

	if(NodeRef == NULL){
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	9a 81       	ldd	r25, Y+2	; 0x02
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	19 f5       	brne	.+70     	; 0x3792 <Server_GetClient+0xb0>
		return client;
    374c:	88 8d       	ldd	r24, Y+24	; 0x18
    374e:	99 8d       	ldd	r25, Y+25	; 0x19
    3750:	9b 8f       	std	Y+27, r25	; 0x1b
    3752:	8a 8f       	std	Y+26, r24	; 0x1a
    3754:	fe 01       	movw	r30, r28
    3756:	35 96       	adiw	r30, 0x05	; 5
    3758:	fd 8f       	std	Y+29, r31	; 0x1d
    375a:	ec 8f       	std	Y+28, r30	; 0x1c
    375c:	f0 e1       	ldi	r31, 0x10	; 16
    375e:	fe 8f       	std	Y+30, r31	; 0x1e
    3760:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3762:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3764:	00 80       	ld	r0, Z
    3766:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3768:	5d 8d       	ldd	r21, Y+29	; 0x1d
    376a:	4f 5f       	subi	r20, 0xFF	; 255
    376c:	5f 4f       	sbci	r21, 0xFF	; 255
    376e:	5d 8f       	std	Y+29, r21	; 0x1d
    3770:	4c 8f       	std	Y+28, r20	; 0x1c
    3772:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3774:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3776:	00 82       	st	Z, r0
    3778:	4a 8d       	ldd	r20, Y+26	; 0x1a
    377a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    377c:	4f 5f       	subi	r20, 0xFF	; 255
    377e:	5f 4f       	sbci	r21, 0xFF	; 255
    3780:	5b 8f       	std	Y+27, r21	; 0x1b
    3782:	4a 8f       	std	Y+26, r20	; 0x1a
    3784:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3786:	51 50       	subi	r21, 0x01	; 1
    3788:	5e 8f       	std	Y+30, r21	; 0x1e
    378a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    378c:	88 23       	and	r24, r24
    378e:	41 f7       	brne	.-48     	; 0x3760 <Server_GetClient+0x7e>
    3790:	2f c0       	rjmp	.+94     	; 0x37f0 <Server_GetClient+0x10e>
	}
	else{
		Index = NodeRef -> Index;
    3792:	e9 81       	ldd	r30, Y+1	; 0x01
    3794:	fa 81       	ldd	r31, Y+2	; 0x02
    3796:	85 81       	ldd	r24, Z+5	; 0x05
    3798:	8c 83       	std	Y+4, r24	; 0x04
		ReadClient(&client, Index);
    379a:	ce 01       	movw	r24, r28
    379c:	05 96       	adiw	r24, 0x05	; 5
    379e:	6c 81       	ldd	r22, Y+4	; 0x04
    37a0:	0e 94 38 1a 	call	0x3470	; 0x3470 <ReadClient>
	}

	*returnVal = E_OK;
    37a4:	ee 89       	ldd	r30, Y+22	; 0x16
    37a6:	ff 89       	ldd	r31, Y+23	; 0x17
    37a8:	10 82       	st	Z, r1
	return client;
    37aa:	e8 8d       	ldd	r30, Y+24	; 0x18
    37ac:	f9 8d       	ldd	r31, Y+25	; 0x19
    37ae:	f8 a3       	std	Y+32, r31	; 0x20
    37b0:	ef 8f       	std	Y+31, r30	; 0x1f
    37b2:	ae 01       	movw	r20, r28
    37b4:	4b 5f       	subi	r20, 0xFB	; 251
    37b6:	5f 4f       	sbci	r21, 0xFF	; 255
    37b8:	5a a3       	std	Y+34, r21	; 0x22
    37ba:	49 a3       	std	Y+33, r20	; 0x21
    37bc:	50 e1       	ldi	r21, 0x10	; 16
    37be:	5b a3       	std	Y+35, r21	; 0x23
    37c0:	e9 a1       	ldd	r30, Y+33	; 0x21
    37c2:	fa a1       	ldd	r31, Y+34	; 0x22
    37c4:	00 80       	ld	r0, Z
    37c6:	49 a1       	ldd	r20, Y+33	; 0x21
    37c8:	5a a1       	ldd	r21, Y+34	; 0x22
    37ca:	4f 5f       	subi	r20, 0xFF	; 255
    37cc:	5f 4f       	sbci	r21, 0xFF	; 255
    37ce:	5a a3       	std	Y+34, r21	; 0x22
    37d0:	49 a3       	std	Y+33, r20	; 0x21
    37d2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37d4:	f8 a1       	ldd	r31, Y+32	; 0x20
    37d6:	00 82       	st	Z, r0
    37d8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    37da:	58 a1       	ldd	r21, Y+32	; 0x20
    37dc:	4f 5f       	subi	r20, 0xFF	; 255
    37de:	5f 4f       	sbci	r21, 0xFF	; 255
    37e0:	58 a3       	std	Y+32, r21	; 0x20
    37e2:	4f 8f       	std	Y+31, r20	; 0x1f
    37e4:	5b a1       	ldd	r21, Y+35	; 0x23
    37e6:	51 50       	subi	r21, 0x01	; 1
    37e8:	5b a3       	std	Y+35, r21	; 0x23
    37ea:	8b a1       	ldd	r24, Y+35	; 0x23
    37ec:	88 23       	and	r24, r24
    37ee:	41 f7       	brne	.-48     	; 0x37c0 <Server_GetClient+0xde>
}
    37f0:	88 8d       	ldd	r24, Y+24	; 0x18
    37f2:	99 8d       	ldd	r25, Y+25	; 0x19
    37f4:	a3 96       	adiw	r28, 0x23	; 35
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <ReceiveClient>:

static void ReceiveClient(CLIENT_PROFILE* client)
{
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	00 d0       	rcall	.+0      	; 0x3810 <ReceiveClient+0xa>
    3810:	00 d0       	rcall	.+0      	; 0x3812 <ReceiveClient+0xc>
    3812:	0f 92       	push	r0
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	9d 83       	std	Y+5, r25	; 0x05
    381a:	8c 83       	std	Y+4, r24	; 0x04
	uint8* PTR = (uint8*)client;
    381c:	8c 81       	ldd	r24, Y+4	; 0x04
    381e:	9d 81       	ldd	r25, Y+5	; 0x05
    3820:	9b 83       	std	Y+3, r25	; 0x03
    3822:	8a 83       	std	Y+2, r24	; 0x02

	for(uint8 count = 0; count < ClientSize; count++)
    3824:	19 82       	std	Y+1, r1	; 0x01
    3826:	0f c0       	rjmp	.+30     	; 0x3846 <ReceiveClient+0x40>
	{
		PTR[count] = GetByte;
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	28 2f       	mov	r18, r24
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	9b 81       	ldd	r25, Y+3	; 0x03
    3832:	8c 01       	movw	r16, r24
    3834:	02 0f       	add	r16, r18
    3836:	13 1f       	adc	r17, r19
    3838:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    383c:	f8 01       	movw	r30, r16
    383e:	80 83       	st	Z, r24

static void ReceiveClient(CLIENT_PROFILE* client)
{
	uint8* PTR = (uint8*)client;

	for(uint8 count = 0; count < ClientSize; count++)
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	8f 5f       	subi	r24, 0xFF	; 255
    3844:	89 83       	std	Y+1, r24	; 0x01
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	80 31       	cpi	r24, 0x10	; 16
    384a:	70 f3       	brcs	.-36     	; 0x3828 <ReceiveClient+0x22>
	{
		PTR[count] = GetByte;
	}
}
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	cf 91       	pop	r28
    3858:	df 91       	pop	r29
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	08 95       	ret

00003860 <SendClient>:

static Std_ReturnType SendClient(uint8 id, uint8 PassCashVar)
{
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	c8 54       	subi	r28, 0x48	; 72
    386a:	d0 40       	sbci	r29, 0x00	; 0
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	8a ab       	std	Y+50, r24	; 0x32
    3878:	6b ab       	std	Y+51, r22	; 0x33
	Std_ReturnType Return = E_NOT_OK;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	89 a3       	std	Y+33, r24	; 0x21
	CLIENT_PROFILE Client;
	uint8* PTR;

	Client = Server_GetClient(id, &Return);
    387e:	ce 01       	movw	r24, r28
    3880:	c4 96       	adiw	r24, 0x34	; 52
    3882:	9e 01       	movw	r18, r28
    3884:	2f 5d       	subi	r18, 0xDF	; 223
    3886:	3f 4f       	sbci	r19, 0xFF	; 255
    3888:	6a a9       	ldd	r22, Y+50	; 0x32
    388a:	a9 01       	movw	r20, r18
    388c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Server_GetClient>
    3890:	ce 01       	movw	r24, r28
    3892:	82 96       	adiw	r24, 0x22	; 34
    3894:	26 96       	adiw	r28, 0x06	; 6
    3896:	9f af       	std	Y+63, r25	; 0x3f
    3898:	8e af       	std	Y+62, r24	; 0x3e
    389a:	26 97       	sbiw	r28, 0x06	; 6
    389c:	fe 01       	movw	r30, r28
    389e:	f4 96       	adiw	r30, 0x34	; 52
    38a0:	28 96       	adiw	r28, 0x08	; 8
    38a2:	ff af       	std	Y+63, r31	; 0x3f
    38a4:	ee af       	std	Y+62, r30	; 0x3e
    38a6:	28 97       	sbiw	r28, 0x08	; 8
    38a8:	f0 e1       	ldi	r31, 0x10	; 16
    38aa:	29 96       	adiw	r28, 0x09	; 9
    38ac:	ff af       	std	Y+63, r31	; 0x3f
    38ae:	29 97       	sbiw	r28, 0x09	; 9
    38b0:	28 96       	adiw	r28, 0x08	; 8
    38b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    38b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    38b6:	28 97       	sbiw	r28, 0x08	; 8
    38b8:	00 80       	ld	r0, Z
    38ba:	28 96       	adiw	r28, 0x08	; 8
    38bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    38be:	9f ad       	ldd	r25, Y+63	; 0x3f
    38c0:	28 97       	sbiw	r28, 0x08	; 8
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	28 96       	adiw	r28, 0x08	; 8
    38c6:	9f af       	std	Y+63, r25	; 0x3f
    38c8:	8e af       	std	Y+62, r24	; 0x3e
    38ca:	28 97       	sbiw	r28, 0x08	; 8
    38cc:	26 96       	adiw	r28, 0x06	; 6
    38ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    38d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    38d2:	26 97       	sbiw	r28, 0x06	; 6
    38d4:	00 82       	st	Z, r0
    38d6:	26 96       	adiw	r28, 0x06	; 6
    38d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    38da:	9f ad       	ldd	r25, Y+63	; 0x3f
    38dc:	26 97       	sbiw	r28, 0x06	; 6
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	26 96       	adiw	r28, 0x06	; 6
    38e2:	9f af       	std	Y+63, r25	; 0x3f
    38e4:	8e af       	std	Y+62, r24	; 0x3e
    38e6:	26 97       	sbiw	r28, 0x06	; 6
    38e8:	29 96       	adiw	r28, 0x09	; 9
    38ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    38ec:	29 97       	sbiw	r28, 0x09	; 9
    38ee:	91 50       	subi	r25, 0x01	; 1
    38f0:	29 96       	adiw	r28, 0x09	; 9
    38f2:	9f af       	std	Y+63, r25	; 0x3f
    38f4:	29 97       	sbiw	r28, 0x09	; 9
    38f6:	29 96       	adiw	r28, 0x09	; 9
    38f8:	ef ad       	ldd	r30, Y+63	; 0x3f
    38fa:	29 97       	sbiw	r28, 0x09	; 9
    38fc:	ee 23       	and	r30, r30
    38fe:	c1 f6       	brne	.-80     	; 0x38b0 <SendClient+0x50>
	PTR = (uint8*)(&Client);
    3900:	ce 01       	movw	r24, r28
    3902:	82 96       	adiw	r24, 0x22	; 34
    3904:	98 a3       	std	Y+32, r25	; 0x20
    3906:	8f 8f       	std	Y+31, r24	; 0x1f

	if(PassCashVar == PASS)
    3908:	8b a9       	ldd	r24, Y+51	; 0x33
    390a:	88 23       	and	r24, r24
    390c:	09 f0       	breq	.+2      	; 0x3910 <SendClient+0xb0>
    390e:	87 c0       	rjmp	.+270    	; 0x3a1e <SendClient+0x1be>
	{
		for(uint8 count = 0; count < PassSize; count++)
    3910:	1e 8e       	std	Y+30, r1	; 0x1e
    3912:	80 c0       	rjmp	.+256    	; 0x3a14 <SendClient+0x1b4>
		{
			SendByte(Client.Pass[count]);
    3914:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	ce 01       	movw	r24, r28
    391c:	8a 96       	adiw	r24, 0x2a	; 42
    391e:	fc 01       	movw	r30, r24
    3920:	e2 0f       	add	r30, r18
    3922:	f3 1f       	adc	r31, r19
    3924:	80 81       	ld	r24, Z
    3926:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	a0 e2       	ldi	r26, 0x20	; 32
    3930:	b1 e4       	ldi	r27, 0x41	; 65
    3932:	89 8f       	std	Y+25, r24	; 0x19
    3934:	9a 8f       	std	Y+26, r25	; 0x1a
    3936:	ab 8f       	std	Y+27, r26	; 0x1b
    3938:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393a:	69 8d       	ldd	r22, Y+25	; 0x19
    393c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    393e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3942:	2d ec       	ldi	r18, 0xCD	; 205
    3944:	3c ec       	ldi	r19, 0xCC	; 204
    3946:	4c e2       	ldi	r20, 0x2C	; 44
    3948:	55 e4       	ldi	r21, 0x45	; 69
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	8d 8b       	std	Y+21, r24	; 0x15
    3954:	9e 8b       	std	Y+22, r25	; 0x16
    3956:	af 8b       	std	Y+23, r26	; 0x17
    3958:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    395a:	6d 89       	ldd	r22, Y+21	; 0x15
    395c:	7e 89       	ldd	r23, Y+22	; 0x16
    395e:	8f 89       	ldd	r24, Y+23	; 0x17
    3960:	98 8d       	ldd	r25, Y+24	; 0x18
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e8       	ldi	r20, 0x80	; 128
    3968:	5f e3       	ldi	r21, 0x3F	; 63
    396a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    396e:	88 23       	and	r24, r24
    3970:	2c f4       	brge	.+10     	; 0x397c <SendClient+0x11c>
		__ticks = 1;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	9c 8b       	std	Y+20, r25	; 0x14
    3978:	8b 8b       	std	Y+19, r24	; 0x13
    397a:	3f c0       	rjmp	.+126    	; 0x39fa <SendClient+0x19a>
	else if (__tmp > 65535)
    397c:	6d 89       	ldd	r22, Y+21	; 0x15
    397e:	7e 89       	ldd	r23, Y+22	; 0x16
    3980:	8f 89       	ldd	r24, Y+23	; 0x17
    3982:	98 8d       	ldd	r25, Y+24	; 0x18
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	3f ef       	ldi	r19, 0xFF	; 255
    3988:	4f e7       	ldi	r20, 0x7F	; 127
    398a:	57 e4       	ldi	r21, 0x47	; 71
    398c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3990:	18 16       	cp	r1, r24
    3992:	4c f5       	brge	.+82     	; 0x39e6 <SendClient+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3994:	69 8d       	ldd	r22, Y+25	; 0x19
    3996:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e2       	ldi	r20, 0x20	; 32
    39a2:	51 e4       	ldi	r21, 0x41	; 65
    39a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9c 8b       	std	Y+20, r25	; 0x14
    39ba:	8b 8b       	std	Y+19, r24	; 0x13
    39bc:	0f c0       	rjmp	.+30     	; 0x39dc <SendClient+0x17c>
    39be:	84 e1       	ldi	r24, 0x14	; 20
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	9a 8b       	std	Y+18, r25	; 0x12
    39c4:	89 8b       	std	Y+17, r24	; 0x11
    39c6:	89 89       	ldd	r24, Y+17	; 0x11
    39c8:	9a 89       	ldd	r25, Y+18	; 0x12
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <SendClient+0x16a>
    39ce:	9a 8b       	std	Y+18, r25	; 0x12
    39d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d2:	8b 89       	ldd	r24, Y+19	; 0x13
    39d4:	9c 89       	ldd	r25, Y+20	; 0x14
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	9c 8b       	std	Y+20, r25	; 0x14
    39da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39dc:	8b 89       	ldd	r24, Y+19	; 0x13
    39de:	9c 89       	ldd	r25, Y+20	; 0x14
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	69 f7       	brne	.-38     	; 0x39be <SendClient+0x15e>
    39e4:	14 c0       	rjmp	.+40     	; 0x3a0e <SendClient+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e6:	6d 89       	ldd	r22, Y+21	; 0x15
    39e8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ea:	8f 89       	ldd	r24, Y+23	; 0x17
    39ec:	98 8d       	ldd	r25, Y+24	; 0x18
    39ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	9c 8b       	std	Y+20, r25	; 0x14
    39f8:	8b 8b       	std	Y+19, r24	; 0x13
    39fa:	8b 89       	ldd	r24, Y+19	; 0x13
    39fc:	9c 89       	ldd	r25, Y+20	; 0x14
    39fe:	98 8b       	std	Y+16, r25	; 0x10
    3a00:	8f 87       	std	Y+15, r24	; 0x0f
    3a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a04:	98 89       	ldd	r25, Y+16	; 0x10
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <SendClient+0x1a6>
    3a0a:	98 8b       	std	Y+16, r25	; 0x10
    3a0c:	8f 87       	std	Y+15, r24	; 0x0f
	Client = Server_GetClient(id, &Return);
	PTR = (uint8*)(&Client);

	if(PassCashVar == PASS)
	{
		for(uint8 count = 0; count < PassSize; count++)
    3a0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a10:	8f 5f       	subi	r24, 0xFF	; 255
    3a12:	8e 8f       	std	Y+30, r24	; 0x1e
    3a14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a16:	85 30       	cpi	r24, 0x05	; 5
    3a18:	08 f4       	brcc	.+2      	; 0x3a1c <SendClient+0x1bc>
    3a1a:	7c cf       	rjmp	.-264    	; 0x3914 <SendClient+0xb4>
    3a1c:	8d c0       	rjmp	.+282    	; 0x3b38 <SendClient+0x2d8>
		{
			SendByte(Client.Pass[count]);
			Delay(10);
		}
	}
	else if(PassCashVar == CASH)
    3a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a20:	81 30       	cpi	r24, 0x01	; 1
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <SendClient+0x1c6>
    3a24:	87 c0       	rjmp	.+270    	; 0x3b34 <SendClient+0x2d4>
	{
		for(uint8 count = 0; count < CashSize; count++)
    3a26:	1d 8e       	std	Y+29, r1	; 0x1d
    3a28:	80 c0       	rjmp	.+256    	; 0x3b2a <SendClient+0x2ca>
		{
			SendByte(Client.Cash[count]);
    3a2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a2c:	28 2f       	mov	r18, r24
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	ce 01       	movw	r24, r28
    3a32:	82 96       	adiw	r24, 0x22	; 34
    3a34:	fc 01       	movw	r30, r24
    3a36:	e2 0f       	add	r30, r18
    3a38:	f3 1f       	adc	r31, r19
    3a3a:	80 81       	ld	r24, Z
    3a3c:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 e2       	ldi	r26, 0x20	; 32
    3a46:	b1 e4       	ldi	r27, 0x41	; 65
    3a48:	8b 87       	std	Y+11, r24	; 0x0b
    3a4a:	9c 87       	std	Y+12, r25	; 0x0c
    3a4c:	ad 87       	std	Y+13, r26	; 0x0d
    3a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a58:	2d ec       	ldi	r18, 0xCD	; 205
    3a5a:	3c ec       	ldi	r19, 0xCC	; 204
    3a5c:	4c e2       	ldi	r20, 0x2C	; 44
    3a5e:	55 e4       	ldi	r21, 0x45	; 69
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	8f 83       	std	Y+7, r24	; 0x07
    3a6a:	98 87       	std	Y+8, r25	; 0x08
    3a6c:	a9 87       	std	Y+9, r26	; 0x09
    3a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a70:	6f 81       	ldd	r22, Y+7	; 0x07
    3a72:	78 85       	ldd	r23, Y+8	; 0x08
    3a74:	89 85       	ldd	r24, Y+9	; 0x09
    3a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	2c f4       	brge	.+10     	; 0x3a92 <SendClient+0x232>
		__ticks = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9e 83       	std	Y+6, r25	; 0x06
    3a8e:	8d 83       	std	Y+5, r24	; 0x05
    3a90:	3f c0       	rjmp	.+126    	; 0x3b10 <SendClient+0x2b0>
	else if (__tmp > 65535)
    3a92:	6f 81       	ldd	r22, Y+7	; 0x07
    3a94:	78 85       	ldd	r23, Y+8	; 0x08
    3a96:	89 85       	ldd	r24, Y+9	; 0x09
    3a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	4c f5       	brge	.+82     	; 0x3afc <SendClient+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e2       	ldi	r20, 0x20	; 32
    3ab8:	51 e4       	ldi	r21, 0x41	; 65
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	9e 83       	std	Y+6, r25	; 0x06
    3ad0:	8d 83       	std	Y+5, r24	; 0x05
    3ad2:	0f c0       	rjmp	.+30     	; 0x3af2 <SendClient+0x292>
    3ad4:	84 e1       	ldi	r24, 0x14	; 20
    3ad6:	91 e0       	ldi	r25, 0x01	; 1
    3ad8:	9c 83       	std	Y+4, r25	; 0x04
    3ada:	8b 83       	std	Y+3, r24	; 0x03
    3adc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ade:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <SendClient+0x280>
    3ae4:	9c 83       	std	Y+4, r25	; 0x04
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aea:	9e 81       	ldd	r25, Y+6	; 0x06
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <SendClient+0x274>
    3afa:	14 c0       	rjmp	.+40     	; 0x3b24 <SendClient+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	89 85       	ldd	r24, Y+9	; 0x09
    3b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	89 83       	std	Y+1, r24	; 0x01
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <SendClient+0x2bc>
    3b20:	9a 83       	std	Y+2, r25	; 0x02
    3b22:	89 83       	std	Y+1, r24	; 0x01
			Delay(10);
		}
	}
	else if(PassCashVar == CASH)
	{
		for(uint8 count = 0; count < CashSize; count++)
    3b24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b26:	8f 5f       	subi	r24, 0xFF	; 255
    3b28:	8d 8f       	std	Y+29, r24	; 0x1d
    3b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b2c:	88 30       	cpi	r24, 0x08	; 8
    3b2e:	08 f4       	brcc	.+2      	; 0x3b32 <SendClient+0x2d2>
    3b30:	7c cf       	rjmp	.-264    	; 0x3a2a <SendClient+0x1ca>
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <SendClient+0x2d8>
			Delay(10);
		}
	}
	else
	{
		Return = E_NOT_OK;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	89 a3       	std	Y+33, r24	; 0x21
		//error message
	}

	return Return;
    3b38:	89 a1       	ldd	r24, Y+33	; 0x21
}
    3b3a:	c8 5b       	subi	r28, 0xB8	; 184
    3b3c:	df 4f       	sbci	r29, 0xFF	; 255
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	cd bf       	out	0x3d, r28	; 61
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <Server_HandleRestartCommand>:

static void Server_HandleRestartCommand(void)
{
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	c8 55       	subi	r28, 0x58	; 88
    3b5c:	d0 40       	sbci	r29, 0x00	; 0
    3b5e:	0f b6       	in	r0, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	cd bf       	out	0x3d, r28	; 61
	uint16 StartAddress = TreeStartAddr;
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e9 5a       	subi	r30, 0xA9	; 169
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	82 e0       	ldi	r24, 0x02	; 2
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	80 83       	st	Z, r24

	SetDemultiplexerBST();
    3b76:	83 e0       	ldi	r24, 0x03	; 3
    3b78:	67 e0       	ldi	r22, 0x07	; 7
    3b7a:	40 ee       	ldi	r20, 0xE0	; 224
    3b7c:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_WritePins>

	_ReadByteIn(TreeCounterAdd, Tree_Counter);
    3b80:	24 e0       	ldi	r18, 0x04	; 4
    3b82:	37 e0       	ldi	r19, 0x07	; 7
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	b9 01       	movw	r22, r18
    3b8a:	0e 94 dd 26 	call	0x4dba	; 0x4dba <EEPROM_readByte>
    3b8e:	81 30       	cpi	r24, 0x01	; 1
    3b90:	b9 f7       	brne	.-18     	; 0x3b80 <Server_HandleRestartCommand+0x32>
    3b92:	fe 01       	movw	r30, r28
    3b94:	ef 5a       	subi	r30, 0xAF	; 175
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	a0 e2       	ldi	r26, 0x20	; 32
    3b9e:	b1 e4       	ldi	r27, 0x41	; 65
    3ba0:	80 83       	st	Z, r24
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	a2 83       	std	Z+2, r26	; 0x02
    3ba6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba8:	8e 01       	movw	r16, r28
    3baa:	03 5b       	subi	r16, 0xB3	; 179
    3bac:	1f 4f       	sbci	r17, 0xFF	; 255
    3bae:	fe 01       	movw	r30, r28
    3bb0:	ef 5a       	subi	r30, 0xAF	; 175
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	60 81       	ld	r22, Z
    3bb6:	71 81       	ldd	r23, Z+1	; 0x01
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	93 81       	ldd	r25, Z+3	; 0x03
    3bbc:	2d ec       	ldi	r18, 0xCD	; 205
    3bbe:	3c ec       	ldi	r19, 0xCC	; 204
    3bc0:	4c e2       	ldi	r20, 0x2C	; 44
    3bc2:	55 e4       	ldi	r21, 0x45	; 69
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	f8 01       	movw	r30, r16
    3bce:	80 83       	st	Z, r24
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	a2 83       	std	Z+2, r26	; 0x02
    3bd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e3 5b       	subi	r30, 0xB3	; 179
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	44 f4       	brge	.+16     	; 0x3c04 <Server_HandleRestartCommand+0xb6>
		__ticks = 1;
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e5 5b       	subi	r30, 0xB5	; 181
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	64 c0       	rjmp	.+200    	; 0x3ccc <Server_HandleRestartCommand+0x17e>
	else if (__tmp > 65535)
    3c04:	fe 01       	movw	r30, r28
    3c06:	e3 5b       	subi	r30, 0xB3	; 179
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	3f ef       	ldi	r19, 0xFF	; 255
    3c16:	4f e7       	ldi	r20, 0x7F	; 127
    3c18:	57 e4       	ldi	r21, 0x47	; 71
    3c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c1e:	18 16       	cp	r1, r24
    3c20:	0c f0       	brlt	.+2      	; 0x3c24 <Server_HandleRestartCommand+0xd6>
    3c22:	43 c0       	rjmp	.+134    	; 0x3caa <Server_HandleRestartCommand+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c24:	fe 01       	movw	r30, r28
    3c26:	ef 5a       	subi	r30, 0xAF	; 175
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e2       	ldi	r20, 0x20	; 32
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8e 01       	movw	r16, r28
    3c44:	05 5b       	subi	r16, 0xB5	; 181
    3c46:	1f 4f       	sbci	r17, 0xFF	; 255
    3c48:	bc 01       	movw	r22, r24
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	80 83       	st	Z, r24
    3c5a:	1f c0       	rjmp	.+62     	; 0x3c9a <Server_HandleRestartCommand+0x14c>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e7 5b       	subi	r30, 0xB7	; 183
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	84 e1       	ldi	r24, 0x14	; 20
    3c64:	91 e0       	ldi	r25, 0x01	; 1
    3c66:	91 83       	std	Z+1, r25	; 0x01
    3c68:	80 83       	st	Z, r24
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e7 5b       	subi	r30, 0xB7	; 183
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	91 81       	ldd	r25, Z+1	; 0x01
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	f1 f7       	brne	.-4      	; 0x3c74 <Server_HandleRestartCommand+0x126>
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e7 5b       	subi	r30, 0xB7	; 183
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c82:	de 01       	movw	r26, r28
    3c84:	a5 5b       	subi	r26, 0xB5	; 181
    3c86:	bf 4f       	sbci	r27, 0xFF	; 255
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e5 5b       	subi	r30, 0xB5	; 181
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	11 96       	adiw	r26, 0x01	; 1
    3c96:	9c 93       	st	X, r25
    3c98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e5 5b       	subi	r30, 0xB5	; 181
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	80 81       	ld	r24, Z
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	d1 f6       	brne	.-76     	; 0x3c5c <Server_HandleRestartCommand+0x10e>
    3ca8:	28 c0       	rjmp	.+80     	; 0x3cfa <Server_HandleRestartCommand+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3caa:	8e 01       	movw	r16, r28
    3cac:	05 5b       	subi	r16, 0xB5	; 181
    3cae:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	e3 5b       	subi	r30, 0xB3	; 179
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	60 81       	ld	r22, Z
    3cb8:	71 81       	ldd	r23, Z+1	; 0x01
    3cba:	82 81       	ldd	r24, Z+2	; 0x02
    3cbc:	93 81       	ldd	r25, Z+3	; 0x03
    3cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
    3ccc:	de 01       	movw	r26, r28
    3cce:	a9 5b       	subi	r26, 0xB9	; 185
    3cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e5 5b       	subi	r30, 0xB5	; 181
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	11 96       	adiw	r26, 0x01	; 1
    3cde:	9c 93       	st	X, r25
    3ce0:	8e 93       	st	-X, r24
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e9 5b       	subi	r30, 0xB9	; 185
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 81       	ld	r24, Z
    3cea:	91 81       	ldd	r25, Z+1	; 0x01
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <Server_HandleRestartCommand+0x19e>
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	e9 5b       	subi	r30, 0xB9	; 185
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24

	if(Tree_Counter == 0)
    3cfa:	80 91 04 07 	lds	r24, 0x0704
    3cfe:	88 23       	and	r24, r24
    3d00:	21 f4       	brne	.+8      	; 0x3d0a <Server_HandleRestartCommand+0x1bc>
	{
		SendCommand(Server_Success);
    3d02:	89 e4       	ldi	r24, 0x49	; 73
    3d04:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    3d08:	bd c2       	rjmp	.+1402   	; 0x4284 <Server_HandleRestartCommand+0x736>
		return;
	}
	else if(Tree_Counter == 0xFF)
    3d0a:	80 91 04 07 	lds	r24, 0x0704
    3d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d10:	09 f0       	breq	.+2      	; 0x3d14 <Server_HandleRestartCommand+0x1c6>
    3d12:	90 c0       	rjmp	.+288    	; 0x3e34 <Server_HandleRestartCommand+0x2e6>
	{
		SendCommand(Server_Success);
    3d14:	89 e4       	ldi	r24, 0x49	; 73
    3d16:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
		_StoreByte(TreeCounterAdd, 0)
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	60 e0       	ldi	r22, 0x00	; 0
    3d20:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	c9 f7       	brne	.-14     	; 0x3d1a <Server_HandleRestartCommand+0x1cc>
    3d28:	fe 01       	movw	r30, r28
    3d2a:	ed 5b       	subi	r30, 0xBD	; 189
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	a0 e2       	ldi	r26, 0x20	; 32
    3d34:	b1 e4       	ldi	r27, 0x41	; 65
    3d36:	80 83       	st	Z, r24
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	a2 83       	std	Z+2, r26	; 0x02
    3d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3e:	8e 01       	movw	r16, r28
    3d40:	01 5c       	subi	r16, 0xC1	; 193
    3d42:	1f 4f       	sbci	r17, 0xFF	; 255
    3d44:	fe 01       	movw	r30, r28
    3d46:	ed 5b       	subi	r30, 0xBD	; 189
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	2d ec       	ldi	r18, 0xCD	; 205
    3d54:	3c ec       	ldi	r19, 0xCC	; 204
    3d56:	4c e2       	ldi	r20, 0x2C	; 44
    3d58:	55 e4       	ldi	r21, 0x45	; 69
    3d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	f8 01       	movw	r30, r16
    3d64:	80 83       	st	Z, r24
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	a2 83       	std	Z+2, r26	; 0x02
    3d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	ff 96       	adiw	r30, 0x3f	; 63
    3d70:	60 81       	ld	r22, Z
    3d72:	71 81       	ldd	r23, Z+1	; 0x01
    3d74:	82 81       	ldd	r24, Z+2	; 0x02
    3d76:	93 81       	ldd	r25, Z+3	; 0x03
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	40 e8       	ldi	r20, 0x80	; 128
    3d7e:	5f e3       	ldi	r21, 0x3F	; 63
    3d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d84:	88 23       	and	r24, r24
    3d86:	2c f4       	brge	.+10     	; 0x3d92 <Server_HandleRestartCommand+0x244>
		__ticks = 1;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	9e af       	std	Y+62, r25	; 0x3e
    3d8e:	8d af       	std	Y+61, r24	; 0x3d
    3d90:	46 c0       	rjmp	.+140    	; 0x3e1e <Server_HandleRestartCommand+0x2d0>
	else if (__tmp > 65535)
    3d92:	fe 01       	movw	r30, r28
    3d94:	ff 96       	adiw	r30, 0x3f	; 63
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	3f ef       	ldi	r19, 0xFF	; 255
    3da2:	4f e7       	ldi	r20, 0x7F	; 127
    3da4:	57 e4       	ldi	r21, 0x47	; 71
    3da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3daa:	18 16       	cp	r1, r24
    3dac:	64 f5       	brge	.+88     	; 0x3e06 <Server_HandleRestartCommand+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dae:	fe 01       	movw	r30, r28
    3db0:	ed 5b       	subi	r30, 0xBD	; 189
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e2       	ldi	r20, 0x20	; 32
    3dc2:	51 e4       	ldi	r21, 0x41	; 65
    3dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	bc 01       	movw	r22, r24
    3dce:	cd 01       	movw	r24, r26
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	9e af       	std	Y+62, r25	; 0x3e
    3dda:	8d af       	std	Y+61, r24	; 0x3d
    3ddc:	0f c0       	rjmp	.+30     	; 0x3dfc <Server_HandleRestartCommand+0x2ae>
    3dde:	84 e1       	ldi	r24, 0x14	; 20
    3de0:	91 e0       	ldi	r25, 0x01	; 1
    3de2:	9c af       	std	Y+60, r25	; 0x3c
    3de4:	8b af       	std	Y+59, r24	; 0x3b
    3de6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3de8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dea:	01 97       	sbiw	r24, 0x01	; 1
    3dec:	f1 f7       	brne	.-4      	; 0x3dea <Server_HandleRestartCommand+0x29c>
    3dee:	9c af       	std	Y+60, r25	; 0x3c
    3df0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3df4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	9e af       	std	Y+62, r25	; 0x3e
    3dfa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	69 f7       	brne	.-38     	; 0x3dde <Server_HandleRestartCommand+0x290>
    3e04:	3f c2       	rjmp	.+1150   	; 0x4284 <Server_HandleRestartCommand+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e06:	fe 01       	movw	r30, r28
    3e08:	ff 96       	adiw	r30, 0x3f	; 63
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	9e af       	std	Y+62, r25	; 0x3e
    3e1c:	8d af       	std	Y+61, r24	; 0x3d
    3e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e20:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e22:	9a af       	std	Y+58, r25	; 0x3a
    3e24:	89 af       	std	Y+57, r24	; 0x39
    3e26:	89 ad       	ldd	r24, Y+57	; 0x39
    3e28:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <Server_HandleRestartCommand+0x2dc>
    3e2e:	9a af       	std	Y+58, r25	; 0x3a
    3e30:	89 af       	std	Y+57, r24	; 0x39
    3e32:	28 c2       	rjmp	.+1104   	; 0x4284 <Server_HandleRestartCommand+0x736>
		return;
	}
	else
	{
		_StoreByte(TreeCounterAdd, 0);
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	60 e0       	ldi	r22, 0x00	; 0
    3e3a:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    3e3e:	81 30       	cpi	r24, 0x01	; 1
    3e40:	c9 f7       	brne	.-14     	; 0x3e34 <Server_HandleRestartCommand+0x2e6>
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	a0 e2       	ldi	r26, 0x20	; 32
    3e48:	b1 e4       	ldi	r27, 0x41	; 65
    3e4a:	8d ab       	std	Y+53, r24	; 0x35
    3e4c:	9e ab       	std	Y+54, r25	; 0x36
    3e4e:	af ab       	std	Y+55, r26	; 0x37
    3e50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e52:	6d a9       	ldd	r22, Y+53	; 0x35
    3e54:	7e a9       	ldd	r23, Y+54	; 0x36
    3e56:	8f a9       	ldd	r24, Y+55	; 0x37
    3e58:	98 ad       	ldd	r25, Y+56	; 0x38
    3e5a:	2d ec       	ldi	r18, 0xCD	; 205
    3e5c:	3c ec       	ldi	r19, 0xCC	; 204
    3e5e:	4c e2       	ldi	r20, 0x2C	; 44
    3e60:	55 e4       	ldi	r21, 0x45	; 69
    3e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	89 ab       	std	Y+49, r24	; 0x31
    3e6c:	9a ab       	std	Y+50, r25	; 0x32
    3e6e:	ab ab       	std	Y+51, r26	; 0x33
    3e70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e72:	69 a9       	ldd	r22, Y+49	; 0x31
    3e74:	7a a9       	ldd	r23, Y+50	; 0x32
    3e76:	8b a9       	ldd	r24, Y+51	; 0x33
    3e78:	9c a9       	ldd	r25, Y+52	; 0x34
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e8       	ldi	r20, 0x80	; 128
    3e80:	5f e3       	ldi	r21, 0x3F	; 63
    3e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e86:	88 23       	and	r24, r24
    3e88:	2c f4       	brge	.+10     	; 0x3e94 <Server_HandleRestartCommand+0x346>
		__ticks = 1;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	98 ab       	std	Y+48, r25	; 0x30
    3e90:	8f a7       	std	Y+47, r24	; 0x2f
    3e92:	3f c0       	rjmp	.+126    	; 0x3f12 <Server_HandleRestartCommand+0x3c4>
	else if (__tmp > 65535)
    3e94:	69 a9       	ldd	r22, Y+49	; 0x31
    3e96:	7a a9       	ldd	r23, Y+50	; 0x32
    3e98:	8b a9       	ldd	r24, Y+51	; 0x33
    3e9a:	9c a9       	ldd	r25, Y+52	; 0x34
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ea0:	4f e7       	ldi	r20, 0x7F	; 127
    3ea2:	57 e4       	ldi	r21, 0x47	; 71
    3ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ea8:	18 16       	cp	r1, r24
    3eaa:	4c f5       	brge	.+82     	; 0x3efe <Server_HandleRestartCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eac:	6d a9       	ldd	r22, Y+53	; 0x35
    3eae:	7e a9       	ldd	r23, Y+54	; 0x36
    3eb0:	8f a9       	ldd	r24, Y+55	; 0x37
    3eb2:	98 ad       	ldd	r25, Y+56	; 0x38
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e2       	ldi	r20, 0x20	; 32
    3eba:	51 e4       	ldi	r21, 0x41	; 65
    3ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	bc 01       	movw	r22, r24
    3ec6:	cd 01       	movw	r24, r26
    3ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	98 ab       	std	Y+48, r25	; 0x30
    3ed2:	8f a7       	std	Y+47, r24	; 0x2f
    3ed4:	0f c0       	rjmp	.+30     	; 0x3ef4 <Server_HandleRestartCommand+0x3a6>
    3ed6:	84 e1       	ldi	r24, 0x14	; 20
    3ed8:	91 e0       	ldi	r25, 0x01	; 1
    3eda:	9e a7       	std	Y+46, r25	; 0x2e
    3edc:	8d a7       	std	Y+45, r24	; 0x2d
    3ede:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ee0:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	f1 f7       	brne	.-4      	; 0x3ee2 <Server_HandleRestartCommand+0x394>
    3ee6:	9e a7       	std	Y+46, r25	; 0x2e
    3ee8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eea:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eec:	98 a9       	ldd	r25, Y+48	; 0x30
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	98 ab       	std	Y+48, r25	; 0x30
    3ef2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ef8:	00 97       	sbiw	r24, 0x00	; 0
    3efa:	69 f7       	brne	.-38     	; 0x3ed6 <Server_HandleRestartCommand+0x388>
    3efc:	14 c0       	rjmp	.+40     	; 0x3f26 <Server_HandleRestartCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3efe:	69 a9       	ldd	r22, Y+49	; 0x31
    3f00:	7a a9       	ldd	r23, Y+50	; 0x32
    3f02:	8b a9       	ldd	r24, Y+51	; 0x33
    3f04:	9c a9       	ldd	r25, Y+52	; 0x34
    3f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	98 ab       	std	Y+48, r25	; 0x30
    3f10:	8f a7       	std	Y+47, r24	; 0x2f
    3f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f14:	98 a9       	ldd	r25, Y+48	; 0x30
    3f16:	9c a7       	std	Y+44, r25	; 0x2c
    3f18:	8b a7       	std	Y+43, r24	; 0x2b
    3f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <Server_HandleRestartCommand+0x3d0>
    3f22:	9c a7       	std	Y+44, r25	; 0x2c
    3f24:	8b a7       	std	Y+43, r24	; 0x2b
		_StoreByte(RootIndexAdd, 0);
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	c9 f7       	brne	.-14     	; 0x3f26 <Server_HandleRestartCommand+0x3d8>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	a0 e2       	ldi	r26, 0x20	; 32
    3f3a:	b1 e4       	ldi	r27, 0x41	; 65
    3f3c:	8f a3       	std	Y+39, r24	; 0x27
    3f3e:	98 a7       	std	Y+40, r25	; 0x28
    3f40:	a9 a7       	std	Y+41, r26	; 0x29
    3f42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f44:	6f a1       	ldd	r22, Y+39	; 0x27
    3f46:	78 a5       	ldd	r23, Y+40	; 0x28
    3f48:	89 a5       	ldd	r24, Y+41	; 0x29
    3f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f4c:	2d ec       	ldi	r18, 0xCD	; 205
    3f4e:	3c ec       	ldi	r19, 0xCC	; 204
    3f50:	4c e2       	ldi	r20, 0x2C	; 44
    3f52:	55 e4       	ldi	r21, 0x45	; 69
    3f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	8b a3       	std	Y+35, r24	; 0x23
    3f5e:	9c a3       	std	Y+36, r25	; 0x24
    3f60:	ad a3       	std	Y+37, r26	; 0x25
    3f62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f64:	6b a1       	ldd	r22, Y+35	; 0x23
    3f66:	7c a1       	ldd	r23, Y+36	; 0x24
    3f68:	8d a1       	ldd	r24, Y+37	; 0x25
    3f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e8       	ldi	r20, 0x80	; 128
    3f72:	5f e3       	ldi	r21, 0x3F	; 63
    3f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f78:	88 23       	and	r24, r24
    3f7a:	2c f4       	brge	.+10     	; 0x3f86 <Server_HandleRestartCommand+0x438>
		__ticks = 1;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	9a a3       	std	Y+34, r25	; 0x22
    3f82:	89 a3       	std	Y+33, r24	; 0x21
    3f84:	3f c0       	rjmp	.+126    	; 0x4004 <Server_HandleRestartCommand+0x4b6>
	else if (__tmp > 65535)
    3f86:	6b a1       	ldd	r22, Y+35	; 0x23
    3f88:	7c a1       	ldd	r23, Y+36	; 0x24
    3f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	3f ef       	ldi	r19, 0xFF	; 255
    3f92:	4f e7       	ldi	r20, 0x7F	; 127
    3f94:	57 e4       	ldi	r21, 0x47	; 71
    3f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f9a:	18 16       	cp	r1, r24
    3f9c:	4c f5       	brge	.+82     	; 0x3ff0 <Server_HandleRestartCommand+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9e:	6f a1       	ldd	r22, Y+39	; 0x27
    3fa0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fa2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e2       	ldi	r20, 0x20	; 32
    3fac:	51 e4       	ldi	r21, 0x41	; 65
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9a a3       	std	Y+34, r25	; 0x22
    3fc4:	89 a3       	std	Y+33, r24	; 0x21
    3fc6:	0f c0       	rjmp	.+30     	; 0x3fe6 <Server_HandleRestartCommand+0x498>
    3fc8:	84 e1       	ldi	r24, 0x14	; 20
    3fca:	91 e0       	ldi	r25, 0x01	; 1
    3fcc:	98 a3       	std	Y+32, r25	; 0x20
    3fce:	8f 8f       	std	Y+31, r24	; 0x1f
    3fd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fd2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fd4:	01 97       	sbiw	r24, 0x01	; 1
    3fd6:	f1 f7       	brne	.-4      	; 0x3fd4 <Server_HandleRestartCommand+0x486>
    3fd8:	98 a3       	std	Y+32, r25	; 0x20
    3fda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fdc:	89 a1       	ldd	r24, Y+33	; 0x21
    3fde:	9a a1       	ldd	r25, Y+34	; 0x22
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	9a a3       	std	Y+34, r25	; 0x22
    3fe4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe6:	89 a1       	ldd	r24, Y+33	; 0x21
    3fe8:	9a a1       	ldd	r25, Y+34	; 0x22
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	69 f7       	brne	.-38     	; 0x3fc8 <Server_HandleRestartCommand+0x47a>
    3fee:	14 c0       	rjmp	.+40     	; 0x4018 <Server_HandleRestartCommand+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	9a a3       	std	Y+34, r25	; 0x22
    4002:	89 a3       	std	Y+33, r24	; 0x21
    4004:	89 a1       	ldd	r24, Y+33	; 0x21
    4006:	9a a1       	ldd	r25, Y+34	; 0x22
    4008:	9e 8f       	std	Y+30, r25	; 0x1e
    400a:	8d 8f       	std	Y+29, r24	; 0x1d
    400c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    400e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4010:	01 97       	sbiw	r24, 0x01	; 1
    4012:	f1 f7       	brne	.-4      	; 0x4010 <Server_HandleRestartCommand+0x4c2>
    4014:	9e 8f       	std	Y+30, r25	; 0x1e
    4016:	8d 8f       	std	Y+29, r24	; 0x1d
		_StoreByte(TreeStartAddr, 0);
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    4022:	81 30       	cpi	r24, 0x01	; 1
    4024:	c9 f7       	brne	.-14     	; 0x4018 <Server_HandleRestartCommand+0x4ca>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a0 e2       	ldi	r26, 0x20	; 32
    402c:	b1 e4       	ldi	r27, 0x41	; 65
    402e:	89 8f       	std	Y+25, r24	; 0x19
    4030:	9a 8f       	std	Y+26, r25	; 0x1a
    4032:	ab 8f       	std	Y+27, r26	; 0x1b
    4034:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4036:	69 8d       	ldd	r22, Y+25	; 0x19
    4038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    403a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403e:	2d ec       	ldi	r18, 0xCD	; 205
    4040:	3c ec       	ldi	r19, 0xCC	; 204
    4042:	4c e2       	ldi	r20, 0x2C	; 44
    4044:	55 e4       	ldi	r21, 0x45	; 69
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	8d 8b       	std	Y+21, r24	; 0x15
    4050:	9e 8b       	std	Y+22, r25	; 0x16
    4052:	af 8b       	std	Y+23, r26	; 0x17
    4054:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4056:	6d 89       	ldd	r22, Y+21	; 0x15
    4058:	7e 89       	ldd	r23, Y+22	; 0x16
    405a:	8f 89       	ldd	r24, Y+23	; 0x17
    405c:	98 8d       	ldd	r25, Y+24	; 0x18
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e8       	ldi	r20, 0x80	; 128
    4064:	5f e3       	ldi	r21, 0x3F	; 63
    4066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    406a:	88 23       	and	r24, r24
    406c:	2c f4       	brge	.+10     	; 0x4078 <Server_HandleRestartCommand+0x52a>
		__ticks = 1;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9c 8b       	std	Y+20, r25	; 0x14
    4074:	8b 8b       	std	Y+19, r24	; 0x13
    4076:	3f c0       	rjmp	.+126    	; 0x40f6 <Server_HandleRestartCommand+0x5a8>
	else if (__tmp > 65535)
    4078:	6d 89       	ldd	r22, Y+21	; 0x15
    407a:	7e 89       	ldd	r23, Y+22	; 0x16
    407c:	8f 89       	ldd	r24, Y+23	; 0x17
    407e:	98 8d       	ldd	r25, Y+24	; 0x18
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	3f ef       	ldi	r19, 0xFF	; 255
    4084:	4f e7       	ldi	r20, 0x7F	; 127
    4086:	57 e4       	ldi	r21, 0x47	; 71
    4088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    408c:	18 16       	cp	r1, r24
    408e:	4c f5       	brge	.+82     	; 0x40e2 <Server_HandleRestartCommand+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4090:	69 8d       	ldd	r22, Y+25	; 0x19
    4092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e2       	ldi	r20, 0x20	; 32
    409e:	51 e4       	ldi	r21, 0x41	; 65
    40a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	bc 01       	movw	r22, r24
    40aa:	cd 01       	movw	r24, r26
    40ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	9c 8b       	std	Y+20, r25	; 0x14
    40b6:	8b 8b       	std	Y+19, r24	; 0x13
    40b8:	0f c0       	rjmp	.+30     	; 0x40d8 <Server_HandleRestartCommand+0x58a>
    40ba:	84 e1       	ldi	r24, 0x14	; 20
    40bc:	91 e0       	ldi	r25, 0x01	; 1
    40be:	9a 8b       	std	Y+18, r25	; 0x12
    40c0:	89 8b       	std	Y+17, r24	; 0x11
    40c2:	89 89       	ldd	r24, Y+17	; 0x11
    40c4:	9a 89       	ldd	r25, Y+18	; 0x12
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <Server_HandleRestartCommand+0x578>
    40ca:	9a 8b       	std	Y+18, r25	; 0x12
    40cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ce:	8b 89       	ldd	r24, Y+19	; 0x13
    40d0:	9c 89       	ldd	r25, Y+20	; 0x14
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	9c 8b       	std	Y+20, r25	; 0x14
    40d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d8:	8b 89       	ldd	r24, Y+19	; 0x13
    40da:	9c 89       	ldd	r25, Y+20	; 0x14
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	69 f7       	brne	.-38     	; 0x40ba <Server_HandleRestartCommand+0x56c>
    40e0:	14 c0       	rjmp	.+40     	; 0x410a <Server_HandleRestartCommand+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e2:	6d 89       	ldd	r22, Y+21	; 0x15
    40e4:	7e 89       	ldd	r23, Y+22	; 0x16
    40e6:	8f 89       	ldd	r24, Y+23	; 0x17
    40e8:	98 8d       	ldd	r25, Y+24	; 0x18
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	9c 8b       	std	Y+20, r25	; 0x14
    40f4:	8b 8b       	std	Y+19, r24	; 0x13
    40f6:	8b 89       	ldd	r24, Y+19	; 0x13
    40f8:	9c 89       	ldd	r25, Y+20	; 0x14
    40fa:	98 8b       	std	Y+16, r25	; 0x10
    40fc:	8f 87       	std	Y+15, r24	; 0x0f
    40fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4100:	98 89       	ldd	r25, Y+16	; 0x10
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <Server_HandleRestartCommand+0x5b4>
    4106:	98 8b       	std	Y+16, r25	; 0x10
    4108:	8f 87       	std	Y+15, r24	; 0x0f
		for(uint8 count1 = 0; count1 < Tree_Counter; count1++)
    410a:	fe 01       	movw	r30, r28
    410c:	ea 5a       	subi	r30, 0xAA	; 170
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	10 82       	st	Z, r1
    4112:	a6 c0       	rjmp	.+332    	; 0x4260 <Server_HandleRestartCommand+0x712>
		{
			for(uint8 count2 = 0; count2 < NodeSize; count2++)
    4114:	fe 01       	movw	r30, r28
    4116:	eb 5a       	subi	r30, 0xAB	; 171
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	10 82       	st	Z, r1
    411c:	91 c0       	rjmp	.+290    	; 0x4240 <Server_HandleRestartCommand+0x6f2>
			{
				_StoreByte(StartAddress++, 0xFF);
    411e:	fe 01       	movw	r30, r28
    4120:	e9 5a       	subi	r30, 0xA9	; 169
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	20 81       	ld	r18, Z
    4126:	31 81       	ldd	r19, Z+1	; 0x01
    4128:	de 01       	movw	r26, r28
    412a:	a9 5a       	subi	r26, 0xA9	; 169
    412c:	bf 4f       	sbci	r27, 0xFF	; 255
    412e:	fe 01       	movw	r30, r28
    4130:	e9 5a       	subi	r30, 0xA9	; 169
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	01 96       	adiw	r24, 0x01	; 1
    413a:	8d 93       	st	X+, r24
    413c:	9c 93       	st	X, r25
    413e:	c9 01       	movw	r24, r18
    4140:	6f ef       	ldi	r22, 0xFF	; 255
    4142:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <EEPROM_writeByte>
    4146:	81 30       	cpi	r24, 0x01	; 1
    4148:	51 f7       	brne	.-44     	; 0x411e <Server_HandleRestartCommand+0x5d0>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	a0 e2       	ldi	r26, 0x20	; 32
    4150:	b1 e4       	ldi	r27, 0x41	; 65
    4152:	8b 87       	std	Y+11, r24	; 0x0b
    4154:	9c 87       	std	Y+12, r25	; 0x0c
    4156:	ad 87       	std	Y+13, r26	; 0x0d
    4158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415a:	6b 85       	ldd	r22, Y+11	; 0x0b
    415c:	7c 85       	ldd	r23, Y+12	; 0x0c
    415e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4160:	9e 85       	ldd	r25, Y+14	; 0x0e
    4162:	2d ec       	ldi	r18, 0xCD	; 205
    4164:	3c ec       	ldi	r19, 0xCC	; 204
    4166:	4c e2       	ldi	r20, 0x2C	; 44
    4168:	55 e4       	ldi	r21, 0x45	; 69
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	8f 83       	std	Y+7, r24	; 0x07
    4174:	98 87       	std	Y+8, r25	; 0x08
    4176:	a9 87       	std	Y+9, r26	; 0x09
    4178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417a:	6f 81       	ldd	r22, Y+7	; 0x07
    417c:	78 85       	ldd	r23, Y+8	; 0x08
    417e:	89 85       	ldd	r24, Y+9	; 0x09
    4180:	9a 85       	ldd	r25, Y+10	; 0x0a
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	2c f4       	brge	.+10     	; 0x419c <Server_HandleRestartCommand+0x64e>
		__ticks = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	9e 83       	std	Y+6, r25	; 0x06
    4198:	8d 83       	std	Y+5, r24	; 0x05
    419a:	3f c0       	rjmp	.+126    	; 0x421a <Server_HandleRestartCommand+0x6cc>
	else if (__tmp > 65535)
    419c:	6f 81       	ldd	r22, Y+7	; 0x07
    419e:	78 85       	ldd	r23, Y+8	; 0x08
    41a0:	89 85       	ldd	r24, Y+9	; 0x09
    41a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	3f ef       	ldi	r19, 0xFF	; 255
    41a8:	4f e7       	ldi	r20, 0x7F	; 127
    41aa:	57 e4       	ldi	r21, 0x47	; 71
    41ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41b0:	18 16       	cp	r1, r24
    41b2:	4c f5       	brge	.+82     	; 0x4206 <Server_HandleRestartCommand+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e2       	ldi	r20, 0x20	; 32
    41c2:	51 e4       	ldi	r21, 0x41	; 65
    41c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	bc 01       	movw	r22, r24
    41ce:	cd 01       	movw	r24, r26
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9e 83       	std	Y+6, r25	; 0x06
    41da:	8d 83       	std	Y+5, r24	; 0x05
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <Server_HandleRestartCommand+0x6ae>
    41de:	84 e1       	ldi	r24, 0x14	; 20
    41e0:	91 e0       	ldi	r25, 0x01	; 1
    41e2:	9c 83       	std	Y+4, r25	; 0x04
    41e4:	8b 83       	std	Y+3, r24	; 0x03
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <Server_HandleRestartCommand+0x69c>
    41ee:	9c 83       	std	Y+4, r25	; 0x04
    41f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f2:	8d 81       	ldd	r24, Y+5	; 0x05
    41f4:	9e 81       	ldd	r25, Y+6	; 0x06
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	9e 83       	std	Y+6, r25	; 0x06
    41fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41fc:	8d 81       	ldd	r24, Y+5	; 0x05
    41fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	69 f7       	brne	.-38     	; 0x41de <Server_HandleRestartCommand+0x690>
    4204:	14 c0       	rjmp	.+40     	; 0x422e <Server_HandleRestartCommand+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4206:	6f 81       	ldd	r22, Y+7	; 0x07
    4208:	78 85       	ldd	r23, Y+8	; 0x08
    420a:	89 85       	ldd	r24, Y+9	; 0x09
    420c:	9a 85       	ldd	r25, Y+10	; 0x0a
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	9e 83       	std	Y+6, r25	; 0x06
    4218:	8d 83       	std	Y+5, r24	; 0x05
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	9e 81       	ldd	r25, Y+6	; 0x06
    421e:	9a 83       	std	Y+2, r25	; 0x02
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <Server_HandleRestartCommand+0x6d8>
    422a:	9a 83       	std	Y+2, r25	; 0x02
    422c:	89 83       	std	Y+1, r24	; 0x01
		_StoreByte(TreeCounterAdd, 0);
		_StoreByte(RootIndexAdd, 0);
		_StoreByte(TreeStartAddr, 0);
		for(uint8 count1 = 0; count1 < Tree_Counter; count1++)
		{
			for(uint8 count2 = 0; count2 < NodeSize; count2++)
    422e:	de 01       	movw	r26, r28
    4230:	ab 5a       	subi	r26, 0xAB	; 171
    4232:	bf 4f       	sbci	r27, 0xFF	; 255
    4234:	fe 01       	movw	r30, r28
    4236:	eb 5a       	subi	r30, 0xAB	; 171
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 81       	ld	r24, Z
    423c:	8f 5f       	subi	r24, 0xFF	; 255
    423e:	8c 93       	st	X, r24
    4240:	fe 01       	movw	r30, r28
    4242:	eb 5a       	subi	r30, 0xAB	; 171
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 81       	ld	r24, Z
    4248:	88 30       	cpi	r24, 0x08	; 8
    424a:	08 f4       	brcc	.+2      	; 0x424e <Server_HandleRestartCommand+0x700>
    424c:	68 cf       	rjmp	.-304    	; 0x411e <Server_HandleRestartCommand+0x5d0>
	else
	{
		_StoreByte(TreeCounterAdd, 0);
		_StoreByte(RootIndexAdd, 0);
		_StoreByte(TreeStartAddr, 0);
		for(uint8 count1 = 0; count1 < Tree_Counter; count1++)
    424e:	de 01       	movw	r26, r28
    4250:	aa 5a       	subi	r26, 0xAA	; 170
    4252:	bf 4f       	sbci	r27, 0xFF	; 255
    4254:	fe 01       	movw	r30, r28
    4256:	ea 5a       	subi	r30, 0xAA	; 170
    4258:	ff 4f       	sbci	r31, 0xFF	; 255
    425a:	80 81       	ld	r24, Z
    425c:	8f 5f       	subi	r24, 0xFF	; 255
    425e:	8c 93       	st	X, r24
    4260:	80 91 04 07 	lds	r24, 0x0704
    4264:	fe 01       	movw	r30, r28
    4266:	ea 5a       	subi	r30, 0xAA	; 170
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	90 81       	ld	r25, Z
    426c:	98 17       	cp	r25, r24
    426e:	08 f4       	brcc	.+2      	; 0x4272 <Server_HandleRestartCommand+0x724>
    4270:	51 cf       	rjmp	.-350    	; 0x4114 <Server_HandleRestartCommand+0x5c6>
			{
				_StoreByte(StartAddress++, 0xFF);
			}
		}
	}
	Tree_Counter = 0;
    4272:	10 92 04 07 	sts	0x0704, r1
	SendCommand(Server_Success);
    4276:	89 e4       	ldi	r24, 0x49	; 73
    4278:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
	BST_Init(&Server_BinarySearchTree);
    427c:	8a e6       	ldi	r24, 0x6A	; 106
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 a3 05 	call	0xb46	; 0xb46 <BST_Init>
}
    4284:	c8 5a       	subi	r28, 0xA8	; 168
    4286:	df 4f       	sbci	r29, 0xFF	; 255
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <Server_HandleCommand>:

void Server_HandleCommand(void)
{
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	64 97       	sbiw	r28, 0x14	; 20
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	f8 94       	cli
    42aa:	de bf       	out	0x3e, r29	; 62
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	cd bf       	out	0x3d, r28	; 61
	uint8 command;
	CLIENT_PROFILE client;
	uint8 id;

	SendCommand(Server_Ready);
    42b0:	8a e4       	ldi	r24, 0x4A	; 74
    42b2:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
	command = GetCommand;
    42b6:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    42ba:	8a 83       	std	Y+2, r24	; 0x02

	switch(command)
    42bc:	8a 81       	ldd	r24, Y+2	; 0x02
    42be:	28 2f       	mov	r18, r24
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	3c 8b       	std	Y+20, r19	; 0x14
    42c4:	2b 8b       	std	Y+19, r18	; 0x13
    42c6:	8b 89       	ldd	r24, Y+19	; 0x13
    42c8:	9c 89       	ldd	r25, Y+20	; 0x14
    42ca:	85 34       	cpi	r24, 0x45	; 69
    42cc:	91 05       	cpc	r25, r1
    42ce:	09 f4       	brne	.+2      	; 0x42d2 <Server_HandleCommand+0x36>
    42d0:	59 c0       	rjmp	.+178    	; 0x4384 <Server_HandleCommand+0xe8>
    42d2:	2b 89       	ldd	r18, Y+19	; 0x13
    42d4:	3c 89       	ldd	r19, Y+20	; 0x14
    42d6:	26 34       	cpi	r18, 0x46	; 70
    42d8:	31 05       	cpc	r19, r1
    42da:	5c f4       	brge	.+22     	; 0x42f2 <Server_HandleCommand+0x56>
    42dc:	8b 89       	ldd	r24, Y+19	; 0x13
    42de:	9c 89       	ldd	r25, Y+20	; 0x14
    42e0:	83 34       	cpi	r24, 0x43	; 67
    42e2:	91 05       	cpc	r25, r1
    42e4:	99 f0       	breq	.+38     	; 0x430c <Server_HandleCommand+0x70>
    42e6:	2b 89       	ldd	r18, Y+19	; 0x13
    42e8:	3c 89       	ldd	r19, Y+20	; 0x14
    42ea:	24 34       	cpi	r18, 0x44	; 68
    42ec:	31 05       	cpc	r19, r1
    42ee:	61 f1       	breq	.+88     	; 0x4348 <Server_HandleCommand+0xac>
    42f0:	8c c0       	rjmp	.+280    	; 0x440a <Server_HandleCommand+0x16e>
    42f2:	8b 89       	ldd	r24, Y+19	; 0x13
    42f4:	9c 89       	ldd	r25, Y+20	; 0x14
    42f6:	86 34       	cpi	r24, 0x46	; 70
    42f8:	91 05       	cpc	r25, r1
    42fa:	09 f4       	brne	.+2      	; 0x42fe <Server_HandleCommand+0x62>
    42fc:	63 c0       	rjmp	.+198    	; 0x43c4 <Server_HandleCommand+0x128>
    42fe:	2b 89       	ldd	r18, Y+19	; 0x13
    4300:	3c 89       	ldd	r19, Y+20	; 0x14
    4302:	28 34       	cpi	r18, 0x48	; 72
    4304:	31 05       	cpc	r19, r1
    4306:	09 f4       	brne	.+2      	; 0x430a <Server_HandleCommand+0x6e>
    4308:	7d c0       	rjmp	.+250    	; 0x4404 <Server_HandleCommand+0x168>
    430a:	7f c0       	rjmp	.+254    	; 0x440a <Server_HandleCommand+0x16e>
	{
	case ATM_WriteClient:
		Server_HandleWriteCommand();
    430c:	8a e4       	ldi	r24, 0x4A	; 74
    430e:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4312:	ce 01       	movw	r24, r28
    4314:	03 96       	adiw	r24, 0x03	; 3
    4316:	0e 94 03 1c 	call	0x3806	; 0x3806 <ReceiveClient>
    431a:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    431e:	87 34       	cpi	r24, 0x47	; 71
    4320:	21 f0       	breq	.+8      	; 0x432a <Server_HandleCommand+0x8e>
    4322:	8c e4       	ldi	r24, 0x4C	; 76
    4324:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4328:	7f c0       	rjmp	.+254    	; 0x4428 <Server_HandleCommand+0x18c>
    432a:	ce 01       	movw	r24, r28
    432c:	03 96       	adiw	r24, 0x03	; 3
    432e:	61 e0       	ldi	r22, 0x01	; 1
    4330:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <Server_StoreUpdateClient>
    4334:	88 23       	and	r24, r24
    4336:	21 f0       	breq	.+8      	; 0x4340 <Server_HandleCommand+0xa4>
    4338:	8c e4       	ldi	r24, 0x4C	; 76
    433a:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    433e:	74 c0       	rjmp	.+232    	; 0x4428 <Server_HandleCommand+0x18c>
    4340:	89 e4       	ldi	r24, 0x49	; 73
    4342:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4346:	65 c0       	rjmp	.+202    	; 0x4412 <Server_HandleCommand+0x176>
		break;
	case ATM_UpdateClient:
		Server_HandleUpdateCommand();
    4348:	8a e4       	ldi	r24, 0x4A	; 74
    434a:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    434e:	ce 01       	movw	r24, r28
    4350:	03 96       	adiw	r24, 0x03	; 3
    4352:	0e 94 03 1c 	call	0x3806	; 0x3806 <ReceiveClient>
    4356:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    435a:	87 34       	cpi	r24, 0x47	; 71
    435c:	21 f0       	breq	.+8      	; 0x4366 <Server_HandleCommand+0xca>
    435e:	8c e4       	ldi	r24, 0x4C	; 76
    4360:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4364:	61 c0       	rjmp	.+194    	; 0x4428 <Server_HandleCommand+0x18c>
    4366:	ce 01       	movw	r24, r28
    4368:	03 96       	adiw	r24, 0x03	; 3
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <Server_StoreUpdateClient>
    4370:	88 23       	and	r24, r24
    4372:	21 f0       	breq	.+8      	; 0x437c <Server_HandleCommand+0xe0>
    4374:	8c e4       	ldi	r24, 0x4C	; 76
    4376:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    437a:	56 c0       	rjmp	.+172    	; 0x4428 <Server_HandleCommand+0x18c>
    437c:	89 e4       	ldi	r24, 0x49	; 73
    437e:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4382:	47 c0       	rjmp	.+142    	; 0x4412 <Server_HandleCommand+0x176>
		break;
	case ATM_GetClientPass:
		Server_HandleGetPassCommand();
    4384:	8a e4       	ldi	r24, 0x4A	; 74
    4386:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    438a:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    438e:	89 83       	std	Y+1, r24	; 0x01
    4390:	90 91 04 07 	lds	r25, 0x0704
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	89 17       	cp	r24, r25
    4398:	20 f0       	brcs	.+8      	; 0x43a2 <Server_HandleCommand+0x106>
    439a:	8c e4       	ldi	r24, 0x4C	; 76
    439c:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43a0:	43 c0       	rjmp	.+134    	; 0x4428 <Server_HandleCommand+0x18c>
    43a2:	89 e4       	ldi	r24, 0x49	; 73
    43a4:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	60 e0       	ldi	r22, 0x00	; 0
    43ac:	0e 94 30 1c 	call	0x3860	; 0x3860 <SendClient>
    43b0:	88 23       	and	r24, r24
    43b2:	21 f0       	breq	.+8      	; 0x43bc <Server_HandleCommand+0x120>
    43b4:	8c e4       	ldi	r24, 0x4C	; 76
    43b6:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43ba:	36 c0       	rjmp	.+108    	; 0x4428 <Server_HandleCommand+0x18c>
    43bc:	8b e4       	ldi	r24, 0x4B	; 75
    43be:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43c2:	27 c0       	rjmp	.+78     	; 0x4412 <Server_HandleCommand+0x176>
		break;
	case ATM_GetClientCash:
		Server_HandleGetCashCommand();
    43c4:	8a e4       	ldi	r24, 0x4A	; 74
    43c6:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43ca:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    43ce:	89 83       	std	Y+1, r24	; 0x01
    43d0:	90 91 04 07 	lds	r25, 0x0704
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	89 17       	cp	r24, r25
    43d8:	20 f0       	brcs	.+8      	; 0x43e2 <Server_HandleCommand+0x146>
    43da:	8c e4       	ldi	r24, 0x4C	; 76
    43dc:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43e0:	23 c0       	rjmp	.+70     	; 0x4428 <Server_HandleCommand+0x18c>
    43e2:	89 e4       	ldi	r24, 0x49	; 73
    43e4:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	61 e0       	ldi	r22, 0x01	; 1
    43ec:	0e 94 30 1c 	call	0x3860	; 0x3860 <SendClient>
    43f0:	88 23       	and	r24, r24
    43f2:	21 f0       	breq	.+8      	; 0x43fc <Server_HandleCommand+0x160>
    43f4:	8c e4       	ldi	r24, 0x4C	; 76
    43f6:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    43fa:	16 c0       	rjmp	.+44     	; 0x4428 <Server_HandleCommand+0x18c>
    43fc:	8b e4       	ldi	r24, 0x4B	; 75
    43fe:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4402:	07 c0       	rjmp	.+14     	; 0x4412 <Server_HandleCommand+0x176>
		break;
	case ATM_Restart:
		Server_HandleRestartCommand();
    4404:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <Server_HandleRestartCommand>
    4408:	04 c0       	rjmp	.+8      	; 0x4412 <Server_HandleCommand+0x176>
		break;
	default:
		SendCommand(Server_Error);
    440a:	8c e4       	ldi	r24, 0x4C	; 76
    440c:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4410:	0b c0       	rjmp	.+22     	; 0x4428 <Server_HandleCommand+0x18c>
		return;
	}

	if(GetCommand != ATM_EndTransmission){
    4412:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    4416:	82 34       	cpi	r24, 0x42	; 66
    4418:	21 f0       	breq	.+8      	; 0x4422 <Server_HandleCommand+0x186>
		SendCommand(Server_Error);
    441a:	8c e4       	ldi	r24, 0x4C	; 76
    441c:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
    4420:	03 c0       	rjmp	.+6      	; 0x4428 <Server_HandleCommand+0x18c>
		return;
	}
	else{
		SendCommand(Server_Success);
    4422:	89 e4       	ldi	r24, 0x49	; 73
    4424:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
	}
}
    4428:	64 96       	adiw	r28, 0x14	; 20
    442a:	0f b6       	in	r0, 0x3f	; 63
    442c:	f8 94       	cli
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	0f be       	out	0x3f, r0	; 63
    4432:	cd bf       	out	0x3d, r28	; 61
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <UART_Init>:

#include "UART.h"

void(*UART_HandlerPointer)(void) = STUB;

void UART_Init(volatile const uint8 a_NUM_DATA_BITS, volatile const uint8 a_SYNC, volatile const uint8 a_NUM_STOP_BITS, volatile const uint8 a_BAUD_RATE, volatile const uint8 a_Parity){
    443a:	0f 93       	push	r16
    443c:	df 93       	push	r29
    443e:	cf 93       	push	r28
    4440:	cd b7       	in	r28, 0x3d	; 61
    4442:	de b7       	in	r29, 0x3e	; 62
    4444:	2f 97       	sbiw	r28, 0x0f	; 15
    4446:	0f b6       	in	r0, 0x3f	; 63
    4448:	f8 94       	cli
    444a:	de bf       	out	0x3e, r29	; 62
    444c:	0f be       	out	0x3f, r0	; 63
    444e:	cd bf       	out	0x3d, r28	; 61
    4450:	8f 83       	std	Y+7, r24	; 0x07
    4452:	68 87       	std	Y+8, r22	; 0x08
    4454:	49 87       	std	Y+9, r20	; 0x09
    4456:	2a 87       	std	Y+10, r18	; 0x0a
    4458:	0b 87       	std	Y+11, r16	; 0x0b
	uint16 baud;
	float32 fbaud;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    445a:	eb e2       	ldi	r30, 0x2B	; 43
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	80 83       	st	Z, r24
	 * UCSZ2 bits combined with UCSZ21:0 in the UCSRC sets the number
	   of data bits in a frame the receiver and transmitter use.
	   You can also use BIT5, BIT6, BIT7, BIT8, BIT9 for a_NUM_DATA_BITS
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    4462:	ea e2       	ldi	r30, 0x2A	; 42
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	88 e1       	ldi	r24, 0x18	; 24
    4468:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | (a_NUM_DATA_BITS & 0x04);
    446a:	aa e2       	ldi	r26, 0x2A	; 42
    446c:	b0 e0       	ldi	r27, 0x00	; 0
    446e:	ea e2       	ldi	r30, 0x2A	; 42
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 81       	ld	r24, Z
    4474:	98 2f       	mov	r25, r24
    4476:	9b 7f       	andi	r25, 0xFB	; 251
    4478:	8f 81       	ldd	r24, Y+7	; 0x07
    447a:	84 70       	andi	r24, 0x04	; 4
    447c:	89 2b       	or	r24, r25
    447e:	8c 93       	st	X, r24
	   EVEN_PARITY, ODD_PARITY for
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (a_SYNC << UMSEL) | (a_NUM_STOP_BITS << USBS);
    4480:	e0 e4       	ldi	r30, 0x40	; 64
    4482:	f0 e0       	ldi	r31, 0x00	; 0
    4484:	88 85       	ldd	r24, Y+8	; 0x08
    4486:	88 2f       	mov	r24, r24
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	00 24       	eor	r0, r0
    448c:	96 95       	lsr	r25
    448e:	87 95       	ror	r24
    4490:	07 94       	ror	r0
    4492:	96 95       	lsr	r25
    4494:	87 95       	ror	r24
    4496:	07 94       	ror	r0
    4498:	98 2f       	mov	r25, r24
    449a:	80 2d       	mov	r24, r0
    449c:	28 2f       	mov	r18, r24
    449e:	20 68       	ori	r18, 0x80	; 128
    44a0:	89 85       	ldd	r24, Y+9	; 0x09
    44a2:	88 2f       	mov	r24, r24
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	88 0f       	add	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	82 2b       	or	r24, r18
    44b4:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) |((a_Parity & 0x03) << 4);
    44b6:	a0 e4       	ldi	r26, 0x40	; 64
    44b8:	b0 e0       	ldi	r27, 0x00	; 0
    44ba:	e0 e4       	ldi	r30, 0x40	; 64
    44bc:	f0 e0       	ldi	r31, 0x00	; 0
    44be:	80 81       	ld	r24, Z
    44c0:	28 2f       	mov	r18, r24
    44c2:	2f 7c       	andi	r18, 0xCF	; 207
    44c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    44c6:	88 2f       	mov	r24, r24
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	83 70       	andi	r24, 0x03	; 3
    44cc:	90 70       	andi	r25, 0x00	; 0
    44ce:	82 95       	swap	r24
    44d0:	92 95       	swap	r25
    44d2:	90 7f       	andi	r25, 0xF0	; 240
    44d4:	98 27       	eor	r25, r24
    44d6:	80 7f       	andi	r24, 0xF0	; 240
    44d8:	98 27       	eor	r25, r24
    44da:	82 2b       	or	r24, r18
    44dc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) |((a_NUM_DATA_BITS & 0x03) << 1);
    44de:	a0 e4       	ldi	r26, 0x40	; 64
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	e0 e4       	ldi	r30, 0x40	; 64
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	28 2f       	mov	r18, r24
    44ea:	29 7f       	andi	r18, 0xF9	; 249
    44ec:	8f 81       	ldd	r24, Y+7	; 0x07
    44ee:	88 2f       	mov	r24, r24
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	83 70       	andi	r24, 0x03	; 3
    44f4:	90 70       	andi	r25, 0x00	; 0
    44f6:	88 0f       	add	r24, r24
    44f8:	99 1f       	adc	r25, r25
    44fa:	82 2b       	or	r24, r18
    44fc:	8c 93       	st	X, r24
	if (a_SYNC){
    44fe:	88 85       	ldd	r24, Y+8	; 0x08
    4500:	88 23       	and	r24, r24
    4502:	09 f4       	brne	.+2      	; 0x4506 <UART_Init+0xcc>
    4504:	97 c1       	rjmp	.+814    	; 0x4834 <UART_Init+0x3fa>
		switch(a_BAUD_RATE){
    4506:	8a 85       	ldd	r24, Y+10	; 0x0a
    4508:	28 2f       	mov	r18, r24
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	3f 87       	std	Y+15, r19	; 0x0f
    450e:	2e 87       	std	Y+14, r18	; 0x0e
    4510:	8e 85       	ldd	r24, Y+14	; 0x0e
    4512:	9f 85       	ldd	r25, Y+15	; 0x0f
    4514:	85 30       	cpi	r24, 0x05	; 5
    4516:	91 05       	cpc	r25, r1
    4518:	09 f4       	brne	.+2      	; 0x451c <UART_Init+0xe2>
    451a:	de c0       	rjmp	.+444    	; 0x46d8 <UART_Init+0x29e>
    451c:	2e 85       	ldd	r18, Y+14	; 0x0e
    451e:	3f 85       	ldd	r19, Y+15	; 0x0f
    4520:	26 30       	cpi	r18, 0x06	; 6
    4522:	31 05       	cpc	r19, r1
    4524:	1c f5       	brge	.+70     	; 0x456c <UART_Init+0x132>
    4526:	8e 85       	ldd	r24, Y+14	; 0x0e
    4528:	9f 85       	ldd	r25, Y+15	; 0x0f
    452a:	82 30       	cpi	r24, 0x02	; 2
    452c:	91 05       	cpc	r25, r1
    452e:	09 f4       	brne	.+2      	; 0x4532 <UART_Init+0xf8>
    4530:	7c c0       	rjmp	.+248    	; 0x462a <UART_Init+0x1f0>
    4532:	2e 85       	ldd	r18, Y+14	; 0x0e
    4534:	3f 85       	ldd	r19, Y+15	; 0x0f
    4536:	23 30       	cpi	r18, 0x03	; 3
    4538:	31 05       	cpc	r19, r1
    453a:	5c f4       	brge	.+22     	; 0x4552 <UART_Init+0x118>
    453c:	8e 85       	ldd	r24, Y+14	; 0x0e
    453e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	c9 f1       	breq	.+114    	; 0x45b6 <UART_Init+0x17c>
    4544:	2e 85       	ldd	r18, Y+14	; 0x0e
    4546:	3f 85       	ldd	r19, Y+15	; 0x0f
    4548:	21 30       	cpi	r18, 0x01	; 1
    454a:	31 05       	cpc	r19, r1
    454c:	09 f4       	brne	.+2      	; 0x4550 <UART_Init+0x116>
    454e:	50 c0       	rjmp	.+160    	; 0x45f0 <UART_Init+0x1b6>
    4550:	07 c3       	rjmp	.+1550   	; 0x4b60 <UART_Init+0x726>
    4552:	8e 85       	ldd	r24, Y+14	; 0x0e
    4554:	9f 85       	ldd	r25, Y+15	; 0x0f
    4556:	83 30       	cpi	r24, 0x03	; 3
    4558:	91 05       	cpc	r25, r1
    455a:	09 f4       	brne	.+2      	; 0x455e <UART_Init+0x124>
    455c:	83 c0       	rjmp	.+262    	; 0x4664 <UART_Init+0x22a>
    455e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4560:	3f 85       	ldd	r19, Y+15	; 0x0f
    4562:	24 30       	cpi	r18, 0x04	; 4
    4564:	31 05       	cpc	r19, r1
    4566:	09 f4       	brne	.+2      	; 0x456a <UART_Init+0x130>
    4568:	9a c0       	rjmp	.+308    	; 0x469e <UART_Init+0x264>
    456a:	fa c2       	rjmp	.+1524   	; 0x4b60 <UART_Init+0x726>
    456c:	8e 85       	ldd	r24, Y+14	; 0x0e
    456e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4570:	88 30       	cpi	r24, 0x08	; 8
    4572:	91 05       	cpc	r25, r1
    4574:	09 f4       	brne	.+2      	; 0x4578 <UART_Init+0x13e>
    4576:	07 c1       	rjmp	.+526    	; 0x4786 <UART_Init+0x34c>
    4578:	2e 85       	ldd	r18, Y+14	; 0x0e
    457a:	3f 85       	ldd	r19, Y+15	; 0x0f
    457c:	29 30       	cpi	r18, 0x09	; 9
    457e:	31 05       	cpc	r19, r1
    4580:	6c f4       	brge	.+26     	; 0x459c <UART_Init+0x162>
    4582:	8e 85       	ldd	r24, Y+14	; 0x0e
    4584:	9f 85       	ldd	r25, Y+15	; 0x0f
    4586:	86 30       	cpi	r24, 0x06	; 6
    4588:	91 05       	cpc	r25, r1
    458a:	09 f4       	brne	.+2      	; 0x458e <UART_Init+0x154>
    458c:	c2 c0       	rjmp	.+388    	; 0x4712 <UART_Init+0x2d8>
    458e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4590:	3f 85       	ldd	r19, Y+15	; 0x0f
    4592:	27 30       	cpi	r18, 0x07	; 7
    4594:	31 05       	cpc	r19, r1
    4596:	09 f4       	brne	.+2      	; 0x459a <UART_Init+0x160>
    4598:	d9 c0       	rjmp	.+434    	; 0x474c <UART_Init+0x312>
    459a:	e2 c2       	rjmp	.+1476   	; 0x4b60 <UART_Init+0x726>
    459c:	8e 85       	ldd	r24, Y+14	; 0x0e
    459e:	9f 85       	ldd	r25, Y+15	; 0x0f
    45a0:	89 30       	cpi	r24, 0x09	; 9
    45a2:	91 05       	cpc	r25, r1
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <UART_Init+0x16e>
    45a6:	0c c1       	rjmp	.+536    	; 0x47c0 <UART_Init+0x386>
    45a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    45aa:	3f 85       	ldd	r19, Y+15	; 0x0f
    45ac:	2a 30       	cpi	r18, 0x0A	; 10
    45ae:	31 05       	cpc	r19, r1
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <UART_Init+0x17a>
    45b2:	23 c1       	rjmp	.+582    	; 0x47fa <UART_Init+0x3c0>
    45b4:	d5 c2       	rjmp	.+1450   	; 0x4b60 <UART_Init+0x726>
		case(0):
			fbaud = (F_CPU / (100 * 2)) - 1;
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	9f ef       	ldi	r25, 0xFF	; 255
    45ba:	a7 e5       	ldi	r26, 0x57	; 87
    45bc:	b7 e4       	ldi	r27, 0x47	; 71
    45be:	89 83       	std	Y+1, r24	; 0x01
    45c0:	9a 83       	std	Y+2, r25	; 0x02
    45c2:	ab 83       	std	Y+3, r26	; 0x03
    45c4:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    45c6:	69 81       	ldd	r22, Y+1	; 0x01
    45c8:	7a 81       	ldd	r23, Y+2	; 0x02
    45ca:	8b 81       	ldd	r24, Y+3	; 0x03
    45cc:	9c 81       	ldd	r25, Y+4	; 0x04
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 e0       	ldi	r20, 0x00	; 0
    45d4:	5f e3       	ldi	r21, 0x3F	; 63
    45d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	bc 01       	movw	r22, r24
    45e0:	cd 01       	movw	r24, r26
    45e2:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	9e 83       	std	Y+6, r25	; 0x06
    45ec:	8d 83       	std	Y+5, r24	; 0x05
    45ee:	b8 c2       	rjmp	.+1392   	; 0x4b60 <UART_Init+0x726>
			break;
		case(1):
			fbaud = (F_CPU / (200 * 2)) - 1;
    45f0:	80 e0       	ldi	r24, 0x00	; 0
    45f2:	9e ef       	ldi	r25, 0xFE	; 254
    45f4:	a7 ed       	ldi	r26, 0xD7	; 215
    45f6:	b6 e4       	ldi	r27, 0x46	; 70
    45f8:	89 83       	std	Y+1, r24	; 0x01
    45fa:	9a 83       	std	Y+2, r25	; 0x02
    45fc:	ab 83       	std	Y+3, r26	; 0x03
    45fe:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4600:	69 81       	ldd	r22, Y+1	; 0x01
    4602:	7a 81       	ldd	r23, Y+2	; 0x02
    4604:	8b 81       	ldd	r24, Y+3	; 0x03
    4606:	9c 81       	ldd	r25, Y+4	; 0x04
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e0       	ldi	r20, 0x00	; 0
    460e:	5f e3       	ldi	r21, 0x3F	; 63
    4610:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	bc 01       	movw	r22, r24
    461a:	cd 01       	movw	r24, r26
    461c:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	9e 83       	std	Y+6, r25	; 0x06
    4626:	8d 83       	std	Y+5, r24	; 0x05
    4628:	9b c2       	rjmp	.+1334   	; 0x4b60 <UART_Init+0x726>
			break;
		case(2):
			fbaud = (F_CPU / (300 * 2)) - 1;
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	9e ef       	ldi	r25, 0xFE	; 254
    462e:	af e8       	ldi	r26, 0x8F	; 143
    4630:	b6 e4       	ldi	r27, 0x46	; 70
    4632:	89 83       	std	Y+1, r24	; 0x01
    4634:	9a 83       	std	Y+2, r25	; 0x02
    4636:	ab 83       	std	Y+3, r26	; 0x03
    4638:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    463a:	69 81       	ldd	r22, Y+1	; 0x01
    463c:	7a 81       	ldd	r23, Y+2	; 0x02
    463e:	8b 81       	ldd	r24, Y+3	; 0x03
    4640:	9c 81       	ldd	r25, Y+4	; 0x04
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	40 e0       	ldi	r20, 0x00	; 0
    4648:	5f e3       	ldi	r21, 0x3F	; 63
    464a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	bc 01       	movw	r22, r24
    4654:	cd 01       	movw	r24, r26
    4656:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	9e 83       	std	Y+6, r25	; 0x06
    4660:	8d 83       	std	Y+5, r24	; 0x05
    4662:	7e c2       	rjmp	.+1276   	; 0x4b60 <UART_Init+0x726>
			break;
		case(3):
			fbaud = (F_CPU / (1200 * 2)) - 1;
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	98 ef       	ldi	r25, 0xF8	; 248
    4668:	af e8       	ldi	r26, 0x8F	; 143
    466a:	b5 e4       	ldi	r27, 0x45	; 69
    466c:	89 83       	std	Y+1, r24	; 0x01
    466e:	9a 83       	std	Y+2, r25	; 0x02
    4670:	ab 83       	std	Y+3, r26	; 0x03
    4672:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4674:	69 81       	ldd	r22, Y+1	; 0x01
    4676:	7a 81       	ldd	r23, Y+2	; 0x02
    4678:	8b 81       	ldd	r24, Y+3	; 0x03
    467a:	9c 81       	ldd	r25, Y+4	; 0x04
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	40 e0       	ldi	r20, 0x00	; 0
    4682:	5f e3       	ldi	r21, 0x3F	; 63
    4684:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	bc 01       	movw	r22, r24
    468e:	cd 01       	movw	r24, r26
    4690:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4694:	dc 01       	movw	r26, r24
    4696:	cb 01       	movw	r24, r22
    4698:	9e 83       	std	Y+6, r25	; 0x06
    469a:	8d 83       	std	Y+5, r24	; 0x05
    469c:	61 c2       	rjmp	.+1218   	; 0x4b60 <UART_Init+0x726>
			break;
		case(4):
			fbaud = (F_CPU / (2400 * 2)) - 1;
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 ef       	ldi	r25, 0xF0	; 240
    46a2:	af e0       	ldi	r26, 0x0F	; 15
    46a4:	b5 e4       	ldi	r27, 0x45	; 69
    46a6:	89 83       	std	Y+1, r24	; 0x01
    46a8:	9a 83       	std	Y+2, r25	; 0x02
    46aa:	ab 83       	std	Y+3, r26	; 0x03
    46ac:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    46ae:	69 81       	ldd	r22, Y+1	; 0x01
    46b0:	7a 81       	ldd	r23, Y+2	; 0x02
    46b2:	8b 81       	ldd	r24, Y+3	; 0x03
    46b4:	9c 81       	ldd	r25, Y+4	; 0x04
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	5f e3       	ldi	r21, 0x3F	; 63
    46be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	bc 01       	movw	r22, r24
    46c8:	cd 01       	movw	r24, r26
    46ca:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    46ce:	dc 01       	movw	r26, r24
    46d0:	cb 01       	movw	r24, r22
    46d2:	9e 83       	std	Y+6, r25	; 0x06
    46d4:	8d 83       	std	Y+5, r24	; 0x05
    46d6:	44 c2       	rjmp	.+1160   	; 0x4b60 <UART_Init+0x726>
			break;
		case(5):
			fbaud = (F_CPU / (4800 * 2)) - 1;
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 ee       	ldi	r25, 0xE0	; 224
    46dc:	af e8       	ldi	r26, 0x8F	; 143
    46de:	b4 e4       	ldi	r27, 0x44	; 68
    46e0:	89 83       	std	Y+1, r24	; 0x01
    46e2:	9a 83       	std	Y+2, r25	; 0x02
    46e4:	ab 83       	std	Y+3, r26	; 0x03
    46e6:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    46e8:	69 81       	ldd	r22, Y+1	; 0x01
    46ea:	7a 81       	ldd	r23, Y+2	; 0x02
    46ec:	8b 81       	ldd	r24, Y+3	; 0x03
    46ee:	9c 81       	ldd	r25, Y+4	; 0x04
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 e0       	ldi	r20, 0x00	; 0
    46f6:	5f e3       	ldi	r21, 0x3F	; 63
    46f8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9e 83       	std	Y+6, r25	; 0x06
    470e:	8d 83       	std	Y+5, r24	; 0x05
    4710:	27 c2       	rjmp	.+1102   	; 0x4b60 <UART_Init+0x726>
			break;
		case(6):
			fbaud = (F_CPU / (9600 * 2)) - 1;
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 ec       	ldi	r25, 0xC0	; 192
    4716:	af e0       	ldi	r26, 0x0F	; 15
    4718:	b4 e4       	ldi	r27, 0x44	; 68
    471a:	89 83       	std	Y+1, r24	; 0x01
    471c:	9a 83       	std	Y+2, r25	; 0x02
    471e:	ab 83       	std	Y+3, r26	; 0x03
    4720:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4722:	69 81       	ldd	r22, Y+1	; 0x01
    4724:	7a 81       	ldd	r23, Y+2	; 0x02
    4726:	8b 81       	ldd	r24, Y+3	; 0x03
    4728:	9c 81       	ldd	r25, Y+4	; 0x04
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	40 e0       	ldi	r20, 0x00	; 0
    4730:	5f e3       	ldi	r21, 0x3F	; 63
    4732:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	bc 01       	movw	r22, r24
    473c:	cd 01       	movw	r24, r26
    473e:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4742:	dc 01       	movw	r26, r24
    4744:	cb 01       	movw	r24, r22
    4746:	9e 83       	std	Y+6, r25	; 0x06
    4748:	8d 83       	std	Y+5, r24	; 0x05
    474a:	0a c2       	rjmp	.+1044   	; 0x4b60 <UART_Init+0x726>
			break;
		case(7):
			fbaud = (F_CPU / (19200 * 2)) - 1;
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	a0 e8       	ldi	r26, 0x80	; 128
    4752:	bf e4       	ldi	r27, 0x4F	; 79
    4754:	89 83       	std	Y+1, r24	; 0x01
    4756:	9a 83       	std	Y+2, r25	; 0x02
    4758:	ab 83       	std	Y+3, r26	; 0x03
    475a:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    475c:	69 81       	ldd	r22, Y+1	; 0x01
    475e:	7a 81       	ldd	r23, Y+2	; 0x02
    4760:	8b 81       	ldd	r24, Y+3	; 0x03
    4762:	9c 81       	ldd	r25, Y+4	; 0x04
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e0       	ldi	r20, 0x00	; 0
    476a:	5f e3       	ldi	r21, 0x3F	; 63
    476c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	bc 01       	movw	r22, r24
    4776:	cd 01       	movw	r24, r26
    4778:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	9e 83       	std	Y+6, r25	; 0x06
    4782:	8d 83       	std	Y+5, r24	; 0x05
    4784:	ed c1       	rjmp	.+986    	; 0x4b60 <UART_Init+0x726>
			break;
		case(8):
			fbaud = (F_CPU / (38400 * 2)) - 1;
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	af e0       	ldi	r26, 0x0F	; 15
    478c:	b3 e4       	ldi	r27, 0x43	; 67
    478e:	89 83       	std	Y+1, r24	; 0x01
    4790:	9a 83       	std	Y+2, r25	; 0x02
    4792:	ab 83       	std	Y+3, r26	; 0x03
    4794:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4796:	69 81       	ldd	r22, Y+1	; 0x01
    4798:	7a 81       	ldd	r23, Y+2	; 0x02
    479a:	8b 81       	ldd	r24, Y+3	; 0x03
    479c:	9c 81       	ldd	r25, Y+4	; 0x04
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	40 e0       	ldi	r20, 0x00	; 0
    47a4:	5f e3       	ldi	r21, 0x3F	; 63
    47a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	bc 01       	movw	r22, r24
    47b0:	cd 01       	movw	r24, r26
    47b2:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	9e 83       	std	Y+6, r25	; 0x06
    47bc:	8d 83       	std	Y+5, r24	; 0x05
    47be:	d0 c1       	rjmp	.+928    	; 0x4b60 <UART_Init+0x726>
			break;
		case(9):
			fbaud = (F_CPU / (57600 * 2)) - 1;
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	ae eb       	ldi	r26, 0xBE	; 190
    47c6:	b2 e4       	ldi	r27, 0x42	; 66
    47c8:	89 83       	std	Y+1, r24	; 0x01
    47ca:	9a 83       	std	Y+2, r25	; 0x02
    47cc:	ab 83       	std	Y+3, r26	; 0x03
    47ce:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    47d0:	69 81       	ldd	r22, Y+1	; 0x01
    47d2:	7a 81       	ldd	r23, Y+2	; 0x02
    47d4:	8b 81       	ldd	r24, Y+3	; 0x03
    47d6:	9c 81       	ldd	r25, Y+4	; 0x04
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e0       	ldi	r20, 0x00	; 0
    47de:	5f e3       	ldi	r21, 0x3F	; 63
    47e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	bc 01       	movw	r22, r24
    47ea:	cd 01       	movw	r24, r26
    47ec:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	9e 83       	std	Y+6, r25	; 0x06
    47f6:	8d 83       	std	Y+5, r24	; 0x05
    47f8:	b3 c1       	rjmp	.+870    	; 0x4b60 <UART_Init+0x726>
			break;
		case(10):
			fbaud = (F_CPU / (115200 * 2)) - 1;
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	ac e3       	ldi	r26, 0x3C	; 60
    4800:	b2 e4       	ldi	r27, 0x42	; 66
    4802:	89 83       	std	Y+1, r24	; 0x01
    4804:	9a 83       	std	Y+2, r25	; 0x02
    4806:	ab 83       	std	Y+3, r26	; 0x03
    4808:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    480a:	69 81       	ldd	r22, Y+1	; 0x01
    480c:	7a 81       	ldd	r23, Y+2	; 0x02
    480e:	8b 81       	ldd	r24, Y+3	; 0x03
    4810:	9c 81       	ldd	r25, Y+4	; 0x04
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	5f e3       	ldi	r21, 0x3F	; 63
    481a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	bc 01       	movw	r22, r24
    4824:	cd 01       	movw	r24, r26
    4826:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	9e 83       	std	Y+6, r25	; 0x06
    4830:	8d 83       	std	Y+5, r24	; 0x05
    4832:	96 c1       	rjmp	.+812    	; 0x4b60 <UART_Init+0x726>
			break;
		}
	}
	else{
				switch(a_BAUD_RATE){
    4834:	8a 85       	ldd	r24, Y+10	; 0x0a
    4836:	28 2f       	mov	r18, r24
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	3d 87       	std	Y+13, r19	; 0x0d
    483c:	2c 87       	std	Y+12, r18	; 0x0c
    483e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4840:	9d 85       	ldd	r25, Y+13	; 0x0d
    4842:	85 30       	cpi	r24, 0x05	; 5
    4844:	91 05       	cpc	r25, r1
    4846:	09 f4       	brne	.+2      	; 0x484a <UART_Init+0x410>
    4848:	de c0       	rjmp	.+444    	; 0x4a06 <UART_Init+0x5cc>
    484a:	2c 85       	ldd	r18, Y+12	; 0x0c
    484c:	3d 85       	ldd	r19, Y+13	; 0x0d
    484e:	26 30       	cpi	r18, 0x06	; 6
    4850:	31 05       	cpc	r19, r1
    4852:	1c f5       	brge	.+70     	; 0x489a <UART_Init+0x460>
    4854:	8c 85       	ldd	r24, Y+12	; 0x0c
    4856:	9d 85       	ldd	r25, Y+13	; 0x0d
    4858:	82 30       	cpi	r24, 0x02	; 2
    485a:	91 05       	cpc	r25, r1
    485c:	09 f4       	brne	.+2      	; 0x4860 <UART_Init+0x426>
    485e:	7c c0       	rjmp	.+248    	; 0x4958 <UART_Init+0x51e>
    4860:	2c 85       	ldd	r18, Y+12	; 0x0c
    4862:	3d 85       	ldd	r19, Y+13	; 0x0d
    4864:	23 30       	cpi	r18, 0x03	; 3
    4866:	31 05       	cpc	r19, r1
    4868:	5c f4       	brge	.+22     	; 0x4880 <UART_Init+0x446>
    486a:	8c 85       	ldd	r24, Y+12	; 0x0c
    486c:	9d 85       	ldd	r25, Y+13	; 0x0d
    486e:	00 97       	sbiw	r24, 0x00	; 0
    4870:	c9 f1       	breq	.+114    	; 0x48e4 <UART_Init+0x4aa>
    4872:	2c 85       	ldd	r18, Y+12	; 0x0c
    4874:	3d 85       	ldd	r19, Y+13	; 0x0d
    4876:	21 30       	cpi	r18, 0x01	; 1
    4878:	31 05       	cpc	r19, r1
    487a:	09 f4       	brne	.+2      	; 0x487e <UART_Init+0x444>
    487c:	50 c0       	rjmp	.+160    	; 0x491e <UART_Init+0x4e4>
    487e:	70 c1       	rjmp	.+736    	; 0x4b60 <UART_Init+0x726>
    4880:	8c 85       	ldd	r24, Y+12	; 0x0c
    4882:	9d 85       	ldd	r25, Y+13	; 0x0d
    4884:	83 30       	cpi	r24, 0x03	; 3
    4886:	91 05       	cpc	r25, r1
    4888:	09 f4       	brne	.+2      	; 0x488c <UART_Init+0x452>
    488a:	83 c0       	rjmp	.+262    	; 0x4992 <UART_Init+0x558>
    488c:	2c 85       	ldd	r18, Y+12	; 0x0c
    488e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4890:	24 30       	cpi	r18, 0x04	; 4
    4892:	31 05       	cpc	r19, r1
    4894:	09 f4       	brne	.+2      	; 0x4898 <UART_Init+0x45e>
    4896:	9a c0       	rjmp	.+308    	; 0x49cc <UART_Init+0x592>
    4898:	63 c1       	rjmp	.+710    	; 0x4b60 <UART_Init+0x726>
    489a:	8c 85       	ldd	r24, Y+12	; 0x0c
    489c:	9d 85       	ldd	r25, Y+13	; 0x0d
    489e:	88 30       	cpi	r24, 0x08	; 8
    48a0:	91 05       	cpc	r25, r1
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <UART_Init+0x46c>
    48a4:	07 c1       	rjmp	.+526    	; 0x4ab4 <UART_Init+0x67a>
    48a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    48a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    48aa:	29 30       	cpi	r18, 0x09	; 9
    48ac:	31 05       	cpc	r19, r1
    48ae:	6c f4       	brge	.+26     	; 0x48ca <UART_Init+0x490>
    48b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    48b4:	86 30       	cpi	r24, 0x06	; 6
    48b6:	91 05       	cpc	r25, r1
    48b8:	09 f4       	brne	.+2      	; 0x48bc <UART_Init+0x482>
    48ba:	c2 c0       	rjmp	.+388    	; 0x4a40 <UART_Init+0x606>
    48bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    48be:	3d 85       	ldd	r19, Y+13	; 0x0d
    48c0:	27 30       	cpi	r18, 0x07	; 7
    48c2:	31 05       	cpc	r19, r1
    48c4:	09 f4       	brne	.+2      	; 0x48c8 <UART_Init+0x48e>
    48c6:	d9 c0       	rjmp	.+434    	; 0x4a7a <UART_Init+0x640>
    48c8:	4b c1       	rjmp	.+662    	; 0x4b60 <UART_Init+0x726>
    48ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    48cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    48ce:	89 30       	cpi	r24, 0x09	; 9
    48d0:	91 05       	cpc	r25, r1
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <UART_Init+0x49c>
    48d4:	0c c1       	rjmp	.+536    	; 0x4aee <UART_Init+0x6b4>
    48d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    48d8:	3d 85       	ldd	r19, Y+13	; 0x0d
    48da:	2a 30       	cpi	r18, 0x0A	; 10
    48dc:	31 05       	cpc	r19, r1
    48de:	09 f4       	brne	.+2      	; 0x48e2 <UART_Init+0x4a8>
    48e0:	23 c1       	rjmp	.+582    	; 0x4b28 <UART_Init+0x6ee>
    48e2:	3e c1       	rjmp	.+636    	; 0x4b60 <UART_Init+0x726>
		case(0):
			fbaud = (F_CPU / (100 * 8)) - 1;
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	9c ef       	ldi	r25, 0xFC	; 252
    48e8:	a7 e5       	ldi	r26, 0x57	; 87
    48ea:	b6 e4       	ldi	r27, 0x46	; 70
    48ec:	89 83       	std	Y+1, r24	; 0x01
    48ee:	9a 83       	std	Y+2, r25	; 0x02
    48f0:	ab 83       	std	Y+3, r26	; 0x03
    48f2:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    48f4:	69 81       	ldd	r22, Y+1	; 0x01
    48f6:	7a 81       	ldd	r23, Y+2	; 0x02
    48f8:	8b 81       	ldd	r24, Y+3	; 0x03
    48fa:	9c 81       	ldd	r25, Y+4	; 0x04
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	40 e0       	ldi	r20, 0x00	; 0
    4902:	5f e3       	ldi	r21, 0x3F	; 63
    4904:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	bc 01       	movw	r22, r24
    490e:	cd 01       	movw	r24, r26
    4910:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	9e 83       	std	Y+6, r25	; 0x06
    491a:	8d 83       	std	Y+5, r24	; 0x05
    491c:	21 c1       	rjmp	.+578    	; 0x4b60 <UART_Init+0x726>
			break;
		case(1):
			fbaud = (F_CPU / (200 * 8)) - 1;
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	98 ef       	ldi	r25, 0xF8	; 248
    4922:	a7 ed       	ldi	r26, 0xD7	; 215
    4924:	b5 e4       	ldi	r27, 0x45	; 69
    4926:	89 83       	std	Y+1, r24	; 0x01
    4928:	9a 83       	std	Y+2, r25	; 0x02
    492a:	ab 83       	std	Y+3, r26	; 0x03
    492c:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    492e:	69 81       	ldd	r22, Y+1	; 0x01
    4930:	7a 81       	ldd	r23, Y+2	; 0x02
    4932:	8b 81       	ldd	r24, Y+3	; 0x03
    4934:	9c 81       	ldd	r25, Y+4	; 0x04
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	5f e3       	ldi	r21, 0x3F	; 63
    493e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	bc 01       	movw	r22, r24
    4948:	cd 01       	movw	r24, r26
    494a:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	9e 83       	std	Y+6, r25	; 0x06
    4954:	8d 83       	std	Y+5, r24	; 0x05
    4956:	04 c1       	rjmp	.+520    	; 0x4b60 <UART_Init+0x726>
			break;
		case(2):
			fbaud = (F_CPU / (300 * 8)) - 1;
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	98 ef       	ldi	r25, 0xF8	; 248
    495c:	af e8       	ldi	r26, 0x8F	; 143
    495e:	b5 e4       	ldi	r27, 0x45	; 69
    4960:	89 83       	std	Y+1, r24	; 0x01
    4962:	9a 83       	std	Y+2, r25	; 0x02
    4964:	ab 83       	std	Y+3, r26	; 0x03
    4966:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4968:	69 81       	ldd	r22, Y+1	; 0x01
    496a:	7a 81       	ldd	r23, Y+2	; 0x02
    496c:	8b 81       	ldd	r24, Y+3	; 0x03
    496e:	9c 81       	ldd	r25, Y+4	; 0x04
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	40 e0       	ldi	r20, 0x00	; 0
    4976:	5f e3       	ldi	r21, 0x3F	; 63
    4978:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	bc 01       	movw	r22, r24
    4982:	cd 01       	movw	r24, r26
    4984:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	9e 83       	std	Y+6, r25	; 0x06
    498e:	8d 83       	std	Y+5, r24	; 0x05
    4990:	e7 c0       	rjmp	.+462    	; 0x4b60 <UART_Init+0x726>
			break;
		case(3):
			fbaud = (F_CPU / (1200 * 8)) - 1;
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 ee       	ldi	r25, 0xE0	; 224
    4996:	af e8       	ldi	r26, 0x8F	; 143
    4998:	b4 e4       	ldi	r27, 0x44	; 68
    499a:	89 83       	std	Y+1, r24	; 0x01
    499c:	9a 83       	std	Y+2, r25	; 0x02
    499e:	ab 83       	std	Y+3, r26	; 0x03
    49a0:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    49a2:	69 81       	ldd	r22, Y+1	; 0x01
    49a4:	7a 81       	ldd	r23, Y+2	; 0x02
    49a6:	8b 81       	ldd	r24, Y+3	; 0x03
    49a8:	9c 81       	ldd	r25, Y+4	; 0x04
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	bc 01       	movw	r22, r24
    49bc:	cd 01       	movw	r24, r26
    49be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	9e 83       	std	Y+6, r25	; 0x06
    49c8:	8d 83       	std	Y+5, r24	; 0x05
    49ca:	ca c0       	rjmp	.+404    	; 0x4b60 <UART_Init+0x726>
			break;
		case(4):
			fbaud = (F_CPU / (2400 * 8)) - 1;
    49cc:	80 e0       	ldi	r24, 0x00	; 0
    49ce:	90 ec       	ldi	r25, 0xC0	; 192
    49d0:	af e0       	ldi	r26, 0x0F	; 15
    49d2:	b4 e4       	ldi	r27, 0x44	; 68
    49d4:	89 83       	std	Y+1, r24	; 0x01
    49d6:	9a 83       	std	Y+2, r25	; 0x02
    49d8:	ab 83       	std	Y+3, r26	; 0x03
    49da:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    49dc:	69 81       	ldd	r22, Y+1	; 0x01
    49de:	7a 81       	ldd	r23, Y+2	; 0x02
    49e0:	8b 81       	ldd	r24, Y+3	; 0x03
    49e2:	9c 81       	ldd	r25, Y+4	; 0x04
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e0       	ldi	r20, 0x00	; 0
    49ea:	5f e3       	ldi	r21, 0x3F	; 63
    49ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	9e 83       	std	Y+6, r25	; 0x06
    4a02:	8d 83       	std	Y+5, r24	; 0x05
    4a04:	ad c0       	rjmp	.+346    	; 0x4b60 <UART_Init+0x726>
			break;
		case(5):
			fbaud = (F_CPU / (4800 * 8)) - 1;
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	a0 e8       	ldi	r26, 0x80	; 128
    4a0c:	bf e4       	ldi	r27, 0x4F	; 79
    4a0e:	89 83       	std	Y+1, r24	; 0x01
    4a10:	9a 83       	std	Y+2, r25	; 0x02
    4a12:	ab 83       	std	Y+3, r26	; 0x03
    4a14:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4a16:	69 81       	ldd	r22, Y+1	; 0x01
    4a18:	7a 81       	ldd	r23, Y+2	; 0x02
    4a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e0       	ldi	r20, 0x00	; 0
    4a24:	5f e3       	ldi	r21, 0x3F	; 63
    4a26:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	cb 01       	movw	r24, r22
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4a36:	dc 01       	movw	r26, r24
    4a38:	cb 01       	movw	r24, r22
    4a3a:	9e 83       	std	Y+6, r25	; 0x06
    4a3c:	8d 83       	std	Y+5, r24	; 0x05
    4a3e:	90 c0       	rjmp	.+288    	; 0x4b60 <UART_Init+0x726>
			break;
		case(6):
			fbaud = (F_CPU / (9600 * 8)) - 1;
    4a40:	80 e0       	ldi	r24, 0x00	; 0
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	a5 e7       	ldi	r26, 0x75	; 117
    4a46:	b4 e4       	ldi	r27, 0x44	; 68
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	9a 83       	std	Y+2, r25	; 0x02
    4a4c:	ab 83       	std	Y+3, r26	; 0x03
    4a4e:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4a50:	69 81       	ldd	r22, Y+1	; 0x01
    4a52:	7a 81       	ldd	r23, Y+2	; 0x02
    4a54:	8b 81       	ldd	r24, Y+3	; 0x03
    4a56:	9c 81       	ldd	r25, Y+4	; 0x04
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	5f e3       	ldi	r21, 0x3F	; 63
    4a60:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	bc 01       	movw	r22, r24
    4a6a:	cd 01       	movw	r24, r26
    4a6c:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	9e 83       	std	Y+6, r25	; 0x06
    4a76:	8d 83       	std	Y+5, r24	; 0x05
    4a78:	73 c0       	rjmp	.+230    	; 0x4b60 <UART_Init+0x726>
			break;
		case(7):
			fbaud = (F_CPU / (19200 * 8)) - 1;
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	90 e8       	ldi	r25, 0x80	; 128
    4a7e:	a4 ef       	ldi	r26, 0xF4	; 244
    4a80:	b3 e4       	ldi	r27, 0x43	; 67
    4a82:	89 83       	std	Y+1, r24	; 0x01
    4a84:	9a 83       	std	Y+2, r25	; 0x02
    4a86:	ab 83       	std	Y+3, r26	; 0x03
    4a88:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4a8a:	69 81       	ldd	r22, Y+1	; 0x01
    4a8c:	7a 81       	ldd	r23, Y+2	; 0x02
    4a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a90:	9c 81       	ldd	r25, Y+4	; 0x04
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	5f e3       	ldi	r21, 0x3F	; 63
    4a9a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	bc 01       	movw	r22, r24
    4aa4:	cd 01       	movw	r24, r26
    4aa6:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	9e 83       	std	Y+6, r25	; 0x06
    4ab0:	8d 83       	std	Y+5, r24	; 0x05
    4ab2:	56 c0       	rjmp	.+172    	; 0x4b60 <UART_Init+0x726>
			break;
		case(8):
			fbaud = (F_CPU / (38400 * 8)) - 1;
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	ac e0       	ldi	r26, 0x0C	; 12
    4aba:	b2 e4       	ldi	r27, 0x42	; 66
    4abc:	89 83       	std	Y+1, r24	; 0x01
    4abe:	9a 83       	std	Y+2, r25	; 0x02
    4ac0:	ab 83       	std	Y+3, r26	; 0x03
    4ac2:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4ac4:	69 81       	ldd	r22, Y+1	; 0x01
    4ac6:	7a 81       	ldd	r23, Y+2	; 0x02
    4ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aca:	9c 81       	ldd	r25, Y+4	; 0x04
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e0       	ldi	r20, 0x00	; 0
    4ad2:	5f e3       	ldi	r21, 0x3F	; 63
    4ad4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	bc 01       	movw	r22, r24
    4ade:	cd 01       	movw	r24, r26
    4ae0:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	9e 83       	std	Y+6, r25	; 0x06
    4aea:	8d 83       	std	Y+5, r24	; 0x05
    4aec:	39 c0       	rjmp	.+114    	; 0x4b60 <UART_Init+0x726>
			break;
		case(9):
			fbaud = (F_CPU / (57600 * 8)) - 1;
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	a8 eb       	ldi	r26, 0xB8	; 184
    4af4:	b1 e4       	ldi	r27, 0x41	; 65
    4af6:	89 83       	std	Y+1, r24	; 0x01
    4af8:	9a 83       	std	Y+2, r25	; 0x02
    4afa:	ab 83       	std	Y+3, r26	; 0x03
    4afc:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4afe:	69 81       	ldd	r22, Y+1	; 0x01
    4b00:	7a 81       	ldd	r23, Y+2	; 0x02
    4b02:	8b 81       	ldd	r24, Y+3	; 0x03
    4b04:	9c 81       	ldd	r25, Y+4	; 0x04
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	40 e0       	ldi	r20, 0x00	; 0
    4b0c:	5f e3       	ldi	r21, 0x3F	; 63
    4b0e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	bc 01       	movw	r22, r24
    4b18:	cd 01       	movw	r24, r26
    4b1a:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	9e 83       	std	Y+6, r25	; 0x06
    4b24:	8d 83       	std	Y+5, r24	; 0x05
    4b26:	1c c0       	rjmp	.+56     	; 0x4b60 <UART_Init+0x726>
			break;
		case(10):
			fbaud = (F_CPU / (115200 * 8)) - 1;
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	a0 e3       	ldi	r26, 0x30	; 48
    4b2e:	b1 e4       	ldi	r27, 0x41	; 65
    4b30:	89 83       	std	Y+1, r24	; 0x01
    4b32:	9a 83       	std	Y+2, r25	; 0x02
    4b34:	ab 83       	std	Y+3, r26	; 0x03
    4b36:	bc 83       	std	Y+4, r27	; 0x04
			baud = (int)(fbaud + 0.5);
    4b38:	69 81       	ldd	r22, Y+1	; 0x01
    4b3a:	7a 81       	ldd	r23, Y+2	; 0x02
    4b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 e0       	ldi	r20, 0x00	; 0
    4b46:	5f e3       	ldi	r21, 0x3F	; 63
    4b48:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	bc 01       	movw	r22, r24
    4b52:	cd 01       	movw	r24, r26
    4b54:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	9e 83       	std	Y+6, r25	; 0x06
    4b5e:	8d 83       	std	Y+5, r24	; 0x05
			break;
		}
	}

	UBRRL = baud;
    4b60:	e9 e2       	ldi	r30, 0x29	; 41
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	8d 81       	ldd	r24, Y+5	; 0x05
    4b66:	80 83       	st	Z, r24
	UBRRH = baud >> 8;
    4b68:	e0 e4       	ldi	r30, 0x40	; 64
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b70:	89 2f       	mov	r24, r25
    4b72:	99 27       	eor	r25, r25
    4b74:	80 83       	st	Z, r24
}
    4b76:	2f 96       	adiw	r28, 0x0f	; 15
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	f8 94       	cli
    4b7c:	de bf       	out	0x3e, r29	; 62
    4b7e:	0f be       	out	0x3f, r0	; 63
    4b80:	cd bf       	out	0x3d, r28	; 61
    4b82:	cf 91       	pop	r28
    4b84:	df 91       	pop	r29
    4b86:	0f 91       	pop	r16
    4b88:	08 95       	ret

00004b8a <SEND_DATA_UART>:


void SEND_DATA_UART(volatile const uint8 a_DATA){
    4b8a:	df 93       	push	r29
    4b8c:	cf 93       	push	r28
    4b8e:	0f 92       	push	r0
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
    4b94:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, UDRE)){}
    4b96:	eb e2       	ldi	r30, 0x2B	; 43
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	88 2f       	mov	r24, r24
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	80 72       	andi	r24, 0x20	; 32
    4ba2:	90 70       	andi	r25, 0x00	; 0
    4ba4:	00 97       	sbiw	r24, 0x00	; 0
    4ba6:	b9 f3       	breq	.-18     	; 0x4b96 <SEND_DATA_UART+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = a_DATA;
    4ba8:	ec e2       	ldi	r30, 0x2C	; 44
    4baa:	f0 e0       	ldi	r31, 0x00	; 0
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	80 83       	st	Z, r24
}
    4bb0:	0f 90       	pop	r0
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	08 95       	ret

00004bb8 <RECEIVE_DATA_UART>:

uint8 RECEIVE_DATA_UART(void){
    4bb8:	df 93       	push	r29
    4bba:	cf 93       	push	r28
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    4bc0:	eb e2       	ldi	r30, 0x2B	; 43
    4bc2:	f0 e0       	ldi	r31, 0x00	; 0
    4bc4:	80 81       	ld	r24, Z
    4bc6:	88 23       	and	r24, r24
    4bc8:	dc f7       	brge	.-10     	; 0x4bc0 <RECEIVE_DATA_UART+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
    4bca:	ec e2       	ldi	r30, 0x2C	; 44
    4bcc:	f0 e0       	ldi	r31, 0x00	; 0
    4bce:	80 81       	ld	r24, Z
}
    4bd0:	cf 91       	pop	r28
    4bd2:	df 91       	pop	r29
    4bd4:	08 95       	ret

00004bd6 <SEND_STRING_UART>:

void SEND_STRING_UART(const uint8 *STR){
    4bd6:	df 93       	push	r29
    4bd8:	cf 93       	push	r28
    4bda:	00 d0       	rcall	.+0      	; 0x4bdc <SEND_STRING_UART+0x6>
    4bdc:	0f 92       	push	r0
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
    4be2:	9b 83       	std	Y+3, r25	; 0x03
    4be4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    4be6:	19 82       	std	Y+1, r1	; 0x01
    4be8:	0e c0       	rjmp	.+28     	; 0x4c06 <SEND_STRING_UART+0x30>
	while (STR[count] != '\0'){
		SEND_DATA_UART(STR[count]);
    4bea:	89 81       	ldd	r24, Y+1	; 0x01
    4bec:	28 2f       	mov	r18, r24
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	e2 0f       	add	r30, r18
    4bf8:	f3 1f       	adc	r31, r19
    4bfa:	80 81       	ld	r24, Z
    4bfc:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <SEND_DATA_UART>
		count++;
    4c00:	89 81       	ldd	r24, Y+1	; 0x01
    4c02:	8f 5f       	subi	r24, 0xFF	; 255
    4c04:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void SEND_STRING_UART(const uint8 *STR){
	uint8 count = 0;
	while (STR[count] != '\0'){
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	28 2f       	mov	r18, r24
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c10:	fc 01       	movw	r30, r24
    4c12:	e2 0f       	add	r30, r18
    4c14:	f3 1f       	adc	r31, r19
    4c16:	80 81       	ld	r24, Z
    4c18:	88 23       	and	r24, r24
    4c1a:	39 f7       	brne	.-50     	; 0x4bea <SEND_STRING_UART+0x14>
		SEND_DATA_UART(STR[count]);
		count++;
	}
}
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	cf 91       	pop	r28
    4c24:	df 91       	pop	r29
    4c26:	08 95       	ret

00004c28 <SEND_BYTE_UART>:

void SEND_BYTE_UART(volatile const uint8 a_DATA){
    4c28:	df 93       	push	r29
    4c2a:	cf 93       	push	r28
    4c2c:	0f 92       	push	r0
    4c2e:	cd b7       	in	r28, 0x3d	; 61
    4c30:	de b7       	in	r29, 0x3e	; 62
    4c32:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE)){}
    4c34:	eb e2       	ldi	r30, 0x2B	; 43
    4c36:	f0 e0       	ldi	r31, 0x00	; 0
    4c38:	80 81       	ld	r24, Z
    4c3a:	88 2f       	mov	r24, r24
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	80 72       	andi	r24, 0x20	; 32
    4c40:	90 70       	andi	r25, 0x00	; 0
    4c42:	00 97       	sbiw	r24, 0x00	; 0
    4c44:	b9 f3       	breq	.-18     	; 0x4c34 <SEND_BYTE_UART+0xc>
	UDR = a_DATA;
    4c46:	ec e2       	ldi	r30, 0x2C	; 44
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	80 83       	st	Z, r24
}
    4c4e:	0f 90       	pop	r0
    4c50:	cf 91       	pop	r28
    4c52:	df 91       	pop	r29
    4c54:	08 95       	ret

00004c56 <RECEIVE_STRING_UART>:

void RECEIVE_STRING_UART(uint8 *Str){
    4c56:	0f 93       	push	r16
    4c58:	1f 93       	push	r17
    4c5a:	df 93       	push	r29
    4c5c:	cf 93       	push	r28
    4c5e:	00 d0       	rcall	.+0      	; 0x4c60 <RECEIVE_STRING_UART+0xa>
    4c60:	0f 92       	push	r0
    4c62:	cd b7       	in	r28, 0x3d	; 61
    4c64:	de b7       	in	r29, 0x3e	; 62
    4c66:	9b 83       	std	Y+3, r25	; 0x03
    4c68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    4c6a:	19 82       	std	Y+1, r1	; 0x01
	Str[count] = RECEIVE_DATA_UART();
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	28 2f       	mov	r18, r24
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	8a 81       	ldd	r24, Y+2	; 0x02
    4c74:	9b 81       	ldd	r25, Y+3	; 0x03
    4c76:	8c 01       	movw	r16, r24
    4c78:	02 0f       	add	r16, r18
    4c7a:	13 1f       	adc	r17, r19
    4c7c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    4c80:	f8 01       	movw	r30, r16
    4c82:	80 83       	st	Z, r24
    4c84:	0f c0       	rjmp	.+30     	; 0x4ca4 <RECEIVE_STRING_UART+0x4e>
	while(Str[count] != '\n')
	{
		count++;
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	8f 5f       	subi	r24, 0xFF	; 255
    4c8a:	89 83       	std	Y+1, r24	; 0x01
		Str[count] = RECEIVE_DATA_UART();
    4c8c:	89 81       	ldd	r24, Y+1	; 0x01
    4c8e:	28 2f       	mov	r18, r24
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	8a 81       	ldd	r24, Y+2	; 0x02
    4c94:	9b 81       	ldd	r25, Y+3	; 0x03
    4c96:	8c 01       	movw	r16, r24
    4c98:	02 0f       	add	r16, r18
    4c9a:	13 1f       	adc	r17, r19
    4c9c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    4ca0:	f8 01       	movw	r30, r16
    4ca2:	80 83       	st	Z, r24
}

void RECEIVE_STRING_UART(uint8 *Str){
	uint8 count = 0;
	Str[count] = RECEIVE_DATA_UART();
	while(Str[count] != '\n')
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	28 2f       	mov	r18, r24
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	8a 81       	ldd	r24, Y+2	; 0x02
    4cac:	9b 81       	ldd	r25, Y+3	; 0x03
    4cae:	fc 01       	movw	r30, r24
    4cb0:	e2 0f       	add	r30, r18
    4cb2:	f3 1f       	adc	r31, r19
    4cb4:	80 81       	ld	r24, Z
    4cb6:	8a 30       	cpi	r24, 0x0A	; 10
    4cb8:	31 f7       	brne	.-52     	; 0x4c86 <RECEIVE_STRING_UART+0x30>
	{
		count++;
		Str[count] = RECEIVE_DATA_UART();
	}
	Str[count] = '\0';
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	28 2f       	mov	r18, r24
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc4:	fc 01       	movw	r30, r24
    4cc6:	e2 0f       	add	r30, r18
    4cc8:	f3 1f       	adc	r31, r19
    4cca:	10 82       	st	Z, r1
}
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	cf 91       	pop	r28
    4cd4:	df 91       	pop	r29
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	08 95       	ret

00004cdc <UART_SetHandlerPointer>:

void UART_SetHandlerPointer(void(*FuncPtr)(void))
{
    4cdc:	df 93       	push	r29
    4cde:	cf 93       	push	r28
    4ce0:	00 d0       	rcall	.+0      	; 0x4ce2 <UART_SetHandlerPointer+0x6>
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
    4ce6:	9a 83       	std	Y+2, r25	; 0x02
    4ce8:	89 83       	std	Y+1, r24	; 0x01
	UART_HandlerPointer = FuncPtr;
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	9a 81       	ldd	r25, Y+2	; 0x02
    4cee:	90 93 69 00 	sts	0x0069, r25
    4cf2:	80 93 68 00 	sts	0x0068, r24
}
    4cf6:	0f 90       	pop	r0
    4cf8:	0f 90       	pop	r0
    4cfa:	cf 91       	pop	r28
    4cfc:	df 91       	pop	r29
    4cfe:	08 95       	ret

00004d00 <UART_Handler>:

void UART_Handler(void)
{
    4d00:	df 93       	push	r29
    4d02:	cf 93       	push	r28
    4d04:	cd b7       	in	r28, 0x3d	; 61
    4d06:	de b7       	in	r29, 0x3e	; 62
	UART_HandlerPointer();
    4d08:	e0 91 68 00 	lds	r30, 0x0068
    4d0c:	f0 91 69 00 	lds	r31, 0x0069
    4d10:	09 95       	icall
}
    4d12:	cf 91       	pop	r28
    4d14:	df 91       	pop	r29
    4d16:	08 95       	ret

00004d18 <STUB>:

void STUB(void)
{
    4d18:	df 93       	push	r29
    4d1a:	cf 93       	push	r28
    4d1c:	cd b7       	in	r28, 0x3d	; 61
    4d1e:	de b7       	in	r29, 0x3e	; 62

}
    4d20:	cf 91       	pop	r28
    4d22:	df 91       	pop	r29
    4d24:	08 95       	ret

00004d26 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    4d26:	df 93       	push	r29
    4d28:	cf 93       	push	r28
    4d2a:	cd b7       	in	r28, 0x3d	; 61
    4d2c:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    4d2e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <TWI_init>
}
    4d32:	cf 91       	pop	r28
    4d34:	df 91       	pop	r29
    4d36:	08 95       	ret

00004d38 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    4d38:	df 93       	push	r29
    4d3a:	cf 93       	push	r28
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <EEPROM_writeByte+0x6>
    4d3e:	00 d0       	rcall	.+0      	; 0x4d40 <EEPROM_writeByte+0x8>
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	9a 83       	std	Y+2, r25	; 0x02
    4d46:	89 83       	std	Y+1, r24	; 0x01
    4d48:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    4d4a:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <TWI_start>
    if (TWI_getStatus() != TW_START)
    4d4e:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4d52:	88 30       	cpi	r24, 0x08	; 8
    4d54:	11 f0       	breq	.+4      	; 0x4d5a <EEPROM_writeByte+0x22>
        return ERROR;
    4d56:	1c 82       	std	Y+4, r1	; 0x04
    4d58:	28 c0       	rjmp	.+80     	; 0x4daa <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    4d5a:	89 81       	ldd	r24, Y+1	; 0x01
    4d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d5e:	80 70       	andi	r24, 0x00	; 0
    4d60:	97 70       	andi	r25, 0x07	; 7
    4d62:	88 0f       	add	r24, r24
    4d64:	89 2f       	mov	r24, r25
    4d66:	88 1f       	adc	r24, r24
    4d68:	99 0b       	sbc	r25, r25
    4d6a:	91 95       	neg	r25
    4d6c:	80 6a       	ori	r24, 0xA0	; 160
    4d6e:	0e 94 6e 27 	call	0x4edc	; 0x4edc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    4d72:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4d76:	88 31       	cpi	r24, 0x18	; 24
    4d78:	11 f0       	breq	.+4      	; 0x4d7e <EEPROM_writeByte+0x46>
        return ERROR; 
    4d7a:	1c 82       	std	Y+4, r1	; 0x04
    4d7c:	16 c0       	rjmp	.+44     	; 0x4daa <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
    4d80:	0e 94 6e 27 	call	0x4edc	; 0x4edc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    4d84:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4d88:	88 32       	cpi	r24, 0x28	; 40
    4d8a:	11 f0       	breq	.+4      	; 0x4d90 <EEPROM_writeByte+0x58>
        return ERROR;
    4d8c:	1c 82       	std	Y+4, r1	; 0x04
    4d8e:	0d c0       	rjmp	.+26     	; 0x4daa <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    4d90:	8b 81       	ldd	r24, Y+3	; 0x03
    4d92:	0e 94 6e 27 	call	0x4edc	; 0x4edc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    4d96:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4d9a:	88 32       	cpi	r24, 0x28	; 40
    4d9c:	11 f0       	breq	.+4      	; 0x4da2 <EEPROM_writeByte+0x6a>
        return ERROR;
    4d9e:	1c 82       	std	Y+4, r1	; 0x04
    4da0:	04 c0       	rjmp	.+8      	; 0x4daa <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    4da2:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <TWI_stop>
	
    return SUCCESS;
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	8c 83       	std	Y+4, r24	; 0x04
    4daa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	cf 91       	pop	r28
    4db6:	df 91       	pop	r29
    4db8:	08 95       	ret

00004dba <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    4dba:	df 93       	push	r29
    4dbc:	cf 93       	push	r28
    4dbe:	00 d0       	rcall	.+0      	; 0x4dc0 <EEPROM_readByte+0x6>
    4dc0:	00 d0       	rcall	.+0      	; 0x4dc2 <EEPROM_readByte+0x8>
    4dc2:	0f 92       	push	r0
    4dc4:	cd b7       	in	r28, 0x3d	; 61
    4dc6:	de b7       	in	r29, 0x3e	; 62
    4dc8:	9a 83       	std	Y+2, r25	; 0x02
    4dca:	89 83       	std	Y+1, r24	; 0x01
    4dcc:	7c 83       	std	Y+4, r23	; 0x04
    4dce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    4dd0:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <TWI_start>
    if (TWI_getStatus() != TW_START)
    4dd4:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4dd8:	88 30       	cpi	r24, 0x08	; 8
    4dda:	11 f0       	breq	.+4      	; 0x4de0 <EEPROM_readByte+0x26>
        return ERROR;
    4ddc:	1d 82       	std	Y+5, r1	; 0x05
    4dde:	44 c0       	rjmp	.+136    	; 0x4e68 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    4de0:	89 81       	ldd	r24, Y+1	; 0x01
    4de2:	9a 81       	ldd	r25, Y+2	; 0x02
    4de4:	80 70       	andi	r24, 0x00	; 0
    4de6:	97 70       	andi	r25, 0x07	; 7
    4de8:	88 0f       	add	r24, r24
    4dea:	89 2f       	mov	r24, r25
    4dec:	88 1f       	adc	r24, r24
    4dee:	99 0b       	sbc	r25, r25
    4df0:	91 95       	neg	r25
    4df2:	80 6a       	ori	r24, 0xA0	; 160
    4df4:	0e 94 6e 27 	call	0x4edc	; 0x4edc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    4df8:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4dfc:	88 31       	cpi	r24, 0x18	; 24
    4dfe:	11 f0       	breq	.+4      	; 0x4e04 <EEPROM_readByte+0x4a>
        return ERROR;
    4e00:	1d 82       	std	Y+5, r1	; 0x05
    4e02:	32 c0       	rjmp	.+100    	; 0x4e68 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    4e04:	89 81       	ldd	r24, Y+1	; 0x01
    4e06:	0e 94 6e 27 	call	0x4edc	; 0x4edc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    4e0a:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4e0e:	88 32       	cpi	r24, 0x28	; 40
    4e10:	11 f0       	breq	.+4      	; 0x4e16 <EEPROM_readByte+0x5c>
        return ERROR;
    4e12:	1d 82       	std	Y+5, r1	; 0x05
    4e14:	29 c0       	rjmp	.+82     	; 0x4e68 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    4e16:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    4e1a:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4e1e:	80 31       	cpi	r24, 0x10	; 16
    4e20:	11 f0       	breq	.+4      	; 0x4e26 <EEPROM_readByte+0x6c>
        return ERROR;
    4e22:	1d 82       	std	Y+5, r1	; 0x05
    4e24:	21 c0       	rjmp	.+66     	; 0x4e68 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2a:	80 70       	andi	r24, 0x00	; 0
    4e2c:	97 70       	andi	r25, 0x07	; 7
    4e2e:	88 0f       	add	r24, r24
    4e30:	89 2f       	mov	r24, r25
    4e32:	88 1f       	adc	r24, r24
    4e34:	99 0b       	sbc	r25, r25
    4e36:	91 95       	neg	r25
    4e38:	81 6a       	ori	r24, 0xA1	; 161
    4e3a:	0e 94 6e 27 	call	0x4edc	; 0x4edc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    4e3e:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4e42:	80 34       	cpi	r24, 0x40	; 64
    4e44:	11 f0       	breq	.+4      	; 0x4e4a <EEPROM_readByte+0x90>
        return ERROR;
    4e46:	1d 82       	std	Y+5, r1	; 0x05
    4e48:	0f c0       	rjmp	.+30     	; 0x4e68 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    4e4a:	0e 94 98 27 	call	0x4f30	; 0x4f30 <TWI_readWithNACK>
    4e4e:	eb 81       	ldd	r30, Y+3	; 0x03
    4e50:	fc 81       	ldd	r31, Y+4	; 0x04
    4e52:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    4e54:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <TWI_getStatus>
    4e58:	88 35       	cpi	r24, 0x58	; 88
    4e5a:	11 f0       	breq	.+4      	; 0x4e60 <EEPROM_readByte+0xa6>
        return ERROR;
    4e5c:	1d 82       	std	Y+5, r1	; 0x05
    4e5e:	04 c0       	rjmp	.+8      	; 0x4e68 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    4e60:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <TWI_stop>
    return SUCCESS;
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	8d 83       	std	Y+5, r24	; 0x05
    4e68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	cf 91       	pop	r28
    4e76:	df 91       	pop	r29
    4e78:	08 95       	ret

00004e7a <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    4e7a:	df 93       	push	r29
    4e7c:	cf 93       	push	r28
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 368.640 kbps using zero pre-scaler TWPS=00 and F_CPU = 11095200 Hz */
    TWBR = 0x07;
    4e82:	e0 e2       	ldi	r30, 0x20	; 32
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	87 e0       	ldi	r24, 0x07	; 7
    4e88:	80 83       	st	Z, r24
	TWSR = 0x00;
    4e8a:	e1 e2       	ldi	r30, 0x21	; 33
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    4e90:	e2 e2       	ldi	r30, 0x22	; 34
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	82 e0       	ldi	r24, 0x02	; 2
    4e96:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    4e98:	e6 e5       	ldi	r30, 0x56	; 86
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	84 e0       	ldi	r24, 0x04	; 4
    4e9e:	80 83       	st	Z, r24
}
    4ea0:	cf 91       	pop	r28
    4ea2:	df 91       	pop	r29
    4ea4:	08 95       	ret

00004ea6 <TWI_start>:

void TWI_start(void)
{
    4ea6:	df 93       	push	r29
    4ea8:	cf 93       	push	r28
    4eaa:	cd b7       	in	r28, 0x3d	; 61
    4eac:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    4eae:	e6 e5       	ldi	r30, 0x56	; 86
    4eb0:	f0 e0       	ldi	r31, 0x00	; 0
    4eb2:	84 ea       	ldi	r24, 0xA4	; 164
    4eb4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4eb6:	e6 e5       	ldi	r30, 0x56	; 86
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	80 81       	ld	r24, Z
    4ebc:	88 23       	and	r24, r24
    4ebe:	dc f7       	brge	.-10     	; 0x4eb6 <TWI_start+0x10>
}
    4ec0:	cf 91       	pop	r28
    4ec2:	df 91       	pop	r29
    4ec4:	08 95       	ret

00004ec6 <TWI_stop>:

void TWI_stop(void)
{
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	cd b7       	in	r28, 0x3d	; 61
    4ecc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    4ece:	e6 e5       	ldi	r30, 0x56	; 86
    4ed0:	f0 e0       	ldi	r31, 0x00	; 0
    4ed2:	84 e9       	ldi	r24, 0x94	; 148
    4ed4:	80 83       	st	Z, r24
}
    4ed6:	cf 91       	pop	r28
    4ed8:	df 91       	pop	r29
    4eda:	08 95       	ret

00004edc <TWI_write>:

void TWI_write(uint8 data)
{
    4edc:	df 93       	push	r29
    4ede:	cf 93       	push	r28
    4ee0:	0f 92       	push	r0
    4ee2:	cd b7       	in	r28, 0x3d	; 61
    4ee4:	de b7       	in	r29, 0x3e	; 62
    4ee6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    4ee8:	e3 e2       	ldi	r30, 0x23	; 35
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
    4eee:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    4ef0:	e6 e5       	ldi	r30, 0x56	; 86
    4ef2:	f0 e0       	ldi	r31, 0x00	; 0
    4ef4:	84 e8       	ldi	r24, 0x84	; 132
    4ef6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4ef8:	e6 e5       	ldi	r30, 0x56	; 86
    4efa:	f0 e0       	ldi	r31, 0x00	; 0
    4efc:	80 81       	ld	r24, Z
    4efe:	88 23       	and	r24, r24
    4f00:	dc f7       	brge	.-10     	; 0x4ef8 <TWI_write+0x1c>
}
    4f02:	0f 90       	pop	r0
    4f04:	cf 91       	pop	r28
    4f06:	df 91       	pop	r29
    4f08:	08 95       	ret

00004f0a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    4f0a:	df 93       	push	r29
    4f0c:	cf 93       	push	r28
    4f0e:	cd b7       	in	r28, 0x3d	; 61
    4f10:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    4f12:	e6 e5       	ldi	r30, 0x56	; 86
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	84 ec       	ldi	r24, 0xC4	; 196
    4f18:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4f1a:	e6 e5       	ldi	r30, 0x56	; 86
    4f1c:	f0 e0       	ldi	r31, 0x00	; 0
    4f1e:	80 81       	ld	r24, Z
    4f20:	88 23       	and	r24, r24
    4f22:	dc f7       	brge	.-10     	; 0x4f1a <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    4f24:	e3 e2       	ldi	r30, 0x23	; 35
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	80 81       	ld	r24, Z
}
    4f2a:	cf 91       	pop	r28
    4f2c:	df 91       	pop	r29
    4f2e:	08 95       	ret

00004f30 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    4f30:	df 93       	push	r29
    4f32:	cf 93       	push	r28
    4f34:	cd b7       	in	r28, 0x3d	; 61
    4f36:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    4f38:	e6 e5       	ldi	r30, 0x56	; 86
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	84 e8       	ldi	r24, 0x84	; 132
    4f3e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    4f40:	e6 e5       	ldi	r30, 0x56	; 86
    4f42:	f0 e0       	ldi	r31, 0x00	; 0
    4f44:	80 81       	ld	r24, Z
    4f46:	88 23       	and	r24, r24
    4f48:	dc f7       	brge	.-10     	; 0x4f40 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    4f4a:	e3 e2       	ldi	r30, 0x23	; 35
    4f4c:	f0 e0       	ldi	r31, 0x00	; 0
    4f4e:	80 81       	ld	r24, Z
}
    4f50:	cf 91       	pop	r28
    4f52:	df 91       	pop	r29
    4f54:	08 95       	ret

00004f56 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    4f56:	df 93       	push	r29
    4f58:	cf 93       	push	r28
    4f5a:	0f 92       	push	r0
    4f5c:	cd b7       	in	r28, 0x3d	; 61
    4f5e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    4f60:	e1 e2       	ldi	r30, 0x21	; 33
    4f62:	f0 e0       	ldi	r31, 0x00	; 0
    4f64:	80 81       	ld	r24, Z
    4f66:	88 7f       	andi	r24, 0xF8	; 248
    4f68:	89 83       	std	Y+1, r24	; 0x01
    return status;
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f6c:	0f 90       	pop	r0
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	08 95       	ret

00004f74 <main>:

#include "Server.h"
#include "BST_interface.h"

int main(void)
{
    4f74:	df 93       	push	r29
    4f76:	cf 93       	push	r28
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
	Server_Init();
    4f7c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <Server_Init>

	while(1){
		if(GetByte == ATM_TriggerTransmission)
    4f80:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <RECEIVE_DATA_UART>
    4f84:	81 34       	cpi	r24, 0x41	; 65
    4f86:	11 f4       	brne	.+4      	; 0x4f8c <main+0x18>
		{
			Server_HandleCommand();
    4f88:	0e 94 4e 21 	call	0x429c	; 0x429c <Server_HandleCommand>
		}
		HandleBST();
    4f8c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <HandleBST>
    4f90:	f7 cf       	rjmp	.-18     	; 0x4f80 <main+0xc>

00004f92 <__udivmodqi4>:
    4f92:	99 1b       	sub	r25, r25
    4f94:	79 e0       	ldi	r23, 0x09	; 9
    4f96:	04 c0       	rjmp	.+8      	; 0x4fa0 <__udivmodqi4_ep>

00004f98 <__udivmodqi4_loop>:
    4f98:	99 1f       	adc	r25, r25
    4f9a:	96 17       	cp	r25, r22
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <__udivmodqi4_ep>
    4f9e:	96 1b       	sub	r25, r22

00004fa0 <__udivmodqi4_ep>:
    4fa0:	88 1f       	adc	r24, r24
    4fa2:	7a 95       	dec	r23
    4fa4:	c9 f7       	brne	.-14     	; 0x4f98 <__udivmodqi4_loop>
    4fa6:	80 95       	com	r24
    4fa8:	08 95       	ret

00004faa <__divmodhi4>:
    4faa:	97 fb       	bst	r25, 7
    4fac:	09 2e       	mov	r0, r25
    4fae:	07 26       	eor	r0, r23
    4fb0:	0a d0       	rcall	.+20     	; 0x4fc6 <__divmodhi4_neg1>
    4fb2:	77 fd       	sbrc	r23, 7
    4fb4:	04 d0       	rcall	.+8      	; 0x4fbe <__divmodhi4_neg2>
    4fb6:	27 d0       	rcall	.+78     	; 0x5006 <__udivmodhi4>
    4fb8:	06 d0       	rcall	.+12     	; 0x4fc6 <__divmodhi4_neg1>
    4fba:	00 20       	and	r0, r0
    4fbc:	1a f4       	brpl	.+6      	; 0x4fc4 <__divmodhi4_exit>

00004fbe <__divmodhi4_neg2>:
    4fbe:	70 95       	com	r23
    4fc0:	61 95       	neg	r22
    4fc2:	7f 4f       	sbci	r23, 0xFF	; 255

00004fc4 <__divmodhi4_exit>:
    4fc4:	08 95       	ret

00004fc6 <__divmodhi4_neg1>:
    4fc6:	f6 f7       	brtc	.-4      	; 0x4fc4 <__divmodhi4_exit>
    4fc8:	90 95       	com	r25
    4fca:	81 95       	neg	r24
    4fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fce:	08 95       	ret

00004fd0 <__divmodsi4>:
    4fd0:	97 fb       	bst	r25, 7
    4fd2:	09 2e       	mov	r0, r25
    4fd4:	05 26       	eor	r0, r21
    4fd6:	0e d0       	rcall	.+28     	; 0x4ff4 <__divmodsi4_neg1>
    4fd8:	57 fd       	sbrc	r21, 7
    4fda:	04 d0       	rcall	.+8      	; 0x4fe4 <__divmodsi4_neg2>
    4fdc:	28 d0       	rcall	.+80     	; 0x502e <__udivmodsi4>
    4fde:	0a d0       	rcall	.+20     	; 0x4ff4 <__divmodsi4_neg1>
    4fe0:	00 1c       	adc	r0, r0
    4fe2:	38 f4       	brcc	.+14     	; 0x4ff2 <__divmodsi4_exit>

00004fe4 <__divmodsi4_neg2>:
    4fe4:	50 95       	com	r21
    4fe6:	40 95       	com	r20
    4fe8:	30 95       	com	r19
    4fea:	21 95       	neg	r18
    4fec:	3f 4f       	sbci	r19, 0xFF	; 255
    4fee:	4f 4f       	sbci	r20, 0xFF	; 255
    4ff0:	5f 4f       	sbci	r21, 0xFF	; 255

00004ff2 <__divmodsi4_exit>:
    4ff2:	08 95       	ret

00004ff4 <__divmodsi4_neg1>:
    4ff4:	f6 f7       	brtc	.-4      	; 0x4ff2 <__divmodsi4_exit>
    4ff6:	90 95       	com	r25
    4ff8:	80 95       	com	r24
    4ffa:	70 95       	com	r23
    4ffc:	61 95       	neg	r22
    4ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    5000:	8f 4f       	sbci	r24, 0xFF	; 255
    5002:	9f 4f       	sbci	r25, 0xFF	; 255
    5004:	08 95       	ret

00005006 <__udivmodhi4>:
    5006:	aa 1b       	sub	r26, r26
    5008:	bb 1b       	sub	r27, r27
    500a:	51 e1       	ldi	r21, 0x11	; 17
    500c:	07 c0       	rjmp	.+14     	; 0x501c <__udivmodhi4_ep>

0000500e <__udivmodhi4_loop>:
    500e:	aa 1f       	adc	r26, r26
    5010:	bb 1f       	adc	r27, r27
    5012:	a6 17       	cp	r26, r22
    5014:	b7 07       	cpc	r27, r23
    5016:	10 f0       	brcs	.+4      	; 0x501c <__udivmodhi4_ep>
    5018:	a6 1b       	sub	r26, r22
    501a:	b7 0b       	sbc	r27, r23

0000501c <__udivmodhi4_ep>:
    501c:	88 1f       	adc	r24, r24
    501e:	99 1f       	adc	r25, r25
    5020:	5a 95       	dec	r21
    5022:	a9 f7       	brne	.-22     	; 0x500e <__udivmodhi4_loop>
    5024:	80 95       	com	r24
    5026:	90 95       	com	r25
    5028:	bc 01       	movw	r22, r24
    502a:	cd 01       	movw	r24, r26
    502c:	08 95       	ret

0000502e <__udivmodsi4>:
    502e:	a1 e2       	ldi	r26, 0x21	; 33
    5030:	1a 2e       	mov	r1, r26
    5032:	aa 1b       	sub	r26, r26
    5034:	bb 1b       	sub	r27, r27
    5036:	fd 01       	movw	r30, r26
    5038:	0d c0       	rjmp	.+26     	; 0x5054 <__udivmodsi4_ep>

0000503a <__udivmodsi4_loop>:
    503a:	aa 1f       	adc	r26, r26
    503c:	bb 1f       	adc	r27, r27
    503e:	ee 1f       	adc	r30, r30
    5040:	ff 1f       	adc	r31, r31
    5042:	a2 17       	cp	r26, r18
    5044:	b3 07       	cpc	r27, r19
    5046:	e4 07       	cpc	r30, r20
    5048:	f5 07       	cpc	r31, r21
    504a:	20 f0       	brcs	.+8      	; 0x5054 <__udivmodsi4_ep>
    504c:	a2 1b       	sub	r26, r18
    504e:	b3 0b       	sbc	r27, r19
    5050:	e4 0b       	sbc	r30, r20
    5052:	f5 0b       	sbc	r31, r21

00005054 <__udivmodsi4_ep>:
    5054:	66 1f       	adc	r22, r22
    5056:	77 1f       	adc	r23, r23
    5058:	88 1f       	adc	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	1a 94       	dec	r1
    505e:	69 f7       	brne	.-38     	; 0x503a <__udivmodsi4_loop>
    5060:	60 95       	com	r22
    5062:	70 95       	com	r23
    5064:	80 95       	com	r24
    5066:	90 95       	com	r25
    5068:	9b 01       	movw	r18, r22
    506a:	ac 01       	movw	r20, r24
    506c:	bd 01       	movw	r22, r26
    506e:	cf 01       	movw	r24, r30
    5070:	08 95       	ret

00005072 <__prologue_saves__>:
    5072:	2f 92       	push	r2
    5074:	3f 92       	push	r3
    5076:	4f 92       	push	r4
    5078:	5f 92       	push	r5
    507a:	6f 92       	push	r6
    507c:	7f 92       	push	r7
    507e:	8f 92       	push	r8
    5080:	9f 92       	push	r9
    5082:	af 92       	push	r10
    5084:	bf 92       	push	r11
    5086:	cf 92       	push	r12
    5088:	df 92       	push	r13
    508a:	ef 92       	push	r14
    508c:	ff 92       	push	r15
    508e:	0f 93       	push	r16
    5090:	1f 93       	push	r17
    5092:	cf 93       	push	r28
    5094:	df 93       	push	r29
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
    509a:	ca 1b       	sub	r28, r26
    509c:	db 0b       	sbc	r29, r27
    509e:	0f b6       	in	r0, 0x3f	; 63
    50a0:	f8 94       	cli
    50a2:	de bf       	out	0x3e, r29	; 62
    50a4:	0f be       	out	0x3f, r0	; 63
    50a6:	cd bf       	out	0x3d, r28	; 61
    50a8:	09 94       	ijmp

000050aa <__epilogue_restores__>:
    50aa:	2a 88       	ldd	r2, Y+18	; 0x12
    50ac:	39 88       	ldd	r3, Y+17	; 0x11
    50ae:	48 88       	ldd	r4, Y+16	; 0x10
    50b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    50b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    50b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    50b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    50b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    50ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    50bc:	b9 84       	ldd	r11, Y+9	; 0x09
    50be:	c8 84       	ldd	r12, Y+8	; 0x08
    50c0:	df 80       	ldd	r13, Y+7	; 0x07
    50c2:	ee 80       	ldd	r14, Y+6	; 0x06
    50c4:	fd 80       	ldd	r15, Y+5	; 0x05
    50c6:	0c 81       	ldd	r16, Y+4	; 0x04
    50c8:	1b 81       	ldd	r17, Y+3	; 0x03
    50ca:	aa 81       	ldd	r26, Y+2	; 0x02
    50cc:	b9 81       	ldd	r27, Y+1	; 0x01
    50ce:	ce 0f       	add	r28, r30
    50d0:	d1 1d       	adc	r29, r1
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	f8 94       	cli
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	ed 01       	movw	r28, r26
    50de:	08 95       	ret

000050e0 <_exit>:
    50e0:	f8 94       	cli

000050e2 <__stop_program>:
    50e2:	ff cf       	rjmp	.-2      	; 0x50e2 <__stop_program>
